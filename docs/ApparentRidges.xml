<!-- This file can be parsed by haxe.rtti.XmlParser -->
<haxe>
	<abstract path="Any" params="" file="/usr/local/lib/haxe/std/Any.hx">
		<from><icast field="__cast"><c path="__cast.T"/></icast></from>
		<this><d/></this>
		<to><icast field="__promote"><c path="__promote.T"/></icast></to>
		<haxe_doc>`Any` is a type that is compatible with any other in both ways.

	This means that a value of any type can be assigned to `Any`, and
	vice-versa, a value of `Any` type can be assigned to any other type.

	It's a more type-safe alternative to `Dynamic`, because it doesn't
	support field access or operators and it's bound to monomorphs. So,
	to work with the actual value, it needs to be explicitly promoted
	to another type.</haxe_doc>
		<impl><class path="_Any.Any_Impl_" params="" file="/usr/local/lib/haxe/std/Any.hx" private="1" module="Any" final="1">
	<__promote params="T" get="inline" set="null" line="35" static="1">
		<f a="this">
			<d/>
			<c path="__promote.T"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
			<m n=":to"/>
		</meta>
	</__promote>
	<__cast params="T" get="inline" set="null" line="38" static="1">
		<f a="value">
			<c path="__cast.T"/>
			<x path="Any"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":from"/>
		</meta>
	</__cast>
	<toString get="inline" set="null" line="41" static="1">
		<f a="this">
			<d/>
			<c path="String"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</toString>
	<meta><m n=":keep"/></meta>
</class></impl>
	</abstract>
	<class path="_Any.Any_Impl_" params="" file="/usr/local/lib/haxe/std/Any.hx" private="1" module="Any" final="1">
		<__promote params="T" get="inline" set="null" line="35" static="1">
			<f a="this">
				<d/>
				<c path="__promote.T"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
				<m n=":to"/>
			</meta>
		</__promote>
		<__cast params="T" get="inline" set="null" line="38" static="1">
			<f a="value">
				<c path="__cast.T"/>
				<x path="Any"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":from"/>
			</meta>
		</__cast>
		<toString get="inline" set="null" line="41" static="1">
			<f a="this">
				<d/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</toString>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="Array" params="T" file="/usr/local/lib/haxe/std/Array.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` Array.</haxe_doc>
		</length>
		<concat public="1" set="method">
			<f a="a">
				<c path="Array"><c path="Array.T"/></c>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns a new Array by appending the elements of `a` to the elements of
		`this` Array.

		This operation does not modify `this` Array.

		If `a` is the empty Array `[]`, a copy of `this` Array is returned.

		The length of the returned Array is equal to the sum of `this.length`
		and `a.length`.

		If `a` is `null`, the result is unspecified.</haxe_doc>
		</concat>
		<join public="1" set="method">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of `this` Array, with `sep` separating
		each element.

		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`

		If `this` is the empty Array `[]`, the result is the empty String `""`.
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.

		If `sep` is null, the result is unspecified.</haxe_doc>
		</join>
		<pop public="1" set="method">
			<f a=""><x path="Null"><c path="Array.T"/></x></f>
			<haxe_doc>Removes the last element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this.length` will decrease by 1.

		If `this` is the empty Array `[]`, null is returned and the length
		remains 0.</haxe_doc>
		</pop>
		<push public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Adds the element `x` at the end of `this` Array and returns the new
		length of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` increases by 1.</haxe_doc>
		</push>
		<reverse public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[Reverse the order of elements of `this` Array.

		This operation modifies `this` Array in place.

		If `this.length < 2`, `this` remains unchanged.]]></haxe_doc>
		</reverse>
		<shift public="1" set="method">
			<f a=""><x path="Null"><c path="Array.T"/></x></f>
			<haxe_doc>Removes the first element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this`.length and the index of each
		remaining element is decreased by 1.

		If `this` is the empty Array `[]`, `null` is returned and the length
		remains 0.</haxe_doc>
		</shift>
		<slice public="1" set="method">
			<f a="pos:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Creates a shallow copy of the range of `this` Array, starting at and
		including `pos`, up to but not including `end`.

		This operation does not modify `this` Array.

		The elements are not copied and retain their identity.

		If `end` is omitted or exceeds `this.length`, it defaults to the end of
		`this` Array.

		If `pos` or `end` are negative, their offsets are calculated from the
		end of `this` Array by `this.length + pos` and `this.length + end`
		respectively. If this yields a negative value, 0 is used instead.

		If `pos` exceeds `this.length` or if `end` is less than or equals
		`pos`, the result is `[]`.</haxe_doc>
		</slice>
		<sort public="1" set="method">
			<f a="f">
				<f a=":">
					<c path="Array.T"/>
					<c path="Array.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Sorts `this` Array according to the comparison function `f`, where
		`f(x,y)` returns 0 if x == y, a positive Int if x > y and a
		negative Int if x < y.

		This operation modifies `this` Array in place.

		The sort operation is not guaranteed to be stable, which means that the
		order of equal elements may not be retained. For a stable Array sorting
		algorithm, `haxe.ds.ArraySort.sort()` can be used instead.

		If `f` is null, the result is unspecified.]]></haxe_doc>
		</sort>
		<splice public="1" set="method">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc><![CDATA[Removes `len` elements from `this` Array, starting at and including
		`pos`, an returns them.

		This operation modifies `this` Array in place.

		If `len` is < 0 or `pos` exceeds `this`.length, an empty Array [] is
		returned and `this` Array is unchanged.

		If `pos` is negative, its value is calculated from the end	of `this`
		Array by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the sum of the resulting values for `len` and `pos` exceed
		`this.length`, this operation will affect the elements from `pos` to the
		end of `this` Array.

		The length of the returned Array is equal to the new length of `this`
		Array subtracted from the original length of `this` Array. In other
		words, each element of the original `this` Array either remains in
		`this` Array or becomes an element of the returned Array.]]></haxe_doc>
		</splice>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Array.

		The result will include the individual elements' String representations
		separated by comma. The enclosing [ ] may be missing on some platforms,
		use `Std.string()` to get a String representation that is consistent
		across platforms.</haxe_doc>
		</toString>
		<unshift public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds the element `x` at the start of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` and the index of each Array element increases by 1.</haxe_doc>
		</unshift>
		<insert public="1" set="method">
			<f a="pos:x">
				<x path="Int"/>
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inserts the element `x` at the position `pos`.

		This operation modifies `this` Array in place.

		The offset is calculated like so:

		- If `pos` exceeds `this.length`, the offset is `this.length`.
		- If `pos` is negative, the offset is calculated from the end of `this`
		  Array, i.e. `this.length + pos`. If this yields a negative value, the
		  offset is 0.
		- Otherwise, the offset is `pos`.

		If the resulting offset does not exceed `this.length`, all elements from
		and including that offset to the end of `this` Array are moved one index
		ahead.</haxe_doc>
		</insert>
		<remove public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first occurrence of `x` in `this` Array.

		This operation modifies `this` Array in place.

		If `x` is found by checking standard equality, it is removed from `this`
		Array and all following elements are reindexed accordingly. The function
		then returns true.

		If `x` is not found, `this` Array is not changed and the function
		returns false.</haxe_doc>
		</remove>
		<contains public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns whether `this` Array contains `x`.

		If `x` is found by checking standard equality, the function returns `true`, otherwise
		the function returns `false`.</haxe_doc>
		</contains>
		<indexOf public="1" set="method">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the first occurrence of `x` in `this` Array, searching front to back.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with zero index. If it is negative, it will be taken as the
		offset from the end of `this` Array to compute the starting index. If given or computed
		starting index is less than 0, the whole array will be searched, if it is greater than
		or equal to the length of `this` Array, the function returns -1.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the last occurrence of `x` in `this` Array, searching back to front.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with the last element index. If it is negative, it will be
		taken as the offset from the end of `this` Array to compute the starting index. If
		given or computed starting index is greater than or equal to the length of `this` Array,
		the whole array will be searched, if it is less than 0, the function returns -1.</haxe_doc>
		</lastIndexOf>
		<copy public="1" set="method">
			<f a=""><c path="Array"><c path="Array.T"/></c></f>
			<haxe_doc>Returns a shallow copy of `this` Array.

		The elements are not copied and retain their identity, so
		`a[i] == a.copy()[i]` is true for any valid `i`. However,
		`a == a.copy()` is always false.</haxe_doc>
		</copy>
		<iterator public="1" get="inline" set="null" line="280">
			<f a=""><c path="haxe.iterators.ArrayIterator"><c path="Array.T"/></c></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns an iterator of the Array values.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="287">
			<f a=""><c path="haxe.iterators.ArrayKeyValueIterator"><c path="Array.T"/></c></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns an iterator of the Array indices and values.</haxe_doc>
		</keyValueIterator>
		<map public="1" params="S" get="inline" set="null" line="298">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<c path="map.S"/>
				</f>
				<c path="Array"><c path="map.S"/></c>
			</f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Creates a new Array by applying function `f` to all elements of `this`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
		</map>
		<filter public="1" get="inline" set="null" line="316">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns an Array containing those elements of `this` for which `f`
		returned true.

		The individual elements are not duplicated and retain their identity.

		If `f` is null, the result is unspecified.</haxe_doc>
		</filter>
		<resize public="1" set="method">
			<f a="len">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the length of the Array.

		If `len` is shorter than the array's current size, the last
		`length - len` elements will be removed. If `len` is longer, the Array
		will be extended, with new elements set to a target-specific default
		value:

		- always null on dynamic targets
		- 0, 0.0 or false for Int, Float and Bool respectively on static targets
		- null for other types on static targets</haxe_doc>
		</resize>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Array.</haxe_doc>
		</new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="Class" params="T" file="/usr/local/lib/haxe/std/Class.hx">
		<this><x path="Class"><c path="Class.T"/></x></this>
		<haxe_doc>An abstract type that represents a Class.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-class-instance.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Enum" params="T" file="/usr/local/lib/haxe/std/Enum.hx">
		<this><x path="Enum"><c path="Enum.T"/></x></this>
		<haxe_doc>An abstract type that represents an Enum type.

	The corresponding enum instance type is `EnumValue`.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="EnumValue" params="" file="/usr/local/lib/haxe/std/EnumValue.hx">
		<this><x path="EnumValue"/></this>
		<haxe_doc>An abstract type that represents any enum value.
	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
		<impl><class path="_EnumValue.EnumValue_Impl_" params="" file="/usr/local/lib/haxe/std/EnumValue.hx" private="1" module="EnumValue" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<typedef path="Map" params="K:V" file="/usr/local/lib/haxe/std/Map.hx"><x path="haxe.ds.Map">
	<c path="Map.K"/>
	<c path="Map.V"/>
</x></typedef>
	<typedef path="IMap" params="K:V" file="/usr/local/lib/haxe/std/Map.hx" module="Map">
		<c path="haxe.IMap">
			<c path="IMap.K"/>
			<c path="IMap.V"/>
		</c>
		<meta>
			<m n=":dox"><e>hide</e></m>
			<m n=":deprecated"/>
		</meta>
	</typedef>
	<class path="Math" params="" file="/usr/local/lib/haxe/std/Math.hx" extern="1">
		<PI public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>Represents the ratio of the circumference of a circle to its diameter,
		specified by the constant, π. `PI` is approximately `3.141592653589793`.</haxe_doc>
		</PI>
		<NEGATIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special `Float` constant which denotes negative infinity.

		For example, this is the result of `-1.0 / 0.0`.

		Operations with `NEGATIVE_INFINITY` as an operand may result in
		`NEGATIVE_INFINITY`, `POSITIVE_INFINITY` or `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.</haxe_doc>
		</NEGATIVE_INFINITY>
		<POSITIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special `Float` constant which denotes positive infinity.

		For example, this is the result of `1.0 / 0.0`.

		Operations with `POSITIVE_INFINITY` as an operand may result in
		`NEGATIVE_INFINITY`, `POSITIVE_INFINITY` or `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.</haxe_doc>
		</POSITIVE_INFINITY>
		<NaN public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special `Float` constant which denotes an invalid number.

		`NaN` stands for "Not a Number". It occurs when a mathematically incorrect
		operation is executed, such as taking the square root of a negative
		number: `Math.sqrt(-1)`.

		All further operations with `NaN` as an operand will result in `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.

		In order to test if a value is `NaN`, you should use `Math.isNaN()` function.</haxe_doc>
		</NaN>
		<abs public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the absolute value of `v`.

		- If `v` is positive or `0`, the result is unchanged. Otherwise the result is `-v`.
		- If `v` is `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		- If `v` is `NaN`, the result is `NaN`.</haxe_doc>
		</abs>
		<min public="1" set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the smaller of values `a` and `b`.

		- If `a` or `b` are `NaN`, the result is `NaN`.
		- If `a` or `b` are `NEGATIVE_INFINITY`, the result is `NEGATIVE_INFINITY`.
		- If `a` and `b` are `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.</haxe_doc>
		</min>
		<max public="1" set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the greater of values `a` and `b`.

		- If `a` or `b` are `NaN`, the result is `NaN`.
		- If `a` or `b` are `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		- If `a` and `b` are `NEGATIVE_INFINITY`, the result is `NEGATIVE_INFINITY`.</haxe_doc>
		</max>
		<sin public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric sine of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</sin>
		<cos public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric cosine of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</cos>
		<tan public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric tangent of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</tan>
		<asin public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</asin>
		<acos public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc cosine of the specified angle `v`,
		in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</acos>
		<atan public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc tangent of the specified angle `v`,
		in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</atan>
		<atan2 public="1" set="method" static="1">
			<f a="y:x">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc tangent whose tangent is the quotient of
		two specified numbers, in radians.

		If parameter `x` or `y`  is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`,
		the result is `NaN`.</haxe_doc>
		</atan2>
		<exp public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns Euler's number, raised to the power of `v`.

		`exp(1.0)` is approximately `2.718281828459`.

		- If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		- If `v` is `NEGATIVE_INFINITY`, the result is `0.0`.
		- If `v` is `NaN`, the result is `NaN`.</haxe_doc>
		</exp>
		<log public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the natural logarithm of `v`.

		This is the mathematical inverse operation of exp,
		i.e. `log(exp(v)) == v` always holds.

		- If `v` is negative (including `NEGATIVE_INFINITY`) or `NaN`, the result is `NaN`.
		- If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		- If `v` is `0.0`, the result is `NEGATIVE_INFINITY`.</haxe_doc>
		</log>
		<pow public="1" set="method" static="1">
			<f a="v:exp">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns a specified base `v` raised to the specified power `exp`.</haxe_doc>
		</pow>
		<sqrt public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the square root of `v`.

		- If `v` is negative (including `NEGATIVE_INFINITY`) or `NaN`, the result is `NaN`.
		- If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		- If `v` is `0.0`, the result is `0.0`.</haxe_doc>
		</sqrt>
		<round public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Rounds `v` to the nearest integer value.

		Ties are rounded up, so that `0.5` becomes `1` and `-0.5` becomes `0`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</round>
		<floor public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the largest integer value that is not greater than `v`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</floor>
		<ceil public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the smallest integer value that is not less than `v`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</ceil>
		<random public="1" set="method" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns a pseudo-random number which is greater than or equal to `0.0`,
		and less than `1.0`.</haxe_doc>
		</random>
		<ffloor public="1" get="inline" set="null" line="257" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></ffloor>
		<fceil public="1" get="inline" set="null" line="261" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></fceil>
		<fround public="1" get="inline" set="null" line="265" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></fround>
		<isFinite public="1" set="method" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is a finite number.

		If `f` is `POSITIVE_INFINITY`, `NEGATIVE_INFINITY` or `NaN`, the result
		is `false`, otherwise the result is `true`.</haxe_doc>
		</isFinite>
		<isNaN public="1" set="method" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is not a valid number.

		If `f` is `NaN`, the result is `true`, otherwise the result is `false`.
		In particular, both `POSITIVE_INFINITY` and `NEGATIVE_INFINITY` are
		not considered `NaN`.</haxe_doc>
		</isNaN>
		<haxe_doc>This class defines mathematical functions and constants.

	@see https://haxe.org/manual/std-math.html</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="Reflect" params="" file="/usr/local/lib/haxe/std/Reflect.hx" extern="1">
		<hasField public="1" set="method" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if structure `o` has a field named `field`.

		This is only guaranteed to work for anonymous structures. Refer to
		`Type.getInstanceFields` for a function supporting class instances.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</hasField>
		<field public="1" set="method" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Returns the value of the field named `field` on object `o`.

		If `o` is not an object or has no field named `field`, the result is
		null.

		If the field is defined as a property, its accessors are ignored. Refer
		to `Reflect.getProperty` for a function supporting property accessors.

		If `field` is null, the result is unspecified.</haxe_doc>
		</field>
		<setField public="1" set="method" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the field named `field` of object `o` to value `value`.

		If `o` has no field named `field`, this function is only guaranteed to
		work for anonymous structures.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</setField>
		<getProperty public="1" set="method" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Returns the value of the field named `field` on object `o`, taking
		property getter functions into account.

		If the field is not a property, this function behaves like
		`Reflect.field`, but might be slower.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</getProperty>
		<setProperty public="1" set="method" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the field named `field` of object `o` to value `value`, taking
		property setter functions into account.

		If the field is not a property, this function behaves like
		`Reflect.setField`, but might be slower.

		If `field` is null, the result is unspecified.</haxe_doc>
		</setProperty>
		<callMethod public="1" set="method" static="1">
			<f a="o:func:args">
				<d/>
				<x path="haxe.Function"/>
				<c path="Array"><d/></c>
				<d/>
			</f>
			<haxe_doc>Call a method `func` with the given arguments `args`.

		The object `o` is ignored in most cases. It serves as the `this`-context in the following
		situations:

		* (neko) Allows switching the context to `o` in all cases.
		* (macro) Same as neko for Haxe 3. No context switching in Haxe 4.
		* (js, lua) Require the `o` argument if `func` does not, but should have a context.
			This can occur by accessing a function field natively, e.g. through `Reflect.field`
			or by using `(object : Dynamic).field`. However, if `func` has a context, `o` is
			ignored like on other targets.</haxe_doc>
		</callMethod>
		<fields public="1" set="method" static="1">
			<f a="o">
				<d/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns the fields of structure `o`.

		This method is only guaranteed to work on anonymous structures. Refer to
		`Type.getInstanceFields` for a function supporting class instances.

		If `o` is null, the result is unspecified.</haxe_doc>
		</fields>
		<isFunction public="1" set="method" static="1">
			<f a="f">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if `f` is a function, false otherwise.

		If `f` is null, the result is false.</haxe_doc>
		</isFunction>
		<compare public="1" params="T" set="method" static="1">
			<f a="a:b">
				<c path="compare.T"/>
				<c path="compare.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compares `a` and `b`.

		If `a` is less than `b`, the result is negative. If `b` is less than
		`a`, the result is positive. If `a` and `b` are equal, the result is 0.

		This function is only defined if `a` and `b` are of the same type.

		If that type is a function, the result is unspecified and
		`Reflect.compareMethods` should be used instead.

		For all other types, the result is 0 if `a` and `b` are equal. If they
		are not equal, the result depends on the type and is negative if:

		- Numeric types: a is less than b
		- String: a is lexicographically less than b
		- Other: unspecified

		If `a` and `b` are null, the result is 0. If only one of them is null,
		the result is unspecified.</haxe_doc>
		</compare>
		<compareMethods public="1" set="method" static="1">
			<f a="f1:f2">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Compares the functions `f1` and `f2`.

		If `f1` or `f2` are null, the result is false.
		If `f1` or `f2` are not functions, the result is unspecified.

		Otherwise the result is true if `f1` and the `f2` are physically equal,
		false otherwise.

		If `f1` or `f2` are member method closures, the result is true if they
		are closures of the same method on the same object value, false otherwise.</haxe_doc>
		</compareMethods>
		<isObject public="1" set="method" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc><![CDATA[Tells if `v` is an object.

		The result is true if `v` is one of the following:

		- class instance
		- structure
		- `Class<T>`
		- `Enum<T>`

		Otherwise, including if `v` is null, the result is false.]]></haxe_doc>
		</isObject>
		<isEnumValue public="1" set="method" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `v` is an enum value.

		The result is true if `v` is of type EnumValue, i.e. an enum
		constructor.

		Otherwise, including if `v` is null, the result is false.</haxe_doc>
		</isEnumValue>
		<deleteField public="1" set="method" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the field named `field` from structure `o`.

		This method is only guaranteed to work on anonymous structures.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</deleteField>
		<copy public="1" params="T" set="method" static="1">
			<f a="o">
				<x path="Null"><c path="copy.T"/></x>
				<x path="Null"><c path="copy.T"/></x>
			</f>
			<haxe_doc>Copies the fields of structure `o`.

		This is only guaranteed to work on anonymous structures.

		If `o` is null, the result is `null`.</haxe_doc>
		</copy>
		<makeVarArgs public="1" set="method" static="1">
			<f a="f">
				<f a="">
					<c path="Array"><d/></c>
					<d/>
				</f>
				<d/>
			</f>
			<haxe_doc>Transform a function taking an array of arguments into a function that can
		be called with any number of arguments.</haxe_doc>
			<overloads><makeVarArgs public="1" set="method">
	<f a="f">
		<f a="">
			<c path="Array"><d/></c>
			<x path="Void"/>
		</f>
		<d/>
	</f>
	<haxe_doc>Transform a function taking an array of arguments into a function that can
		be called with any number of arguments.</haxe_doc>
</makeVarArgs></overloads>
		</makeVarArgs>
		<haxe_doc>The Reflect API is a way to manipulate values dynamically through an
	abstract interface in an untyped manner. Use with care.

	@see https://haxe.org/manual/std-reflection.html</haxe_doc>
	</class>
	<class path="Std" params="" file="/usr/local/lib/haxe/std/Std.hx" extern="1">
		<is public="1" set="method" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>DEPRECATED. Use `Std.isOfType(v, t)` instead.

		Tells if a value `v` is of the type `t`. Returns `false` if `v` or `t` are null.

		If `t` is a class or interface with `@:generic` meta, the result is `false`.</haxe_doc>
		</is>
		<isOfType public="1" set="method" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if a value `v` is of the type `t`. Returns `false` if `v` or `t` are null.

		If `t` is a class or interface with `@:generic` meta, the result is `false`.</haxe_doc>
		</isOfType>
		<downcast public="1" params="T:S" set="method" static="1">
			<f a="value:c">
				<c path="downcast.T"/>
				<x path="Class"><c path="downcast.S"/></x>
				<c path="downcast.S"/>
			</f>
			<haxe_doc>Checks if object `value` is an instance of class or interface `c`.

		Compiles only if the type specified by `c` can be assigned to the type
		of `value`.

		This method checks if a downcast is possible. That is, if the runtime
		type of `value` is assignable to the type specified by `c`, `value` is
		returned. Otherwise null is returned.

		This method is not guaranteed to work with core types such as `String`,
		`Array` and `Date`.

		If `value` is null, the result is null. If `c` is null, the result is
		unspecified.</haxe_doc>
		</downcast>
		<instance public="1" params="T:S" set="method" static="1">
			<f a="value:c">
				<c path="instance.T"/>
				<x path="Class"><c path="instance.S"/></x>
				<c path="instance.S"/>
			</f>
			<meta><m n=":deprecated"><e>"Std.instance() is deprecated. Use Std.downcast() instead."</e></m></meta>
		</instance>
		<string public="1" set="method" static="1">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts any value to a String.

		If `s` is of `String`, `Int`, `Float` or `Bool`, its value is returned.

		If `s` is an instance of a class and that class or one of its parent classes has
		a `toString` method, that method is called. If no such method is present, the result
		is unspecified.

		If `s` is an enum constructor without argument, the constructor's name is returned. If
		arguments exists, the constructor's name followed by the String representations of
		the arguments is returned.

		If `s` is a structure, the field names along with their values are returned. The field order
		and the operator separating field names and values are unspecified.

		If s is null, "null" is returned.</haxe_doc>
		</string>
		<int public="1" set="method" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Converts a `Float` to an `Int`, rounded towards 0.

		If `x` is outside of the signed Int32 range, or is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</int>
		<parseInt public="1" set="method" static="1">
			<f a="x">
				<c path="String"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Converts a `String` to an `Int`.

		Leading whitespaces are ignored.

		If `x` starts with 0x or 0X, hexadecimal notation is recognized where the following digits may
		contain 0-9 and A-F.

		Otherwise `x` is read as decimal number with 0-9 being allowed characters. `x` may also start with
		a - to denote a negative value.

		In decimal mode, parsing continues until an invalid character is detected, in which case the
		result up to that point is returned. For hexadecimal notation, the effect of invalid characters
		is unspecified.

		Leading 0s that are not part of the 0x/0X hexadecimal notation are ignored, which means octal
		notation is not supported.

		If `x` is null, the result is unspecified.
		If `x` cannot be parsed as integer, the result is `null`.</haxe_doc>
		</parseInt>
		<parseFloat public="1" set="method" static="1">
			<f a="x">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a `String` to a `Float`.

		The parsing rules for `parseInt` apply here as well, with the exception of invalid input
		resulting in a `NaN` value instead of null.

		Additionally, decimal notation may contain a single `.` to denote the start of the fractions.</haxe_doc>
		</parseFloat>
		<random public="1" set="method" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Return a random integer between 0 included and `x` excluded.

		If `x <= 1`, the result is always 0.]]></haxe_doc>
		</random>
		<haxe_doc>The Std class provides standard methods for manipulating basic types.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="Void" params="" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Void"/></this>
		<haxe_doc>The standard `Void` type. Only `null` values can be of the type `Void`.

	@see https://haxe.org/manual/types-void.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<abstract path="Float" params="" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Float"/></this>
		<haxe_doc><![CDATA[The standard `Float` type, this is a double-precision IEEE 64bit float.

	On static targets, `null` cannot be assigned to Float. If this is necessary,
	`Null<Float>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseFloat` converts a `String` to a `Float`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Int" params="" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Int"/></this>
		<to><icast><x path="Float"/></icast></to>
		<haxe_doc><![CDATA[The standard `Int` type. Its precision depends on the platform.

	On static targets, `null` cannot be assigned to `Int`. If this is necessary,
	`Null<Int>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseInt` converts a `String` to an `Int`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/std-math-integer-math.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Null" params="T" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<from><icast><c path="Null.T"/></icast></from>
		<this><x path="Null"><c path="Null.T"/></x></this>
		<to><icast><c path="Null.T"/></icast></to>
		<haxe_doc><![CDATA[`Null<T>` is a wrapper that can be used to make the basic types `Int`,
	`Float` and `Bool` nullable on static targets.

	If null safety is enabled, only types wrapped in `Null<T>` are nullable.

	Otherwise, it has no effect on non-basic-types, but it can be useful as a way to document
	that `null` is an acceptable value for a method argument, return value or variable.

	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":forward"/>
			<m n=":coreType"/>
		</meta>
	</abstract>
	<abstract path="Bool" params="" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Bool"/></this>
		<haxe_doc><![CDATA[The standard Boolean type, which can either be `true` or `false`.

	On static targets, `null` cannot be assigned to `Bool`. If this is necessary,
	`Null<Bool>` can be used instead.

	@see https://haxe.org/manual/types-bool.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Dynamic" params="T" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Dynamic"><c path="Dynamic.T"/></x></this>
		<haxe_doc>`Dynamic` is a special type which is compatible with all other types.

	Use of `Dynamic` should be minimized as it prevents several compiler
	checks and optimizations. See `Any` type for a safer alternative for
	representing values of any type.

	@see https://haxe.org/manual/types-dynamic.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Iterator" params="T" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method">
				<f a=""><c path="Iterator.T"/></f>
				<haxe_doc>Returns the current item of the `Iterator` and advances to the next one.

		This method is not required to check `hasNext()` first. A call to this
		method while `hasNext()` is `false` yields unspecified behavior.

		On the other hand, iterators should not require a call to `hasNext()`
		before the first call to `next()` if an element is available.</haxe_doc>
			</next>
			<hasNext set="method">
				<f a=""><x path="Bool"/></f>
				<haxe_doc>Returns `false` if the iteration is complete, `true` otherwise.

		Usually iteration is considered to be complete if all elements of the
		underlying data structure were handled through calls to `next()`. However,
		in custom iterators any logic may be used to determine the completion
		state.</haxe_doc>
			</hasNext>
		</a>
		<haxe_doc>An `Iterator` is a structure that permits iteration over elements of type `T`.

	Any class with matching `hasNext()` and `next()` fields is considered an `Iterator`
	and can then be used e.g. in `for`-loops. This makes it easy to implement
	custom iterators.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>An `Iterable` is a data structure which has an `iterator()` method.
	See `Lambda` for generic functions on iterable structures.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<typedef path="KeyValueIterator" params="K:V" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<t path="Iterator"><a>
	<value><c path="KeyValueIterator.V"/></value>
	<key><c path="KeyValueIterator.K"/></key>
</a></t>
		<haxe_doc>A `KeyValueIterator` is an `Iterator` that has a key and a value.</haxe_doc>
	</typedef>
	<typedef path="KeyValueIterable" params="K:V" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<a><keyValueIterator set="method"><f a=""><t path="KeyValueIterator">
	<c path="KeyValueIterable.K"/>
	<c path="KeyValueIterable.V"/>
</t></f></keyValueIterator></a>
		<haxe_doc>A `KeyValueIterable` is a data structure which has a `keyValueIterator()`
	method to iterate over key-value-pairs.</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes" extern="1" interface="1"><haxe_doc>`ArrayAccess` is used to indicate a class that can be accessed using brackets.
	The type parameter represents the type of the elements stored.

	This interface should be used for externs only. Haxe does not support custom
	array access on classes. However, array access can be implemented for
	abstract types.

	@see https://haxe.org/manual/types-abstract-array-access.html</haxe_doc></class>
	<class path="String" params="" file="/usr/local/lib/haxe/std/String.hx" extern="1">
		<fromCharCode public="1" set="method" static="1">
			<f a="code">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the String corresponding to the character code `code`.

		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</fromCharCode>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of characters in `this` String.</haxe_doc>
		</length>
		<toUpperCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are upper case.</haxe_doc>
		</toUpperCase>
		<toLowerCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are lower case.</haxe_doc>
		</toLowerCase>
		<charAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the character at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, the empty String `""`
		is returned.</haxe_doc>
		</charAt>
		<charCodeAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the character code at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, `null` is returned.

		To obtain the character code of a single character, `"x".code` can be
		used instead to inline the character code at compile time. Note that
		this only works on String literals of length 1.</haxe_doc>
		</charCodeAt>
		<indexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the leftmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String starting from `startIndex`.

		If `startIndex` exceeds `this.length`, -1 is returned.

		If `startIndex` is negative, the result is unspecifed.

		Otherwise the search is performed within `this` String. In either case,
		the returned position is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the rightmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String from 0 to `startIndex + str.length`. Otherwise the search
		is performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `startIndex` is negative, the result is unspecifed.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<split public="1" set="method">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Splits `this` String at each occurrence of `delimiter`.

		If `this` String is the empty String `""`, the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.

		If `delimiter` is the empty String `""`, `this` String is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` String.

		If `delimiter` is not found within `this` String, the result is an Array
		with one element, which equals `this` String.

		If `delimiter` is null, the result is unspecified.

		Otherwise, `this` String is split into parts at each occurrence of
		`delimiter`. If `this` String starts (or ends) with `delimiter`, the
		result `Array` contains a leading (or trailing) empty String `""` element.
		Two subsequent delimiters also result in an empty String `""` element.</haxe_doc>
		</split>
		<substr public="1" set="method">
			<f a="pos:?len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns `len` characters of `this` String, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` String are included.

		If `pos` is negative, its value is calculated from the end of `this`
		String by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` String are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
		</substr>
		<substring public="1" set="method">
			<f a="startIndex:?endIndex">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the part of `this` String from `startIndex` to but not including `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		String `""` is returned.</haxe_doc>
		</substring>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the String itself.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="string">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a copy from a given String.</haxe_doc>
		</new>
		<haxe_doc>The basic String class.

	A Haxe String is immutable, it is not possible to modify individual
	characters. No method of this class changes the state of `this` String.

	Strings can be constructed using the String literal syntax `"string value"`.

	String can be concatenated by using the `+` operator. If an operand is not a
	String, it is passed through `Std.string()` first.

	@see https://haxe.org/manual/std-String.html</haxe_doc>
	</class>
	<class path="StringTools" params="" file="/usr/local/lib/haxe/std/StringTools.hx">
		<isSpace public="1" set="method" line="279" static="1">
			<f a="s:pos">
				<c path="String"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the character in the string `s` at position `pos` is a space.

		A character is considered to be a space character if its character code
		is 9,10,11,12,13 or 32.

		If `s` is the empty String `""`, or if pos is not a valid position within
		`s`, the result is false.</haxe_doc>
		</isSpace>
		<ltrim public="1" set="method" line="297" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes leading space characters of `s`.

		This function internally calls `isSpace()` to decide which characters to
		remove.

		If `s` is the empty String `""` or consists only of space characters, the
		result is the empty String `""`.</haxe_doc>
		</ltrim>
		<rtrim public="1" set="method" line="322" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes trailing space characters of `s`.

		This function internally calls `isSpace()` to decide which characters to
		remove.

		If `s` is the empty String `""` or consists only of space characters, the
		result is the empty String `""`.</haxe_doc>
		</rtrim>
		<trim public="1" set="method" line="344" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes leading and trailing space characters of `s`.

		This is a convenience function for `ltrim(rtrim(s))`.</haxe_doc>
		</trim>
		<haxe_doc>This class provides advanced methods on Strings. It is ideally used with
	`using StringTools` and then acts as an [extension](https://haxe.org/manual/lf-static-extension.html)
	to the `String` class.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="Sys" params="" file="/usr/local/lib/haxe/std/Sys.hx" extern="1">
		<print public="1" set="method" static="1">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Prints any value to the standard output.</haxe_doc>
		</print>
		<println public="1" set="method" static="1">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Prints any value to the standard output, followed by a newline.
		On Windows, this function outputs a CRLF newline.
		LF newlines are printed on all other platforms.</haxe_doc>
		</println>
		<args public="1" set="method" static="1">
			<f a=""><c path="Array"><c path="String"/></c></f>
			<haxe_doc>Returns all the arguments that were passed in the command line.
		This does not include the interpreter or the name of the program file.

		(java)(eval) On Windows, non-ASCII Unicode arguments will not work correctly.

		(cs) Non-ASCII Unicode arguments will not work correctly.</haxe_doc>
		</args>
		<getEnv public="1" set="method" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the value of the given environment variable, or `null` if it
		doesn't exist.</haxe_doc>
		</getEnv>
		<putEnv public="1" set="method" static="1">
			<f a="s:v">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the value of the given environment variable.

		(java) This functionality is not available on Java; calling this function will throw.</haxe_doc>
		</putEnv>
		<environment public="1" set="method" static="1">
			<f a=""><t path="Map">
	<c path="String"/>
	<c path="String"/>
</t></f>
			<haxe_doc>Returns all environment variables.</haxe_doc>
		</environment>
		<sleep public="1" set="method" static="1">
			<f a="seconds">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Suspends execution for the given length of time (in seconds).</haxe_doc>
		</sleep>
		<setTimeLocale public="1" set="method" static="1">
			<f a="loc">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Changes the current time locale, which will affect `DateTools.format` date formating.
		Returns `true` if the locale was successfully changed.</haxe_doc>
		</setTimeLocale>
		<getCwd public="1" set="method" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Gets the current working directory (usually the one in which the program was started).</haxe_doc>
		</getCwd>
		<setCwd public="1" set="method" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Changes the current working directory.

		(java) This functionality is not available on Java; calling this function will throw.</haxe_doc>
		</setCwd>
		<systemName public="1" set="method" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the type of the current system. Possible values are:
		 - `"Windows"`
		 - `"Linux"`
		 - `"BSD"`
		 - `"Mac"`</haxe_doc>
		</systemName>
		<command public="1" set="method" static="1">
			<f a="cmd:?args">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
				<x path="Int"/>
			</f>
			<haxe_doc>Runs the given command. The command output will be printed to the same output as the current process.
		The current process will block until the command terminates.
		The return value is the exit code of the command (usually `0` indicates no error).

		Command arguments can be passed in two ways:

		 1. Using `args` to pass command arguments. Each argument will be automatically quoted and shell meta-characters will be escaped if needed.
		`cmd` should be an executable name that can be located in the `PATH` environment variable, or a full path to an executable.

		 2. When `args` is not given or is `null`, command arguments can be appended to `cmd`. No automatic quoting/escaping will be performed. `cmd` should be formatted exactly as it would be when typed at the command line.
		It can run executables, as well as shell commands that are not executables (e.g. on Windows: `dir`, `cd`, `echo` etc).

		Use the `sys.io.Process` API for more complex tasks, such as background processes, or providing input to the command.</haxe_doc>
		</command>
		<exit public="1" set="method" static="1">
			<f a="code">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Exits the current process with the given exit code.

		(macro)(eval) Being invoked in a macro or eval context (e.g. with `-x` or `--run`) immediately terminates
		the compilation process, which also prevents the execution of any `--next` sections of compilation arguments.</haxe_doc>
		</exit>
		<time public="1" set="method" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Gives the most precise timestamp value available (in seconds).</haxe_doc>
		</time>
		<cpuTime public="1" set="method" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Gives the most precise timestamp value available (in seconds),
		but only accounts for the actual time spent running on the CPU for the current thread/process.</haxe_doc>
		</cpuTime>
		<executablePath public="1" set="method" static="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":deprecated"><e>"Use programPath instead"</e></m></meta>
			<haxe_doc>Returns the path to the current executable that we are running.</haxe_doc>
		</executablePath>
		<programPath public="1" set="method" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the absolute path to the current program file that we are running.
		Concretely, for an executable binary, it returns the path to the binary.
		For a script (e.g. a PHP file), it returns the path to the script.</haxe_doc>
		</programPath>
		<getChar public="1" set="method" static="1">
			<f a="echo">
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Reads a single input character from the standard input and returns it.
		Setting `echo` to `true` will also display the character on the output.</haxe_doc>
		</getChar>
		<stdin public="1" set="method" static="1">
			<f a=""><c path="haxe.io.Input"/></f>
			<haxe_doc>Returns the standard input of the process, from which user input can be read.
		Usually it will block until the user sends a full input line.
		See `getChar` for an alternative.</haxe_doc>
		</stdin>
		<stdout public="1" set="method" static="1">
			<f a=""><c path="haxe.io.Output"/></f>
			<haxe_doc>Returns the standard output of the process, to which program output can be written.</haxe_doc>
		</stdout>
		<stderr public="1" set="method" static="1">
			<f a=""><c path="haxe.io.Output"/></f>
			<haxe_doc>Returns the standard error of the process, to which program errors can be written.</haxe_doc>
		</stderr>
		<haxe_doc>This class provides access to various base functions of system platforms.
	Look in the `sys` package for more system APIs.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":require"><e>sys</e></m>
		</meta>
	</class>
	<class path="Type" params="" file="/usr/local/lib/haxe/std/Type.hx" extern="1">
		<getClass public="1" params="T" set="method" static="1">
			<f a="o">
				<c path="getClass.T"/>
				<x path="Class"><c path="getClass.T"/></x>
			</f>
			<haxe_doc>Returns the class of `o`, if `o` is a class instance.

		If `o` is null or of a different type, null is returned.

		In general, type parameter information cannot be obtained at runtime.</haxe_doc>
		</getClass>
		<getEnum public="1" set="method" static="1">
			<f a="o">
				<x path="EnumValue"/>
				<x path="Enum"><d/></x>
			</f>
			<haxe_doc><![CDATA[Returns the enum of enum instance `o`.

		An enum instance is the result of using an enum constructor. Given an
		`enum Color { Red; }`, `getEnum(Red)` returns `Enum<Color>`.

		If `o` is null, null is returned.

		In general, type parameter information cannot be obtained at runtime.]]></haxe_doc>
		</getEnum>
		<getSuperClass public="1" set="method" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<x path="Class"><d/></x>
			</f>
			<haxe_doc>Returns the super-class of class `c`.

		If `c` has no super class, null is returned.

		If `c` is null, the result is unspecified.

		In general, type parameter information cannot be obtained at runtime.</haxe_doc>
		</getSuperClass>
		<getClassName public="1" set="method" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of class `c`, including its path.

		If `c` is inside a package, the package structure is returned dot-
		separated, with another dot separating the class name:
		`pack1.pack2.(...).packN.ClassName`
		If `c` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `c` has no package, the class name is returned.

		If `c` is null, the result is unspecified.

		The class name does not include any type parameters.</haxe_doc>
		</getClassName>
		<getEnumName public="1" set="method" static="1">
			<f a="e">
				<x path="Enum"><d/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
		`pack1.pack2.(...).packN.EnumName`
		If `e` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is null, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getEnumName>
		<resolveClass public="1" set="method" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Class"><d/></x>
			</f>
			<haxe_doc>Resolves a class by name.

		If `name` is the path of an existing class, that class is returned.

		Otherwise null is returned.

		If `name` is null or the path to a different type, the result is
		unspecified.

		The class name must not include any type parameters.</haxe_doc>
		</resolveClass>
		<resolveEnum public="1" set="method" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Enum"><d/></x>
			</f>
			<haxe_doc>Resolves an enum by name.

		If `name` is the path of an existing enum, that enum is returned.

		Otherwise null is returned.

		If `name` is null the result is unspecified.

		If `name` is the path to a different type, null is returned.

		The enum name must not include any type parameters.</haxe_doc>
		</resolveEnum>
		<createInstance public="1" params="T" set="method" static="1">
			<f a="cl:args">
				<x path="Class"><c path="createInstance.T"/></x>
				<c path="Array"><d/></c>
				<c path="createInstance.T"/>
			</f>
			<haxe_doc>Creates an instance of class `cl`, using `args` as arguments to the
		class constructor.

		This function guarantees that the class constructor is called.

		Default values of constructors arguments are not guaranteed to be
		taken into account.

		If `cl` or `args` are null, or if the number of elements in `args` does
		not match the expected number of constructor arguments, or if any
		argument has an invalid type,  or if `cl` has no own constructor, the
		result is unspecified.

		In particular, default values of constructor arguments are not
		guaranteed to be taken into account.</haxe_doc>
		</createInstance>
		<createEmptyInstance public="1" params="T" set="method" static="1">
			<f a="cl">
				<x path="Class"><c path="createEmptyInstance.T"/></x>
				<c path="createEmptyInstance.T"/>
			</f>
			<haxe_doc>Creates an instance of class `cl`.

		This function guarantees that the class constructor is not called.

		If `cl` is null, the result is unspecified.</haxe_doc>
		</createEmptyInstance>
		<createEnum public="1" params="T" set="method" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createEnum.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createEnum.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createEnum>
		<createEnumIndex public="1" params="T" set="method" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createEnumIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createEnumIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from Haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createEnumIndex>
		<getInstanceFields public="1" set="method" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the instance fields of class `c`, including
		inherited fields.

		This only includes fields which are known at compile-time. In
		particular, using `getInstanceFields(getClass(obj))` will not include
		any fields which were added to `obj` at runtime.

		The order of the fields in the returned Array is unspecified.

		If `c` is null, the result is unspecified.</haxe_doc>
		</getInstanceFields>
		<getClassFields public="1" set="method" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of static fields of class `c`.

		This does not include static fields of parent classes.

		The order of the fields in the returned Array is unspecified.

		If `c` is null, the result is unspecified.</haxe_doc>
		</getClassFields>
		<getEnumConstructs public="1" set="method" static="1">
			<f a="e">
				<x path="Enum"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `e` is null, the result is unspecified.</haxe_doc>
		</getEnumConstructs>
		<typeof public="1" set="method" static="1">
			<f a="v">
				<d/>
				<e path="ValueType"/>
			</f>
			<haxe_doc>Returns the runtime type of value `v`.

		The result corresponds to the type `v` has at runtime, which may vary
		per platform. Assumptions regarding this should be minimized to avoid
		surprises.</haxe_doc>
		</typeof>
		<enumEq public="1" params="T" set="method" static="1">
			<f a="a:b">
				<c path="enumEq.T"/>
				<c path="enumEq.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors, if exists.

		If `a` or `b` are null, the result is unspecified.</haxe_doc>
		</enumEq>
		<enumConstructor public="1" set="method" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumConstructor>
		<enumParameters public="1" set="method" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is [].

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumParameters>
		<enumIndex public="1" set="method" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumIndex>
		<allEnums public="1" params="T" set="method" static="1">
			<f a="e">
				<x path="Enum"><c path="allEnums.T"/></x>
				<c path="Array"><c path="allEnums.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array `[]` if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</allEnums>
		<haxe_doc>The Haxe Reflection API allows retrieval of type information at runtime.

	This class complements the more lightweight Reflect class, with a focus on
	class and enum instances.

	@see https://haxe.org/manual/types.html
	@see https://haxe.org/manual/std-reflection.html</haxe_doc>
	</class>
	<class path="apparentridges.Util" params="" file="apparentridges/ApparentRidges.hx" module="apparentridges.ApparentRidges">
		<rndInt public="1" get="inline" set="null" line="35" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Round float to integer
    @param x the float to be rounded
    @return closest integer</haxe_doc>
		</rndInt>
		<min public="1" get="inline" set="null" line="44" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>MIN() for integers
    @param a first integer
    @param b second integer
    @return the lesser of the inputs</haxe_doc>
		</min>
		<sq public="1" get="inline" set="null" line="52" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Square a float (x^2)
    @param x the float
    @return the square</haxe_doc>
		</sq>
		<nextMod3 public="1" get="inline" set="null" line="59" static="1">
			<f a="i">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>i + 1 modulo 3.
    "This way of computing it tends to be faster than using %" -- Trimesh2</haxe_doc>
		</nextMod3>
		<prevMod3 public="1" get="inline" set="null" line="66" static="1">
			<f a="i">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>i - 1 modulo 3.
    "This way of computing it tends to be faster than using %" -- Trimesh2</haxe_doc>
		</prevMod3>
		<trinorm public="1" get="inline" set="null" line="72" static="1">
			<f a="v0:v1:v2">
				<x path="apparentridges.Vec3"/>
				<x path="apparentridges.Vec3"/>
				<x path="apparentridges.Vec3"/>
				<x path="apparentridges.Vec3"/>
			</f>
			<haxe_doc>"Area-weighted triangle face normal" -- RTSC</haxe_doc>
		</trinorm>
		<ldltdc public="1" set="method" line="84" static="1">
			<f a="A:rdiag">
				<c path="Array"><c path="Array"><x path="Float"/></c></c>
				<c path="Array"><x path="Float"/></c>
				<x path="Bool"/>
			</f>
			<haxe_doc>"LDL^T decomposition of a symmetric positive definite matrix (and some
    other symmetric matrices, but fragile since we don't do pivoting).
    Like Cholesky, but no square roots, which is important for small N.
    Reads diagonal and upper triangle of matrix A.
    On output, lower triangle of A holds LD, while rdiag holds D^-1.
    Algorithm from Golub and van Loan." -- Trimesh2</haxe_doc>
		</ldltdc>
		<ldltsl public="1" set="method" line="129" static="1">
			<f a="A:rdiag:b:x">
				<c path="Array"><c path="Array"><x path="Float"/></c></c>
				<c path="Array"><x path="Float"/></c>
				<c path="Array"><x path="Float"/></c>
				<c path="Array"><x path="Float"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>"Solve Ax=b after ldltdc.  x is allowed to be the same as b." -- Trimesh</haxe_doc>
		</ldltsl>
		<largestEig2x2 public="1" set="method" line="155" static="1">
			<f a="m1:m12:m2">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="apparentridges.Vec3"/>
			</f>
			<haxe_doc>"Compute largest eigenvalue and associated eigenvector of a
    symmetric 2x2 matrix.  Solves characteristic equation.
    Inputs: three elements of matrix (upper-left, diag, lower-right)
    Outputs: largest (in magnitude) eigenvector/value" -- Trimesh2</haxe_doc>
		</largestEig2x2>
		<matIden public="1" get="inline" set="null" line="175" static="1">
			<f a=""><c path="Array"><x path="Float"/></c></f>
			<haxe_doc>Returns a 4x4 identiy matrix (row-major, flat)
    @return the identity matrix</haxe_doc>
		</matIden>
		<matRotx public="1" get="inline" set="null" line="181" static="1">
			<f a="a">
				<x path="Float"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<haxe_doc>Returns a 4x4 matrix for rotating around x axis (row-major, flat)
    @param a the angle in radians
    @return the rotation matrix</haxe_doc>
		</matRotx>
		<matRoty public="1" get="inline" set="null" line="187" static="1">
			<f a="a">
				<x path="Float"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<haxe_doc>Returns a 4x4 matrix for rotating around y axis (row-major, flat)
    @param a the angle in radians
    @return the rotation matrix</haxe_doc>
		</matRoty>
		<matRotz public="1" get="inline" set="null" line="193" static="1">
			<f a="a">
				<x path="Float"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<haxe_doc>Returns a 4x4 matrix for rotating around z axis (row-major, flat)
    @param a the angle in radians
    @return the rotation matrix</haxe_doc>
		</matRotz>
		<matTrsl public="1" get="inline" set="null" line="201" static="1">
			<f a="x:y:z">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<haxe_doc>Returns a 4x4 translation matrix (row-major, flat)
    @param x translation along x axis
    @param y translation along x axis
    @param z translation along x axis
    @return the translation matrix</haxe_doc>
		</matTrsl>
		<matScal public="1" get="inline" set="null" line="209" static="1">
			<f a="x:y:z">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<haxe_doc>Returns a 4x4 scaling matrix (row-major, flattend)
    @param x scale along x axis
    @param y scale along x axis
    @param z scale along x axis
    @return the scaling matrix</haxe_doc>
		</matScal>
		<matMult public="1" get="inline" set="null" line="216" static="1">
			<f a="A:B">
				<c path="Array"><x path="Float"/></c>
				<c path="Array"><x path="Float"/></c>
				<c path="Array"><x path="Float"/></c>
			</f>
			<haxe_doc>Multiply two 4x4 matrices (row-major, flat)
    @param A first matrix
    @param B second matrix
    @return the matrix product</haxe_doc>
		</matMult>
		<matTrfm public="1" get="inline" set="null" line="230" static="1">
			<f a="A:v">
				<c path="Array"><x path="Float"/></c>
				<x path="apparentridges.Vec3"/>
				<x path="apparentridges.Vec3"/>
			</f>
			<haxe_doc>Transform a 3D vector using a 4x4 matrix (row-major, flat)
    @param A the transformation matrix
    @param v the vector
    @return new vector after transformation</haxe_doc>
		</matTrfm>
		<matProj public="1" get="inline" set="null" line="240" static="1">
			<f a="f:v">
				<x path="Float"/>
				<x path="apparentridges.Vec3"/>
				<x path="apparentridges.Vec3"/>
			</f>
			<haxe_doc>Project a 3D point onto 2D plane with pinhole camera model situated at `(0,0,0)` pointing toward `+z`
    @param f focal length
    @param v the vector
    @return a 2D point (with zeroed z component)</haxe_doc>
		</matProj>
		<uniformHemisphereSampler public="1" get="inline" set="null" line="245" static="1">
			<f a=""><x path="apparentridges.Vec3"/></f>
			<haxe_doc>Uniform random sampler on unit hemisphere (`+z`)
    @return a random point that lies on the hemisphere</haxe_doc>
		</uniformHemisphereSampler>
		<writeFile public="1" set="method" line="263" static="1">
			<f a="filename:content">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Save a string to a file on disk
    @param filename path to the file
    @param content content to be written</haxe_doc>
		</writeFile>
		<haxe_doc>Collection of static utilities</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":expose"/>
		</meta>
	</class>
	<abstract path="apparentridges.Vec3" params="" file="apparentridges/ApparentRidges.hx" module="apparentridges.ApparentRidges">
		<this><x path="haxe.ds.Vector"><x path="Float"/></x></this>
		<haxe_doc>An abstract 3D Vector type that maps to native fixed-length array in target language,
  with all methods inlined</haxe_doc>
		<meta><m n=":expose"/></meta>
		<impl><class path="apparentridges._ApparentRidges.Vec3_Impl_" params="" file="apparentridges/ApparentRidges.hx" private="1" module="apparentridges.ApparentRidges" final="1">
	<x public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc>x component, also accessable via subscript `[0]`</haxe_doc>
	</x>
	<y public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc>y component, also accessable via subscript `[1]`</haxe_doc>
	</y>
	<z public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc>z component, also accessable via subscript `[2]`</haxe_doc>
	</z>
	<_new public="1" get="inline" set="null" line="289" static="1">
		<f a="_x:_y:_z">
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="apparentridges.Vec3"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
		<haxe_doc>create new vector from `x` `y` `z` components
    @param _x x component
    @param _y y component
    @param _z z component</haxe_doc>
	</_new>
	<get_x get="inline" set="null" line="295" static="1">
		<f a="this">
			<x path="haxe.ds.Vector"><x path="Float"/></x>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_x>
	<get_y get="inline" set="null" line="296" static="1">
		<f a="this">
			<x path="haxe.ds.Vector"><x path="Float"/></x>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_y>
	<get_z get="inline" set="null" line="297" static="1">
		<f a="this">
			<x path="haxe.ds.Vector"><x path="Float"/></x>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_z>
	<set_x get="inline" set="null" line="298" static="1">
		<f a="this:v">
			<x path="haxe.ds.Vector"><x path="Float"/></x>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_x>
	<set_y get="inline" set="null" line="299" static="1">
		<f a="this:v">
			<x path="haxe.ds.Vector"><x path="Float"/></x>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_y>
	<set_z get="inline" set="null" line="300" static="1">
		<f a="this:v">
			<x path="haxe.ds.Vector"><x path="Float"/></x>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_z>
	<copy public="1" get="inline" set="null" line="306" static="1">
		<f a="this">
			<x path="haxe.ds.Vector"><x path="Float"/></x>
			<x path="apparentridges.Vec3"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Duplicate a vector
    @return a new vector that equals to this vector</haxe_doc>
	</copy>
	<assign public="1" get="inline" set="null" line="313" static="1">
		<f a="this:v">
			<x path="haxe.ds.Vector"><x path="Float"/></x>
			<x path="apparentridges.Vec3"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Set `x` `y` `z` components of this vector from another vector
    @param v the vector to copy from</haxe_doc>
	</assign>
	<cross public="1" get="inline" set="null" line="322" static="1">
		<f a="v1:v2">
			<x path="apparentridges.Vec3"/>
			<x path="apparentridges.Vec3"/>
			<x path="apparentridges.Vec3"/>
		</f>
		<haxe_doc>Compute the cross product of two vectors
    @param v1 the first vector
    @param v2 the second vector
    @return the cross product</haxe_doc>
	</cross>
	<dot public="1" get="inline" set="null" line="335" static="1">
		<f a="v1:v2">
			<x path="apparentridges.Vec3"/>
			<x path="apparentridges.Vec3"/>
			<x path="Float"/>
		</f>
		<haxe_doc>Compute the dot product of two vectors
    @param v1 the first vector
    @param v2 the second vector
    @return the dot product</haxe_doc>
	</dot>
	<dist2 public="1" get="inline" set="null" line="344" static="1">
		<f a="v1:v2">
			<x path="apparentridges.Vec3"/>
			<x path="apparentridges.Vec3"/>
			<x path="Float"/>
		</f>
		<haxe_doc>Compute the square of the (Euclidean) distance between two vectors
    @param v1 the first vector
    @param v2 the second vector
    @return distance^2</haxe_doc>
	</dist2>
	<dist public="1" get="inline" set="null" line="353" static="1">
		<f a="v1:v2">
			<x path="apparentridges.Vec3"/>
			<x path="apparentridges.Vec3"/>
			<x path="Float"/>
		</f>
		<haxe_doc>Compute the (Euclidean) distance between two vectors
    @param v1 the first vector
    @param v2 the second vector
    @return the distance</haxe_doc>
	</dist>
	<len public="1" get="inline" set="null" line="360" static="1">
		<f a="this">
			<x path="haxe.ds.Vector"><x path="Float"/></x>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Compute the length (magnitude, l2-norm) of the vector
    @return the length</haxe_doc>
	</len>
	<len2 public="1" get="inline" set="null" line="367" static="1">
		<f a="this">
			<x path="haxe.ds.Vector"><x path="Float"/></x>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Compute the square of the length of the vector
    @return length^2</haxe_doc>
	</len2>
	<normalize public="1" get="inline" set="null" line="373" static="1">
		<f a="this">
			<x path="haxe.ds.Vector"><x path="Float"/></x>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Normalize the vector to unit vector in-place</haxe_doc>
	</normalize>
	<scale public="1" get="inline" set="null" line="390" static="1">
		<f a="this:s">
			<x path="haxe.ds.Vector"><x path="Float"/></x>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Scale the vector in place
    @param s the scaling factor</haxe_doc>
	</scale>
	<get public="1" get="inline" set="null" line="400" static="1">
		<f a="this:i">
			<x path="haxe.ds.Vector"><x path="Float"/></x>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>Get vector `x`/`y`/`z` component via subscript operator `[0]` `[1]` `[2]`
    @param i the index</haxe_doc>
	</get>
	<set public="1" get="inline" set="null" line="409" static="1">
		<f a="this:i:v">
			<x path="haxe.ds.Vector"><x path="Float"/></x>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>Set vector `x`/`y`/`z` component via subscript operator `[0]` `[1]` `[2]`
    @param i the index
    @param v the value to write</haxe_doc>
	</set>
	<add public="1" get="inline" set="null" line="419" static="1">
		<f a="this:rhs">
			<x path="haxe.ds.Vector"><x path="Float"/></x>
			<x path="apparentridges.Vec3"/>
			<x path="apparentridges.Vec3"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A + B</e></m>
		</meta>
		<haxe_doc>Overload `+` operator to add vectors
    @param rhs the other vector
    @return elementwise sum</haxe_doc>
	</add>
	<sub public="1" get="inline" set="null" line="428" static="1">
		<f a="this:rhs">
			<x path="haxe.ds.Vector"><x path="Float"/></x>
			<x path="apparentridges.Vec3"/>
			<x path="apparentridges.Vec3"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A - B</e></m>
		</meta>
		<haxe_doc>Overload `-` operator to subtract vectors
    @param rhs the other vector
    @return elementwise difference</haxe_doc>
	</sub>
	<mul public="1" get="inline" set="null" line="437" static="1">
		<f a="this:rhs">
			<x path="haxe.ds.Vector"><x path="Float"/></x>
			<x path="apparentridges.Vec3"/>
			<x path="apparentridges.Vec3"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A * B</e></m>
		</meta>
		<haxe_doc>Overload `*` operator to multiply vectors elementwise
    @param rhs the other vector
    @return hadamard product</haxe_doc>
	</mul>
	<mulf public="1" get="inline" set="null" line="446" static="1">
		<f a="this:rhs">
			<x path="haxe.ds.Vector"><x path="Float"/></x>
			<x path="Float"/>
			<x path="apparentridges.Vec3"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A * B</e></m>
		</meta>
		<haxe_doc>Overload `*` operator to multiply vector by a scalar
    @param rhs the scalar
    @return scaled vector</haxe_doc>
	</mulf>
	<meta><m n=":expose"/></meta>
</class></impl>
	</abstract>
	<class path="apparentridges._ApparentRidges.Vec3_Impl_" params="" file="apparentridges/ApparentRidges.hx" private="1" module="apparentridges.ApparentRidges" final="1">
		<x public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
			<haxe_doc>x component, also accessable via subscript `[0]`</haxe_doc>
		</x>
		<y public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
			<haxe_doc>y component, also accessable via subscript `[1]`</haxe_doc>
		</y>
		<z public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
			<haxe_doc>z component, also accessable via subscript `[2]`</haxe_doc>
		</z>
		<_new public="1" get="inline" set="null" line="289" static="1">
			<f a="_x:_y:_z">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="apparentridges.Vec3"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
			<haxe_doc>create new vector from `x` `y` `z` components
    @param _x x component
    @param _y y component
    @param _z z component</haxe_doc>
		</_new>
		<get_x get="inline" set="null" line="295" static="1">
			<f a="this">
				<x path="haxe.ds.Vector"><x path="Float"/></x>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_x>
		<get_y get="inline" set="null" line="296" static="1">
			<f a="this">
				<x path="haxe.ds.Vector"><x path="Float"/></x>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_y>
		<get_z get="inline" set="null" line="297" static="1">
			<f a="this">
				<x path="haxe.ds.Vector"><x path="Float"/></x>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_z>
		<set_x get="inline" set="null" line="298" static="1">
			<f a="this:v">
				<x path="haxe.ds.Vector"><x path="Float"/></x>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_x>
		<set_y get="inline" set="null" line="299" static="1">
			<f a="this:v">
				<x path="haxe.ds.Vector"><x path="Float"/></x>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_y>
		<set_z get="inline" set="null" line="300" static="1">
			<f a="this:v">
				<x path="haxe.ds.Vector"><x path="Float"/></x>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_z>
		<copy public="1" get="inline" set="null" line="306" static="1">
			<f a="this">
				<x path="haxe.ds.Vector"><x path="Float"/></x>
				<x path="apparentridges.Vec3"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Duplicate a vector
    @return a new vector that equals to this vector</haxe_doc>
		</copy>
		<assign public="1" get="inline" set="null" line="313" static="1">
			<f a="this:v">
				<x path="haxe.ds.Vector"><x path="Float"/></x>
				<x path="apparentridges.Vec3"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Set `x` `y` `z` components of this vector from another vector
    @param v the vector to copy from</haxe_doc>
		</assign>
		<cross public="1" get="inline" set="null" line="322" static="1">
			<f a="v1:v2">
				<x path="apparentridges.Vec3"/>
				<x path="apparentridges.Vec3"/>
				<x path="apparentridges.Vec3"/>
			</f>
			<haxe_doc>Compute the cross product of two vectors
    @param v1 the first vector
    @param v2 the second vector
    @return the cross product</haxe_doc>
		</cross>
		<dot public="1" get="inline" set="null" line="335" static="1">
			<f a="v1:v2">
				<x path="apparentridges.Vec3"/>
				<x path="apparentridges.Vec3"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Compute the dot product of two vectors
    @param v1 the first vector
    @param v2 the second vector
    @return the dot product</haxe_doc>
		</dot>
		<dist2 public="1" get="inline" set="null" line="344" static="1">
			<f a="v1:v2">
				<x path="apparentridges.Vec3"/>
				<x path="apparentridges.Vec3"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Compute the square of the (Euclidean) distance between two vectors
    @param v1 the first vector
    @param v2 the second vector
    @return distance^2</haxe_doc>
		</dist2>
		<dist public="1" get="inline" set="null" line="353" static="1">
			<f a="v1:v2">
				<x path="apparentridges.Vec3"/>
				<x path="apparentridges.Vec3"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Compute the (Euclidean) distance between two vectors
    @param v1 the first vector
    @param v2 the second vector
    @return the distance</haxe_doc>
		</dist>
		<len public="1" get="inline" set="null" line="360" static="1">
			<f a="this">
				<x path="haxe.ds.Vector"><x path="Float"/></x>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Compute the length (magnitude, l2-norm) of the vector
    @return the length</haxe_doc>
		</len>
		<len2 public="1" get="inline" set="null" line="367" static="1">
			<f a="this">
				<x path="haxe.ds.Vector"><x path="Float"/></x>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Compute the square of the length of the vector
    @return length^2</haxe_doc>
		</len2>
		<normalize public="1" get="inline" set="null" line="373" static="1">
			<f a="this">
				<x path="haxe.ds.Vector"><x path="Float"/></x>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Normalize the vector to unit vector in-place</haxe_doc>
		</normalize>
		<scale public="1" get="inline" set="null" line="390" static="1">
			<f a="this:s">
				<x path="haxe.ds.Vector"><x path="Float"/></x>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Scale the vector in place
    @param s the scaling factor</haxe_doc>
		</scale>
		<get public="1" get="inline" set="null" line="400" static="1">
			<f a="this:i">
				<x path="haxe.ds.Vector"><x path="Float"/></x>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>Get vector `x`/`y`/`z` component via subscript operator `[0]` `[1]` `[2]`
    @param i the index</haxe_doc>
		</get>
		<set public="1" get="inline" set="null" line="409" static="1">
			<f a="this:i:v">
				<x path="haxe.ds.Vector"><x path="Float"/></x>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>Set vector `x`/`y`/`z` component via subscript operator `[0]` `[1]` `[2]`
    @param i the index
    @param v the value to write</haxe_doc>
		</set>
		<add public="1" get="inline" set="null" line="419" static="1">
			<f a="this:rhs">
				<x path="haxe.ds.Vector"><x path="Float"/></x>
				<x path="apparentridges.Vec3"/>
				<x path="apparentridges.Vec3"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A + B</e></m>
			</meta>
			<haxe_doc>Overload `+` operator to add vectors
    @param rhs the other vector
    @return elementwise sum</haxe_doc>
		</add>
		<sub public="1" get="inline" set="null" line="428" static="1">
			<f a="this:rhs">
				<x path="haxe.ds.Vector"><x path="Float"/></x>
				<x path="apparentridges.Vec3"/>
				<x path="apparentridges.Vec3"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A - B</e></m>
			</meta>
			<haxe_doc>Overload `-` operator to subtract vectors
    @param rhs the other vector
    @return elementwise difference</haxe_doc>
		</sub>
		<mul public="1" get="inline" set="null" line="437" static="1">
			<f a="this:rhs">
				<x path="haxe.ds.Vector"><x path="Float"/></x>
				<x path="apparentridges.Vec3"/>
				<x path="apparentridges.Vec3"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A * B</e></m>
			</meta>
			<haxe_doc>Overload `*` operator to multiply vectors elementwise
    @param rhs the other vector
    @return hadamard product</haxe_doc>
		</mul>
		<mulf public="1" get="inline" set="null" line="446" static="1">
			<f a="this:rhs">
				<x path="haxe.ds.Vector"><x path="Float"/></x>
				<x path="Float"/>
				<x path="apparentridges.Vec3"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A * B</e></m>
			</meta>
			<haxe_doc>Overload `*` operator to multiply vector by a scalar
    @param rhs the scalar
    @return scaled vector</haxe_doc>
		</mulf>
		<meta><m n=":expose"/></meta>
	</class>
	<abstract path="apparentridges.Face" params="" file="apparentridges/ApparentRidges.hx" module="apparentridges.ApparentRidges">
		<this><x path="haxe.ds.Vector"><x path="Int"/></x></this>
		<haxe_doc>Triangular mesh face type, storing vertices as indices. 
  Maps to native fixed-length array in target language</haxe_doc>
		<meta><m n=":expose"/></meta>
		<impl><class path="apparentridges._ApparentRidges.Face_Impl_" params="" file="apparentridges/ApparentRidges.hx" private="1" module="apparentridges.ApparentRidges" final="1">
	<_new public="1" get="inline" set="null" line="463" static="1">
		<f a="a:b:c">
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="apparentridges.Face"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
		<haxe_doc>New face from vertices (vertex indices in the mesh)
    @param a index of first  vertex in the mesh
    @param b index of second vertex in the mesh
    @param c index of third  vertex in the mesh</haxe_doc>
	</_new>
	<get public="1" get="inline" set="null" line="474" static="1">
		<f a="this:i">
			<x path="haxe.ds.Vector"><x path="Int"/></x>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>Get vertex in the face via subscript `[0]` `[1]` `[2]`
    @param i the index</haxe_doc>
	</get>
	<set public="1" get="inline" set="null" line="483" static="1">
		<f a="this:i:v">
			<x path="haxe.ds.Vector"><x path="Int"/></x>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>Set vertex in the face via subscript `[0]` `[1]` `[2]`
    @param i the index
    @param v the value</haxe_doc>
	</set>
	<indexOf public="1" get="inline" set="null" line="492" static="1">
		<f a="this:v">
			<x path="haxe.ds.Vector"><x path="Int"/></x>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Search for a vertex in the face
    @param v the vertex to look for (vertex index in the mesh)
    @return index of the vertex in the face, -1 if not found</haxe_doc>
	</indexOf>
	<meta><m n=":expose"/></meta>
</class></impl>
	</abstract>
	<class path="apparentridges._ApparentRidges.Face_Impl_" params="" file="apparentridges/ApparentRidges.hx" private="1" module="apparentridges.ApparentRidges" final="1">
		<_new public="1" get="inline" set="null" line="463" static="1">
			<f a="a:b:c">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="apparentridges.Face"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
			<haxe_doc>New face from vertices (vertex indices in the mesh)
    @param a index of first  vertex in the mesh
    @param b index of second vertex in the mesh
    @param c index of third  vertex in the mesh</haxe_doc>
		</_new>
		<get public="1" get="inline" set="null" line="474" static="1">
			<f a="this:i">
				<x path="haxe.ds.Vector"><x path="Int"/></x>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>Get vertex in the face via subscript `[0]` `[1]` `[2]`
    @param i the index</haxe_doc>
		</get>
		<set public="1" get="inline" set="null" line="483" static="1">
			<f a="this:i:v">
				<x path="haxe.ds.Vector"><x path="Int"/></x>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>Set vertex in the face via subscript `[0]` `[1]` `[2]`
    @param i the index
    @param v the value</haxe_doc>
		</set>
		<indexOf public="1" get="inline" set="null" line="492" static="1">
			<f a="this:v">
				<x path="haxe.ds.Vector"><x path="Int"/></x>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Search for a vertex in the face
    @param v the vertex to look for (vertex index in the mesh)
    @return index of the vertex in the face, -1 if not found</haxe_doc>
		</indexOf>
		<meta><m n=":expose"/></meta>
	</class>
	<class path="apparentridges.Ridge" params="" file="apparentridges/ApparentRidges.hx" module="apparentridges.ApparentRidges">
		<A public="1">
			<x path="apparentridges.Vec3"/>
			<haxe_doc>first endpoint</haxe_doc>
		</A>
		<B public="1">
			<x path="apparentridges.Vec3"/>
			<haxe_doc>second endpoint</haxe_doc>
		</B>
		<strengthA public="1">
			<x path="Float"/>
			<haxe_doc>ridge strength at first endpoint</haxe_doc>
		</strengthA>
		<strengthB public="1">
			<x path="Float"/>
			<haxe_doc>ridge strength at second endpoint</haxe_doc>
		</strengthB>
		<new public="1" get="inline" set="null" line="521">
			<f a="a:sa:b:sb">
				<x path="apparentridges.Vec3"/>
				<x path="Float"/>
				<x path="apparentridges.Vec3"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>new ridge from endpoints and strengths 
    @param a  first endpoint coordinate
    @param sa strength of first endpoint
    @param b  second endpoint coordiate
    @param sb strength of second endpoint</haxe_doc>
		</new>
		<haxe_doc>Type for storing an apparent ridge, 
  containing coordinates of endpoints and cooresponding ridge strengths</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":expose"/>
		</meta>
	</class>
	<class path="apparentridges.BSphere" params="" file="apparentridges/ApparentRidges.hx" module="apparentridges.ApparentRidges">
		<r public="1">
			<x path="Float"/>
			<haxe_doc>radius of the bounding sphere</haxe_doc>
		</r>
		<o public="1">
			<x path="apparentridges.Vec3"/>
			<haxe_doc>center of the bounding sphere</haxe_doc>
		</o>
		<new public="1" get="inline" set="null" line="537">
			<f a=""><x path="Void"/></f>
			<haxe_doc>new uninitialized bounding sphere</haxe_doc>
		</new>
		<haxe_doc>Bounding sphere type</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":expose"/>
		</meta>
	</class>
	<class path="apparentridges.Mesh" params="" file="apparentridges/ApparentRidges.hx" module="apparentridges.ApparentRidges">
		<rotCoordSys set="method" line="811" static="1">
			<f a="old_u:old_v:new_norm:new_u:new_v">
				<x path="apparentridges.Vec3"/>
				<x path="apparentridges.Vec3"/>
				<x path="apparentridges.Vec3"/>
				<x path="apparentridges.Vec3"/>
				<x path="apparentridges.Vec3"/>
				<x path="Void"/>
			</f>
			<haxe_doc>"Rotate a coordinate system to be perpendicular to the given normal" 
    -- Trimesh2</haxe_doc>
		</rotCoordSys>
		<projCurv set="method" line="843" static="1">
			<f a="old_u:old_v:old_ku:old_kuv:old_kv:new_u:new_v">
				<x path="apparentridges.Vec3"/>
				<x path="apparentridges.Vec3"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="apparentridges.Vec3"/>
				<x path="apparentridges.Vec3"/>
				<x path="apparentridges.Vec3"/>
			</f>
			<haxe_doc>"Reproject a curvature tensor from the basis spanned by old_u and old_v
    (which are assumed to be unit-length and perpendicular) to the
    new_u, new_v basis." -- Trimesh2</haxe_doc>
		</projCurv>
		<diagonalizeCurv set="method" line="863" static="1">
			<f a="old_u:old_v:ku:kuv:kv:new_norm:pd1:pd2:k1k2">
				<x path="apparentridges.Vec3"/>
				<x path="apparentridges.Vec3"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="apparentridges.Vec3"/>
				<x path="apparentridges.Vec3"/>
				<x path="apparentridges.Vec3"/>
				<x path="apparentridges.Vec3"/>
				<x path="Void"/>
			</f>
			<haxe_doc>"Given a curvature tensor, find principal directions and curvatures"
    -- Trimesh2</haxe_doc>
		</diagonalizeCurv>
		<vertices public="1" expr="[]">
			<c path="Array"><x path="apparentridges.Vec3"/></c>
			<meta><m n=":value"><e>[]</e></m></meta>
			<haxe_doc>vertices as array of 3D points</haxe_doc>
		</vertices>
		<faces public="1" expr="[]">
			<c path="Array"><x path="apparentridges.Face"/></c>
			<meta><m n=":value"><e>[]</e></m></meta>
			<haxe_doc>faces as array of triangles</haxe_doc>
		</faces>
		<normals public="1" expr="[]">
			<c path="Array"><x path="apparentridges.Vec3"/></c>
			<meta><m n=":value"><e>[]</e></m></meta>
			<haxe_doc>vertex normals as array of vectors</haxe_doc>
		</normals>
		<curv1 public="1" expr="[]">
			<c path="Array"><x path="Float"/></c>
			<meta><m n=":value"><e>[]</e></m></meta>
			<haxe_doc>curvature on the first principle direction, per-vertex</haxe_doc>
		</curv1>
		<curv2 public="1" expr="[]">
			<c path="Array"><x path="Float"/></c>
			<meta><m n=":value"><e>[]</e></m></meta>
			<haxe_doc>curvature on the second principle direction, pre-vertex</haxe_doc>
		</curv2>
		<pdir1 public="1" expr="[]">
			<c path="Array"><x path="apparentridges.Vec3"/></c>
			<meta><m n=":value"><e>[]</e></m></meta>
			<haxe_doc>first principle curvature direction, per-vertex</haxe_doc>
		</pdir1>
		<pdir2 public="1" expr="[]">
			<c path="Array"><x path="apparentridges.Vec3"/></c>
			<meta><m n=":value"><e>[]</e></m></meta>
			<haxe_doc>second principle curvature direction, per-vertex</haxe_doc>
		</pdir2>
		<pointAreas public="1" expr="[]">
			<c path="Array"><x path="Float"/></c>
			<meta><m n=":value"><e>[]</e></m></meta>
			<haxe_doc>point area of each vertex</haxe_doc>
		</pointAreas>
		<cornerAreas public="1" expr="[]">
			<c path="Array"><x path="apparentridges.Vec3"/></c>
			<meta><m n=":value"><e>[]</e></m></meta>
			<haxe_doc>corner area of each vertex</haxe_doc>
		</cornerAreas>
		<adjacentFaces public="1" expr="[]">
			<c path="Array"><c path="Array"><x path="Int"/></c></c>
			<meta><m n=":value"><e>[]</e></m></meta>
			<haxe_doc>neighboring faces for each vertex</haxe_doc>
		</adjacentFaces>
		<ndotv public="1" expr="[]">
			<c path="Array"><x path="Float"/></c>
			<meta><m n=":value"><e>[]</e></m></meta>
			<haxe_doc>cosine of angle between normal and view direction</haxe_doc>
		</ndotv>
		<t1q1 public="1" expr="[]">
			<c path="Array"><x path="apparentridges.Vec3"/></c>
			<meta><m n=":value"><e>[]</e></m></meta>
			<haxe_doc>`t1` and `q1` as defined in the paper, 
    packed into single Vec3 for each vertex</haxe_doc>
		</t1q1>
		<Dt1q1 public="1" expr="[]">
			<c path="Array"><x path="Float"/></c>
			<meta><m n=":value"><e>[]</e></m></meta>
			<haxe_doc>"`D_{t_1} q_1` - the derivative of max view-dependent curvature
    in the principal max view-dependent curvature direction." -- RTSC</haxe_doc>
		</Dt1q1>
		<bsphere public="1">
			<c path="apparentridges.BSphere"/>
			<haxe_doc>bounding sphere of the mesh</haxe_doc>
		</bsphere>
		<featureSize public="1">
			<x path="Float"/>
			<haxe_doc>"Used to make thresholds dimensionless" -- RTSC</haxe_doc>
		</featureSize>
		<bvh public="1">
			<c path="apparentridges.BVHTree"/>
			<haxe_doc>bounding volume hierarchy</haxe_doc>
		</bvh>
		<precompute public="1" set="method" line="609">
			<f a="?doBVH:?verb" v="true:false">
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ verb : false, doBVH : true }</e></m></meta>
			<haxe_doc>Call necessary pre-computations of mesh properties for computing 
    apparent ridges, in this order:
    normals, point-areas, adjacent-faces, curvatures, bounding sphere,
    feature size, bounding volume hierarchy.
    Alternatively, you can call the `computeXxxxx()` methods directly for
    a more customized set of things to compute, but since some of them
    depend on another so be careful of the order.
    @param doBVH whether to compute the bounding volume hiarchy, only
                 necessary for hiding occluded ridges
    @param verb  verbose: log progress</haxe_doc>
		</precompute>
		<computeNormals public="1" set="method" line="634">
			<f a=""><x path="Void"/></f>
			<haxe_doc>"Compute per-vertex normals
    Uses average of per-face normals, weighted according to:
    Max, N.
      'Weights for Computing Vertex Normals from Facet Normals,'
      Journal of Graphics Tools, Vol. 4, No. 2, 1999."
    -- Trimesh2</haxe_doc>
		</computeNormals>
		<computeBSphere public="1" set="method" line="655">
			<f a=""><x path="Void"/></f>
			<haxe_doc>"Compute an approximate bounding sphere"
    -- Trimesh2</haxe_doc>
		</computeBSphere>
		<computeFeatureSize public="1" set="method" line="713">
			<f a=""><x path="Void"/></f>
			<haxe_doc>"Compute a 'feature size' for the mesh: computed as 1% of
    the reciprocal of the 10-th percentile curvature" -- RTSC</haxe_doc>
		</computeFeatureSize>
		<computeAdjacentFaces public="1" set="method" line="741">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Find the faces touching each vertex</haxe_doc>
		</computeAdjacentFaces>
		<getFaceEdges public="1" set="method" line="754">
			<f a="f">
				<x path="apparentridges.Face"/>
				<x path="haxe.ds.Vector"><x path="apparentridges.Vec3"/></x>
			</f>
			<haxe_doc>Get the three edges from a face 
    @param face the face
    @return 3 vectors representing direction and length of each edge</haxe_doc>
		</getFaceEdges>
		<computePointAreas public="1" set="method" line="766">
			<f a=""><x path="Void"/></f>
			<haxe_doc>"Compute the area 'belonging' to each vertex or each corner
    of a triangle (defined as Voronoi area restricted to the 1-ring of
    a vertex, or to the triangle)." -- Trimesh2</haxe_doc>
		</computePointAreas>
		<computeCurvatures public="1" set="method" line="901">
			<f a=""><x path="Void"/></f>
			<haxe_doc>"Compute principal curvatures and directions" -- Trimesh2</haxe_doc>
		</computeCurvatures>
		<computeVertViewDepCurv set="method" line="1004">
			<f a="i:ndotv:u2:uv:v2">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="apparentridges.Vec3"/>
			</f>
			<haxe_doc>"Compute principal view-dependent curvatures and directions at vertex i.
     ndotv = cosine of angle between normal and view direction
     (u,v) = coordinates of w (projected view) in principal coordinates
     Pass in u^2, u*v, and v^2, since those are readily available.
     Fills in q1 and t1 (using the paper's notation).
     Note that the latter is expressed in the (pdir1,pdir2) coordinate basis"
     -- RTCC</haxe_doc>
		</computeVertViewDepCurv>
		<computeVertDt1q1 set="method" line="1025"><f a="i:ndotv:t1q1">
	<x path="Int"/>
	<x path="Float"/>
	<c path="Array"><x path="apparentridges.Vec3"/></c>
	<x path="Float"/>
</f></computeVertDt1q1>
		<segmentApparentRidge set="method" line="1090">
			<f a="v0:v1:v2:emax0:emax1:emax2:kmax0:kmax1:kmax2:tmax0:tmax1:tmax2:thresh:to_center:do_test">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="apparentridges.Vec3"/>
				<x path="apparentridges.Vec3"/>
				<x path="apparentridges.Vec3"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="apparentridges.Ridge"/>
			</f>
			<haxe_doc>"Draw part of a ridge/valley curve on one triangle face.  v0,v1,v2
    are the indices of the 3 vertices; this function assumes that the
    curve connects points on the edges v0-v1 and v1-v2
    (or connects point on v0-v1 to center if to_center is true)"
    --RTCC</haxe_doc>
		</segmentApparentRidge>
		<facesApparentRidges set="method" line="1155">
			<f a="ndotv:t1q1:Dt1q1:do_bfcull:do_test:thresh">
				<c path="Array"><x path="Float"/></c>
				<c path="Array"><x path="apparentridges.Vec3"/></c>
				<c path="Array"><x path="Float"/></c>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Float"/>
				<c path="Array"><c path="apparentridges.Ridge"/></c>
			</f>
			<haxe_doc>"Draw apparent ridges of the mesh" -- RTCC</haxe_doc>
		</facesApparentRidges>
		<apparentRidges public="1" set="method" line="1260">
			<f a="eye:thresh">
				<x path="apparentridges.Vec3"/>
				<x path="Float"/>
				<c path="Array"><c path="apparentridges.Ridge"/></c>
			</f>
			<haxe_doc>Find apparent ridges (3D)
    Use `Render.apparentRidges()` instead for 2D projections.
    @param eye view position
    @param thresh threshold value
    @return an array of ridges
    @see `Render.apparentRidges()`.</haxe_doc>
		</apparentRidges>
		<computeBVHTrivial public="1" set="method" line="1298">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Generate a "trivial" BVH (bounding volume hierarchy),
    containing all the faces at the root node.
    This is a placeholder in situations
    where BVH is not actually necessary
    @param eye view position
    @param thresh threshold value</haxe_doc>
		</computeBVHTrivial>
		<computeBVH public="1" set="method" line="1307">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Compute the bounding volume hierarchy of the mesh using default
    parameters. A simple wrapper around BVHTree class's more customizable
    constructor</haxe_doc>
		</computeBVH>
		<visible public="1" set="method" line="1321">
			<f a="eye:p:?tolerance" v="::2">
				<x path="apparentridges.Vec3"/>
				<x path="apparentridges.Vec3"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ tolerance : 2 }</e></m></meta>
			<haxe_doc>Check if a point in space is not occluded by the mesh
    @param eye view position
    @param p the point in question
    @param tolerance a multiplier to the "epsilon", allowing only barely
                     occluded points to pass the test. 
                     The epsilon is also a function of the mesh size (bsphere)
                     and detail (number of faces)
    @return true if visible, false if invisible</haxe_doc>
		</visible>
		<new public="1" set="method" line="595">
			<f a=""><x path="Void"/></f>
			<haxe_doc>New empty mesh</haxe_doc>
		</new>
		<haxe_doc>The main mesh type, stored as vertices and triangles.
  Contains methods to compute normals, curvatures,
  apparent ridges, etc.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":expose"/>
		</meta>
	</class>
	<class path="apparentridges.Ray" params="" file="apparentridges/ApparentRidges.hx" module="apparentridges.ApparentRidges">
		<o public="1">
			<x path="apparentridges.Vec3"/>
			<haxe_doc>Starting point of the ray</haxe_doc>
		</o>
		<d public="1">
			<x path="apparentridges.Vec3"/>
			<haxe_doc>Direction of the ray</haxe_doc>
		</d>
		<tmin public="1">
			<x path="Float"/>
			<haxe_doc>Minimum t parameter (for excluding near intersections)</haxe_doc>
		</tmin>
		<tmax public="1">
			<x path="Float"/>
			<haxe_doc>Maximum t parameter (for excluding far intersections)</haxe_doc>
		</tmax>
		<hitBBox public="1" get="inline" set="null" line="1356">
			<f a="bb">
				<c path="apparentridges.BBox"/>
				<c path="apparentridges.RayHit"/>
			</f>
			<haxe_doc>Intersection test with a bounding box
    @param bb the bounding box
    @return null (no intersection), or an object holding intersection info</haxe_doc>
		</hitBBox>
		<hitTriangle public="1" get="inline" set="null" line="1383">
			<f a="p0:p1:p2">
				<x path="apparentridges.Vec3"/>
				<x path="apparentridges.Vec3"/>
				<x path="apparentridges.Vec3"/>
				<c path="apparentridges.RayHit"/>
			</f>
			<haxe_doc>Intersection test with a triangle
    @param p0 first vertex of the triangle
    @param p1 second vertex of the triangle
    @param p2 third vertex of the triangle
    @return null (no intersection), or an object holding intersection info</haxe_doc>
		</hitTriangle>
		<hitBVH public="1" get="inline" set="null" line="1412">
			<f a="bvh">
				<c path="apparentridges.BVHTree"/>
				<c path="apparentridges.RayHit"/>
			</f>
			<haxe_doc>Intersection test with a bounding volume hierarchy
    @param bvh the bounding volume hierarchy
    @return null (no intersection), or an object holding intersection info</haxe_doc>
		</hitBVH>
		<new public="1" get="inline" set="null" line="1349">
			<f a=""><x path="Void"/></f>
			<haxe_doc>New unintialized ray</haxe_doc>
		</new>
		<haxe_doc>The ray type, for ray-object intersection tests (raycasting)</haxe_doc>
		<meta><m n=":expose"/></meta>
	</class>
	<class path="apparentridges.RayHit" params="" file="apparentridges/ApparentRidges.hx" module="apparentridges.ApparentRidges">
		<t public="1">
			<x path="Float"/>
			<haxe_doc>`t` parameter of the ray at point of intersection</haxe_doc>
		</t>
		<t2 public="1">
			<x path="Float"/>
			<haxe_doc>`t` parameter of the ray when it exits the object
    (only filled for bounding boxes)</haxe_doc>
		</t2>
		<u public="1">
			<x path="Float"/>
			<haxe_doc>The barycentric coordinate `u` of the intersection point in
    the triangle (only filled for triangles)</haxe_doc>
		</u>
		<v public="1">
			<x path="Float"/>
			<haxe_doc>The barycentric coordinate `v` of the intersection point in
    the triangle (only filled for triangles)</haxe_doc>
		</v>
		<face public="1">
			<x path="apparentridges.Face"/>
			<haxe_doc>The specific face in the mesh where the intersection is located
    (only filled for BVH's)</haxe_doc>
		</face>
		<new public="1" get="inline" set="null" line="1498">
			<f a="_t">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Construct from a ray's `t` parameter.
    Other optional fields are manually filled in as needed
    @param _t the `t` to use</haxe_doc>
		</new>
		<haxe_doc>A struct for info from a ray-object intersection</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":expose"/>
		</meta>
	</class>
	<class path="apparentridges.BBox" params="" file="apparentridges/ApparentRidges.hx" module="apparentridges.ApparentRidges">
		<min public="1">
			<x path="apparentridges.Vec3"/>
			<haxe_doc>the "top-left-near" corner of the bounding box</haxe_doc>
		</min>
		<max public="1">
			<x path="apparentridges.Vec3"/>
			<haxe_doc>the "bottom-right-far" corner of the bounding box</haxe_doc>
		</max>
		<centroid public="1" get="inline" set="null" line="1527">
			<f a=""><x path="apparentridges.Vec3"/></f>
			<haxe_doc>Compute centroid of the bounding box
    @return the centroid</haxe_doc>
		</centroid>
		<add public="1" get="inline" set="null" line="1535">
			<f a="p">
				<x path="apparentridges.Vec3"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Add a new point to the bounding box,
    making the bounding box contain the point
    @param the point</haxe_doc>
		</add>
		<merge public="1" get="inline" set="null" line="1548">
			<f a="bb">
				<c path="apparentridges.BBox"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Merge another bounding box with this one,
    making this bounding box contain the other
    @param bb the other bounding box</haxe_doc>
		</merge>
		<surfaceArea public="1" get="inline" set="null" line="1560">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Compute the surface area of the box
    @return the surface area</haxe_doc>
		</surfaceArea>
		<new public="1" get="inline" set="null" line="1519">
			<f a=""><x path="Void"/></f>
			<haxe_doc>New empty bounding box</haxe_doc>
		</new>
		<haxe_doc>Bounding box type (axis-aligned)</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":expose"/>
		</meta>
	</class>
	<class path="apparentridges.BVHNode" params="" file="apparentridges/ApparentRidges.hx" module="apparentridges.ApparentRidges">
		<left public="1">
			<c path="apparentridges.BVHNode"/>
			<haxe_doc>Pointer to left child or null</haxe_doc>
		</left>
		<right public="1">
			<c path="apparentridges.BVHNode"/>
			<haxe_doc>Pointer to right child or null</haxe_doc>
		</right>
		<begin public="1">
			<x path="Int"/>
			<haxe_doc>starting index of the range of faces contained by the node 
    in the BVH face list (inclusive)</haxe_doc>
		</begin>
		<end public="1">
			<x path="Int"/>
			<haxe_doc>ending index of the range of faces contained by the node 
    in the BVH face list (exclusive)</haxe_doc>
		</end>
		<bbox public="1">
			<c path="apparentridges.BBox"/>
			<haxe_doc>Bounding box of this node</haxe_doc>
		</bbox>
		<isLeaf public="1" get="inline" set="null" line="1607">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Check whether the node is a leaf
    (has neither left nor right child)</haxe_doc>
		</isLeaf>
		<new public="1" get="inline" set="null" line="1596">
			<f a="box:i0:i1">
				<c path="apparentridges.BBox"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Construct from a bounding box and a range
    @param box bounding box
    @param i0 starting face index (inclusive)
    @param i1 ending face index (exclusive)</haxe_doc>
		</new>
		<haxe_doc>Type for a node in the bounding volume hierarchy</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":expose"/>
		</meta>
	</class>
	<class path="apparentridges.BVHTree" params="" file="apparentridges/ApparentRidges.hx" module="apparentridges.ApparentRidges">
		<root public="1">
			<c path="apparentridges.BVHNode"/>
			<haxe_doc>root node</haxe_doc>
		</root>
		<mesh public="1">
			<c path="apparentridges.Mesh"/>
			<haxe_doc>pointer to the mesh this BVH belongs to</haxe_doc>
		</mesh>
		<faces public="1">
			<c path="Array"><x path="apparentridges.Face"/></c>
			<haxe_doc>A rearranged array of faces from the mesh,
    a permutation of a shallow copy of the original.
    (It contains pointers to the same faces,
    but is not the same array as `mesh.faces`)</haxe_doc>
		</faces>
		<maxLeafSize public="1">
			<x path="Int"/>
			<haxe_doc>Maximum number of faces allowed in any of its leaf nodes</haxe_doc>
		</maxLeafSize>
		<bucketCount public="1">
			<x path="Int"/>
			<haxe_doc>Number of buckets used for deciding the best partition</haxe_doc>
		</bucketCount>
		<build public="1" set="method" line="1660">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Build the bounding volume hierachy</haxe_doc>
		</build>
		<new public="1" set="method" line="1647">
			<f a="_mesh:?_maxLeafSize:?_bucketCount" v=":4:8">
				<c path="apparentridges.Mesh"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ _bucketCount : 8, _maxLeafSize : 4 }</e></m></meta>
			<haxe_doc>Initialize a new BVH from parameters.
    (does not build the tree, 
    `build()` should be explicitly called afterwards)
    @param _mesh the mesh
    @param _maxLeafSize maximum number of faces 
                        allowed in a leaf node
    @param _bucketCount number of buckets used 
                        for deciding the best partition</haxe_doc>
		</new>
		<haxe_doc>Bounding volume hierarchy (BVH),
  a tree structure for expediting geometric queries</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":expose"/>
		</meta>
	</class>
	<class path="apparentridges._ApparentRidges.BVHBucket" params="" file="apparentridges/ApparentRidges.hx" private="1" module="apparentridges.ApparentRidges">
		<min public="1"><x path="Float"/></min>
		<max public="1"><x path="Float"/></max>
		<count public="1"><x path="Int"/></count>
		<area public="1"><x path="Float"/></area>
		<bbox public="1"><c path="apparentridges.BBox"/></bbox>
		<new public="1" set="method" line="1767"><f a=""><x path="Void"/></f></new>
		<haxe_doc>BVH "bucket" struct 
  internally used by bounding volume hierachy computation</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="apparentridges._ApparentRidges.BVHPartition" params="" file="apparentridges/ApparentRidges.hx" private="1" module="apparentridges.ApparentRidges">
		<planeIndex public="1"><x path="Int"/></planeIndex>
		<axis public="1"><x path="Int"/></axis>
		<leftCount public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</leftCount>
		<rightCount public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</rightCount>
		<leftArea public="1" expr="0">
			<x path="Float"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</leftArea>
		<rightArea public="1" expr="0">
			<x path="Float"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</rightArea>
		<leftBBox public="1"><c path="apparentridges.BBox"/></leftBBox>
		<rightBBox public="1"><c path="apparentridges.BBox"/></rightBBox>
		<SAH public="1" expr="0">
			<x path="Float"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</SAH>
		<new public="1" set="method" line="1788"><f a=""><x path="Void"/></f></new>
		<haxe_doc>BVH partition information
  internally used by bounding volume hierachy computation</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="apparentridges.OBJParser" params="" file="apparentridges/ApparentRidges.hx" module="apparentridges.ApparentRidges">
		<fromFile public="1" set="method" line="1810" static="1">
			<f a="path">
				<c path="String"/>
				<c path="apparentridges.Mesh"/>
			</f>
			<haxe_doc>Read mesh directly from an `.obj` file on disk
    (only available with target languages with filesystem access)
    @param path the file path
    @return the mesh
    @see `OBJParser.fromString()`</haxe_doc>
		</fromFile>
		<fromString public="1" set="method" line="1821" static="1">
			<f a="str">
				<c path="String"/>
				<c path="apparentridges.Mesh"/>
			</f>
			<haxe_doc>Read mesh from a string containing the `.obj` encoding.
    Ignores texcoords (not useful),
    ignores normals (should be computed by `Mesh.computeNormals()`)
    @param path the file path
    @return the mesh</haxe_doc>
		</fromString>
		<haxe_doc>Baseline `.obj` format parser:
  vertex coordinates + trianglular faces</haxe_doc>
		<meta><m n=":expose"/></meta>
	</class>
	<class path="apparentridges.Line" params="" file="apparentridges/ApparentRidges.hx" module="apparentridges.ApparentRidges">
		<x1 public="1">
			<x path="Float"/>
			<haxe_doc>x coorinate of first endpoint</haxe_doc>
		</x1>
		<y1 public="1">
			<x path="Float"/>
			<haxe_doc>y coorinate of first endpoint</haxe_doc>
		</y1>
		<x2 public="1">
			<x path="Float"/>
			<haxe_doc>x coorinate of second endpoint</haxe_doc>
		</x2>
		<y2 public="1">
			<x path="Float"/>
			<haxe_doc>y coorinate of second endpoint</haxe_doc>
		</y2>
		<opacity1 public="1" expr="1">
			<x path="Float"/>
			<meta><m n=":value"><e>1</e></m></meta>
			<haxe_doc>opacity at first endpoint</haxe_doc>
		</opacity1>
		<opacity2 public="1" expr="1">
			<x path="Float"/>
			<meta><m n=":value"><e>1</e></m></meta>
			<haxe_doc>opacity at second endpoint</haxe_doc>
		</opacity2>
		<setOpacity public="1" set="method" line="1899">
			<f a="o1:o2">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set opacity at each end
    @param o1 opacity at first endpoint
    @param o2 opacity at second endpoint</haxe_doc>
		</setOpacity>
		<flip public="1" set="method" line="1907">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Flip direction of the line segment,
    making the first endpoint the second, and the second the first</haxe_doc>
		</flip>
		<new public="1" set="method" line="1888">
			<f a="_x1:_y1:_x2:_y2">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>New line segment from endpoints
    @param _x1 x coorinate of first endpoint
    @param _y1 y coorinate of first endpoint
    @param _x2 x coorinate of second endpoint
    @param _y2 y coorinate of second endpoint</haxe_doc>
		</new>
		<haxe_doc>Struct for a drawable 2D line segment,
  holding endpoint coordinates and corresponding opacity</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":expose"/>
		</meta>
	</class>
	<abstract path="apparentridges.Polyline" params="" file="apparentridges/ApparentRidges.hx" module="apparentridges.ApparentRidges">
		<this><c path="Array"><x path="apparentridges.Vec3"/></c></this>
		<haxe_doc>2D polyline type. An abstract class mapping to an array of `Vec3`s,
  with the `z` component at each point representing opacity there</haxe_doc>
		<meta><m n=":expose"/></meta>
		<impl><class path="apparentridges._ApparentRidges.Polyline_Impl_" params="" file="apparentridges/ApparentRidges.hx" private="1" module="apparentridges.ApparentRidges" final="1">
	<length public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Length (number of points) of the polyline, read-only</haxe_doc>
	</length>
	<_new public="1" get="inline" set="null" line="1930" static="1">
		<f a=""><x path="apparentridges.Polyline"/></f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
		<haxe_doc>New empty polyline</haxe_doc>
	</_new>
	<get_length get="inline" set="null" line="1933" static="1">
		<f a="this">
			<c path="Array"><x path="apparentridges.Vec3"/></c>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<set_length get="inline" set="null" line="1936" static="1">
		<f a="this:v">
			<c path="Array"><x path="apparentridges.Vec3"/></c>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_length>
	<startY public="1" get="inline" set="null" line="1943" static="1">
		<f a="this">
			<c path="Array"><x path="apparentridges.Vec3"/></c>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Retrieve y coordinate of the first point, 
    rounded to integer (for segment-connecting algorithm)</haxe_doc>
	</startY>
	<endY public="1" get="inline" set="null" line="1950" static="1">
		<f a="this">
			<c path="Array"><x path="apparentridges.Vec3"/></c>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Retrieve y coordinate of the last point, 
    rounded to integer (for segment-connecting algorithm)</haxe_doc>
	</endY>
	<startX public="1" get="inline" set="null" line="1957" static="1">
		<f a="this">
			<c path="Array"><x path="apparentridges.Vec3"/></c>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Retrieve x coordinate of the first point
    (for segment-connecting algorithm)</haxe_doc>
	</startX>
	<endX public="1" get="inline" set="null" line="1964" static="1">
		<f a="this">
			<c path="Array"><x path="apparentridges.Vec3"/></c>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Retrieve x coordinate of the last point
    (for segment-connecting algorithm)</haxe_doc>
	</endX>
	<get public="1" get="inline" set="null" line="1972" static="1">
		<f a="this:i">
			<c path="Array"><x path="apparentridges.Vec3"/></c>
			<x path="Int"/>
			<x path="apparentridges.Vec3"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>Get point in the polyline via subscript operator (`[i]`)
    @param i the index</haxe_doc>
	</get>
	<set public="1" get="inline" set="null" line="1981" static="1">
		<f a="this:i:v">
			<c path="Array"><x path="apparentridges.Vec3"/></c>
			<x path="Int"/>
			<x path="apparentridges.Vec3"/>
			<x path="apparentridges.Vec3"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>Set point in the polyline via subscript operator (`[i]`)
    @param i the index
    @param v the value</haxe_doc>
	</set>
	<push public="1" get="inline" set="null" line="1989" static="1">
		<f a="this:v">
			<c path="Array"><x path="apparentridges.Vec3"/></c>
			<x path="apparentridges.Vec3"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Add a new point to the end of the polyline
    @param v the point to be added</haxe_doc>
	</push>
	<unshift public="1" get="inline" set="null" line="1997" static="1">
		<f a="this:v">
			<c path="Array"><x path="apparentridges.Vec3"/></c>
			<x path="apparentridges.Vec3"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Add a new point at the beginning of the polyline
    @param v the point to be added</haxe_doc>
	</unshift>
	<meta><m n=":expose"/></meta>
</class></impl>
	</abstract>
	<class path="apparentridges._ApparentRidges.Polyline_Impl_" params="" file="apparentridges/ApparentRidges.hx" private="1" module="apparentridges.ApparentRidges" final="1">
		<length public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Length (number of points) of the polyline, read-only</haxe_doc>
		</length>
		<_new public="1" get="inline" set="null" line="1930" static="1">
			<f a=""><x path="apparentridges.Polyline"/></f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
			<haxe_doc>New empty polyline</haxe_doc>
		</_new>
		<get_length get="inline" set="null" line="1933" static="1">
			<f a="this">
				<c path="Array"><x path="apparentridges.Vec3"/></c>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<set_length get="inline" set="null" line="1936" static="1">
			<f a="this:v">
				<c path="Array"><x path="apparentridges.Vec3"/></c>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_length>
		<startY public="1" get="inline" set="null" line="1943" static="1">
			<f a="this">
				<c path="Array"><x path="apparentridges.Vec3"/></c>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Retrieve y coordinate of the first point, 
    rounded to integer (for segment-connecting algorithm)</haxe_doc>
		</startY>
		<endY public="1" get="inline" set="null" line="1950" static="1">
			<f a="this">
				<c path="Array"><x path="apparentridges.Vec3"/></c>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Retrieve y coordinate of the last point, 
    rounded to integer (for segment-connecting algorithm)</haxe_doc>
		</endY>
		<startX public="1" get="inline" set="null" line="1957" static="1">
			<f a="this">
				<c path="Array"><x path="apparentridges.Vec3"/></c>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Retrieve x coordinate of the first point
    (for segment-connecting algorithm)</haxe_doc>
		</startX>
		<endX public="1" get="inline" set="null" line="1964" static="1">
			<f a="this">
				<c path="Array"><x path="apparentridges.Vec3"/></c>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Retrieve x coordinate of the last point
    (for segment-connecting algorithm)</haxe_doc>
		</endX>
		<get public="1" get="inline" set="null" line="1972" static="1">
			<f a="this:i">
				<c path="Array"><x path="apparentridges.Vec3"/></c>
				<x path="Int"/>
				<x path="apparentridges.Vec3"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>Get point in the polyline via subscript operator (`[i]`)
    @param i the index</haxe_doc>
		</get>
		<set public="1" get="inline" set="null" line="1981" static="1">
			<f a="this:i:v">
				<c path="Array"><x path="apparentridges.Vec3"/></c>
				<x path="Int"/>
				<x path="apparentridges.Vec3"/>
				<x path="apparentridges.Vec3"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>Set point in the polyline via subscript operator (`[i]`)
    @param i the index
    @param v the value</haxe_doc>
		</set>
		<push public="1" get="inline" set="null" line="1989" static="1">
			<f a="this:v">
				<c path="Array"><x path="apparentridges.Vec3"/></c>
				<x path="apparentridges.Vec3"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Add a new point to the end of the polyline
    @param v the point to be added</haxe_doc>
		</push>
		<unshift public="1" get="inline" set="null" line="1997" static="1">
			<f a="this:v">
				<c path="Array"><x path="apparentridges.Vec3"/></c>
				<x path="apparentridges.Vec3"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Add a new point at the beginning of the polyline
    @param v the point to be added</haxe_doc>
		</unshift>
		<meta><m n=":expose"/></meta>
	</class>
	<class path="apparentridges.Render" params="" file="apparentridges/ApparentRidges.hx" module="apparentridges.ApparentRidges">
		<mesh public="1">
			<c path="apparentridges.Mesh"/>
			<haxe_doc>The mesh to be rendered</haxe_doc>
		</mesh>
		<lines public="1">
			<c path="Array"><c path="apparentridges.Line"/></c>
			<haxe_doc>Array of generated lines for drawing</haxe_doc>
		</lines>
		<polylines public="1">
			<c path="Array"><x path="apparentridges.Polyline"/></c>
			<haxe_doc>Array of generated polylines for drawing,
    populated by `Render.buildPolylines()`</haxe_doc>
		</polylines>
		<focal public="1" expr="1000">
			<x path="Float"/>
			<meta><m n=":value"><e>1000</e></m></meta>
			<haxe_doc>Focal length of the camera</haxe_doc>
		</focal>
		<width public="1">
			<x path="Int"/>
			<haxe_doc>Width of the canvas</haxe_doc>
		</width>
		<height public="1">
			<x path="Int"/>
			<haxe_doc>Height of the canvas</haxe_doc>
		</height>
		<verbose expr="true">
			<x path="Bool"/>
			<meta><m n=":value"><e>true</e></m></meta>
			<haxe_doc>Whether to log progress</haxe_doc>
		</verbose>
		<didPrecompute public="1" expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
			<haxe_doc>Were the mesh properties necessary for computing apparent ridges
    already computed? If `false`, `Render.apparentRidges()` will call
    `Mesh.precompute()` when itself is called for the first time, 
    and set this flag to `true`. If you transformed or otherwise mutated
    the mesh, set this flag to `false` again. (Or explicitly call the
    mesh's `computeXxxxx()` methods)</haxe_doc>
		</didPrecompute>
		<clear public="1" set="method" line="2055">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Clear the rendering, 
    emptying `Render.lines` and `Render.polylines`.</haxe_doc>
		</clear>
		<setFocal public="1" set="method" line="2067">
			<f a="f">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the focal length of the camera
    @param f focal length</haxe_doc>
		</setFocal>
		<setVerbose public="1" set="method" line="2074">
			<f a="v">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Set verbosity level
    @param v `0` => no log, `1` => log progress]]></haxe_doc>
		</setVerbose>
		<transform public="1" set="method" line="2083">
			<f a="mat4x4">
				<c path="Array"><x path="Float"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Transform the mesh with a custom 4x4 transformation matrix,
    to place it at desired a position and angle.
    @param mat4x4 a flat, row-major 16 element array
    @see `Render.scaleRotateTranslate()` `Render.autoPlace()`</haxe_doc>
		</transform>
		<scaleRotateTranslate public="1" set="method" line="2103">
			<f a="sx:sy:sz:rx:ry:rz:dx:dy:dz">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>First scale the mesh, then rotate the mesh in X-Y-Z order, 
    and finally translate the mesh. A convenient alternative to
    `Render.transform()`, covering common use cases.
    @param sx scale       along  the x axis
    @param sy scale       along  the y axis
    @param sz scale       along  the z axis
    @param rx rotation    around the x axis
    @param ry rotation    around the y axis
    @param rz rotation    around the z axis
    @param dx translation along  the x axis
    @param dy translation along  the y axis
    @param dz translation along  the z axis
    @see `Render.transform()` `Render.autoPlace()`</haxe_doc>
		</scaleRotateTranslate>
		<autoPlace public="1" set="method" line="2125">
			<f a="?zFactor:?fFactor" v="1.5:1.25">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ fFactor : 1.25, zFactor : 1.5 }</e></m></meta>
			<haxe_doc>Automatically put the mesh at a nice distance and scale for viewing.
    Tweak the two arguments to adjust how "strong" the perspective is
    @param zFactor multiplier for `z` distance
    @param fFactor multiplier for focal length</haxe_doc>
		</autoPlace>
		<vertices public="1" set="method" line="2147">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Simply plot all vertices in the mesh (e.g. for sanity checking)
    Each vertex is plotted as an "X" using two short `Line`s.
    Populates the `Render.lines` list.</haxe_doc>
		</vertices>
		<edges public="1" set="method" line="2164">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Simply plot all edges in the mesh (e.g. for sanity checking)
    Edges shared by multiple faces will be repeated, since `Mesh`
    does not keep a separate list for edges.
    Populates the `Render.lines` list.</haxe_doc>
		</edges>
		<apparentRidges public="1" set="method" line="2198">
			<f a="thresh:?cull" v=":2">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ cull : 2 }</e></m></meta>
			<haxe_doc><![CDATA[Plot the apparent ridges of the mesh.
    This calls `Mesh.apparentRidges()` with appropriate parameters,
    and is usually where the heavy computation happens.
    If the `Render.didPrecompute` flag indicates that the necessary 
    mesh properties have not yet been computed, those will also be 
    calculated here.
    Populates the `Render.lines` list.
    @param thresh apparent ridge threshold
    @param cull what to do with occluded ridges. 
                Negative values => 
                 display hidden ridges (much faster).
                Non-negative    => 
                 use (software) raycasting to 
                 cull hidden ridges, with
                 the argument as a multiplier to
                 the raycaster "tolerance"
                 (see `Mesh.visible()`)]]></haxe_doc>
		</apparentRidges>
		<buildPolylines public="1" set="method" line="2236">
			<f a="?epsilon" v="1">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ epsilon : 1 }</e></m></meta>
			<haxe_doc>Connect line segments into continous polylines.
    Populates the `Render.polylines` list.
    Uses a custom (novel?) scanline-like algorithm to solve this problem
    (relatively) efficiently. See the source comment for details.
    @param epsilon the maximum endpoint x difference for two segments 
                   with matched endpoint y coordiante to be considered 
                   connectable</haxe_doc>
		</buildPolylines>
		<new public="1" set="method" line="2045">
			<f a="_mesh:w:h">
				<c path="apparentridges.Mesh"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>New render
    @param _mesh the mesh to be rendered
    @param w width of the canvas
    @param h height of the canvas</haxe_doc>
		</new>
		<haxe_doc>A renderer for projecting 3D information (e.g. apparent ridges)
  onto 2D and doing neccessary pre- and postprocessing 
  to produce drawable elements ready for 
  graphics/imaging frameworks. Uses the pinhole camera model, with
  camera fixed at `(0,0,0)` pointing toward `+z`.</haxe_doc>
		<meta><m n=":expose"/></meta>
	</class>
	<class path="apparentridges.PixelMap" params="" file="apparentridges/ApparentRidges.hx" module="apparentridges.ApparentRidges">
		<raycast public="1" set="method" line="2391" static="1">
			<f a="render:fun">
				<c path="apparentridges.Render"/>
				<f a="::">
					<c path="apparentridges.RayHit"/>
					<x path="Int"/>
					<x path="Int"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Cast a ray from each display pixel, with a customizable callback
    function for each result.
    @param render The renderer object
    @param fun   The callback function that takes arguments 
                 `(RayHit|null, width, height)`</haxe_doc>
		</raycast>
		<depth public="1" set="method" line="2421" static="1">
			<f a="render:?normalize" v=":false">
				<c path="apparentridges.Render"/>
				<x path="Bool"/>
				<x path="haxe.ds.Vector"><x path="Float"/></x>
			</f>
			<meta><m n=":value"><e>{ normalize : false }</e></m></meta>
			<haxe_doc>Compute the per-pixel depth map. 
    When `normalize=false`, empty void is encoded as `Math.POSITIVE_INFINITY`.
    @param render The renderer object
    @param normalize Whether to normalize to range [0,1]
    @return a flat vector with width x height elements</haxe_doc>
		</depth>
		<normal public="1" set="method" line="2455" static="1">
			<f a="render">
				<c path="apparentridges.Render"/>
				<x path="haxe.ds.Vector"><x path="Float"/></x>
			</f>
			<haxe_doc>Compute the per-pixel normal map. 
    @param render The renderer object
    @return a flat vector with width x height x 3 elements
            (`x` `y` `z` compnent of the normal as the 3 channels)</haxe_doc>
		</normal>
		<curvature public="1" set="method" line="2485" static="1">
			<f a="render">
				<c path="apparentridges.Render"/>
				<x path="haxe.ds.Vector"><x path="Float"/></x>
			</f>
			<haxe_doc>Compute the per-pixel curvature map
    @param render The renderer object
    @return a flat vector with width x height x 2 elements
            (curvature in the two principle axes as the 2 channels)</haxe_doc>
		</curvature>
		<lambertian public="1" set="method" line="2519" static="1">
			<f a="render:light:?normalize" v="::true">
				<c path="apparentridges.Render"/>
				<x path="apparentridges.Vec3"/>
				<x path="Bool"/>
				<x path="haxe.ds.Vector"><x path="Float"/></x>
			</f>
			<meta><m n=":value"><e>{ normalize : true }</e></m></meta>
			<haxe_doc>Compute per-pixel Lambertian ("n-dot-l") shading.
    When `normalize=false`, empty void is encoded as `Math.NEGATIVE_INFINITY`.
    @param render The renderer object
    @param light The direction of light
    @param normalize Whether to normalize to range [0,1]
    @return a flat vector with width x height elements</haxe_doc>
		</lambertian>
		<ambientOcclusion public="1" set="method" line="2560" static="1">
			<f a="render:?numSamples:?normalize" v=":32:true">
				<c path="apparentridges.Render"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="haxe.ds.Vector"><x path="Float"/></x>
			</f>
			<meta><m n=":value"><e>{ normalize : true, numSamples : 32 }</e></m></meta>
			<haxe_doc><![CDATA[Compute per-pixel ambient occlusion
    @param render The renderer object
    @param numSamples Number of samples
                      Smaller=>faster,noisier. Larger=>slower,finer
    @param normalize Whether to normalize to range [0,1]
    @return a flat vector with width x height elements]]></haxe_doc>
		</ambientOcclusion>
		<toPPMString public="1" set="method" line="2625" static="1">
			<f a="data:w:h:min:max">
				<x path="haxe.ds.Vector"><x path="Float"/></x>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encode pixel array as a PPM (Netpbm color image) string,
    for previewing results.
    (PPM is a dead simple image format with a trivial implementation)
    @param data the array holding image information,
                any of those returned by methods in the `PixelMap` class
                works.
    @param w width of the image
    @param h height of the image
    @param min minimum pixel value (used for normalization)
    @param max maximum pixel value (used for normalization)
    @return a string containing PPM encoding</haxe_doc>
		</toPPMString>
		<haxe_doc>Make raster renderings of a mesh with (software) raycasting,
  to visualize mesh properties such as normals and curvatures.
  (Static methods)</haxe_doc>
		<meta><m n=":expose"/></meta>
	</class>
	<class path="apparentridges.SVGWriter" params="" file="apparentridges/ApparentRidges.hx" module="apparentridges.ApparentRidges">
		<rd get="inline" set="null" line="2655" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>round to 2 decimal places</haxe_doc>
		</rd>
		<lines public="1" set="method" line="2666" static="1">
			<f a="render:?useOpacity" v=":true">
				<c path="apparentridges.Render"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ useOpacity : true }</e></m></meta>
			<haxe_doc><![CDATA[Use SVG `<line>` element to encode each segment from `Render.lines`.
    @param render The renderer object
    @param useOpacity Whether to map opacity encoded in `Line`s 
                      to the SVG `stroke` attribute (grayscale)
    @return the SVG string]]></haxe_doc>
		</lines>
		<polylines public="1" set="method" line="2693" static="1">
			<f a="render:?colorful" v=":false">
				<c path="apparentridges.Render"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ colorful : false }</e></m></meta>
			<haxe_doc><![CDATA[Use SVG `<polyline>` element to draw the connected polylines 
    from `Render.polylines`. This is more suitable for use with plotters.
    @param render The renderer object
    @param useOpacity Whether to color each polyline with a random color
                      ("debug" option for visually distinguishing the polylines)
    @return the SVG string]]></haxe_doc>
		</polylines>
		<gradients public="1" set="method" line="2724" static="1">
			<f a="render:?acc" v=":1">
				<c path="apparentridges.Render"/>
				<x path="Float"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ acc : 1 }</e></m></meta>
			<haxe_doc>Render fine gradated strokes, fully visualizing properties of apparent ridges.
    Produces nice looking image, but not suitable as intermediate format for
    other hardware/softwares.
    @param render The renderer object
    @param acc Accuracy, 
               affects the number of tiny segments to use for simulating gradients
    @return the SVG string</haxe_doc>
		</gradients>
		<haxe_doc>Static methods for encoding `Render` result 
  as `.svg` (scalable vector graphics) files, with various options
  to choose from for different use cases.</haxe_doc>
		<meta><m n=":expose"/></meta>
	</class>
	<abstract path="haxe.CallStack" params="" file="/usr/local/lib/haxe/std/haxe/CallStack.hx">
		<from><icast><c path="Array"><e path="haxe.StackItem"/></c></icast></from>
		<this><c path="Array"><e path="haxe.StackItem"/></c></this>
		<haxe_doc>Get information about the call stack.</haxe_doc>
		<meta>
			<m n=":allow"><e>haxe.Exception</e></m>
			<m n=":using"><e>haxe.CallStack</e></m>
		</meta>
		<impl><class path="haxe._CallStack.CallStack_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/CallStack.hx" private="1" module="haxe.CallStack" final="1"><meta>
	<m n=":keep"/>
	<m n=":using"><e>haxe.CallStack</e></m>
	<m n=":allow"><e>haxe.Exception</e></m>
</meta></class></impl>
	</abstract>
	<abstract path="haxe.Function" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with any function type.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<meta><m n=":callable"/></meta>
		<impl><class path="haxe._Constraints.Function_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.FlatEnum" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with an enum instance if all constructors of the enum
	require no arguments.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<impl><class path="haxe._Constraints.FlatEnum_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.NotVoid" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with anything but `Void`.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<impl><class path="haxe._Constraints.NotVoid_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.Constructible" params="T" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc><![CDATA[This type unifies with any instance of classes that have a constructor
	which

	  * is `public` and
	  * unifies with the type used for type parameter `T`.

	If a type parameter `A` is assigned to a type parameter `B` which is constrained
	to `Constructible<T>`, A must be explicitly constrained to
	`Constructible<T>` as well.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.]]></haxe_doc>
		<impl><class path="haxe._Constraints.Constructible_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.EnumTools" params="" file="/usr/local/lib/haxe/std/haxe/EnumTools.hx" extern="1">
		<getName public="1" params="T" get="inline" set="null" line="52" static="1">
			<f a="e">
				<x path="Enum"><c path="getName.T"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
		
			pack1.pack2.(...).packN.EnumName

		If `e` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is `null`, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getName>
		<createByName public="1" params="T" get="inline" set="null" line="65" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createByName.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createByName.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is `null`, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createByName>
		<createByIndex public="1" params="T" get="inline" set="null" line="81" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createByIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createByIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from Haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `index` is `null`, or if enum `e` has no constructor
		corresponding to index `index`, or if the number of elements in `params`
		does not match the expected number of constructor arguments, or if any
		argument has an invalid type, the result is unspecified.</haxe_doc>
		</createByIndex>
		<createAll public="1" params="T" get="inline" set="null" line="98" static="1">
			<f a="e">
				<x path="Enum"><c path="createAll.T"/></x>
				<c path="Array"><c path="createAll.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array `[]` if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</createAll>
		<getConstructors public="1" params="T" get="inline" set="null" line="110" static="1">
			<f a="e">
				<x path="Enum"><c path="getConstructors.T"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `c` is `null`, the result is unspecified.</haxe_doc>
		</getConstructors>
		<haxe_doc>This class provides advanced methods on enums. It is ideally used with
	`using EnumTools` and then acts as an
	  [extension](https://haxe.org/manual/lf-static-extension.html) to the
	  `enum` types.

	If the first argument to any of the methods is `null`, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="haxe.EnumValueTools" params="" file="/usr/local/lib/haxe/std/haxe/EnumTools.hx" module="haxe.EnumTools" extern="1">
		<equals public="1" params="T" get="inline" set="null" line="133" static="1">
			<f a="a:b">
				<c path="equals.T"/>
				<c path="equals.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors (if there are any).

		If `a` or `b` are `null`, the result is unspecified.</haxe_doc>
		</equals>
		<getName public="1" get="inline" set="null" line="144" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getName>
		<getParameters public="1" get="inline" set="null" line="158" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is `[]`.

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getParameters>
		<getIndex public="1" get="inline" set="null" line="170" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getIndex>
		<haxe_doc>This class provides advanced methods on enum values. It is ideally used with
	`using EnumValueTools` and then acts as an
	  [extension](https://haxe.org/manual/lf-static-extension.html) to the
	  `EnumValue` types.

	If the first argument to any of the methods is `null`, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="haxe.Exception" params="" file="/usr/local/lib/haxe/std/haxe/Exception.hx" extern="1">
		<caught set="method" static="1">
			<f a="value">
				<x path="Any"/>
				<c path="haxe.Exception"/>
			</f>
			<haxe_doc>Used internally for wildcard catches like `catch(e:Exception)`.</haxe_doc>
		</caught>
		<thrown set="method" static="1">
			<f a="value">
				<x path="Any"/>
				<x path="Any"/>
			</f>
			<haxe_doc>Used internally for wrapping non-throwable values for `throw` expressions.</haxe_doc>
		</thrown>
		<message public="1" get="accessor" set="null">
			<c path="String"/>
			<haxe_doc>Exception message.</haxe_doc>
		</message>
		<get_message set="method"><f a=""><c path="String"/></f></get_message>
		<stack public="1" get="accessor" set="null">
			<x path="haxe.CallStack"/>
			<haxe_doc>The call stack at the moment of the exception creation.</haxe_doc>
		</stack>
		<get_stack set="method"><f a=""><x path="haxe.CallStack"/></f></get_stack>
		<previous public="1" get="accessor" set="null">
			<x path="Null"><c path="haxe.Exception"/></x>
			<haxe_doc>Contains an exception, which was passed to `previous` constructor argument.</haxe_doc>
		</previous>
		<get_previous set="method"><f a=""><x path="Null"><c path="haxe.Exception"/></x></f></get_previous>
		<native public="1" get="accessor" set="null">
			<x path="Any"/>
			<haxe_doc>Native exception, which caused this exception.</haxe_doc>
		</native>
		<get_native final="1" set="method"><f a=""><x path="Any"/></f></get_native>
		<unwrap set="method">
			<f a=""><x path="Any"/></f>
			<haxe_doc>Extract an originally thrown value.

		Used internally for catching non-native exceptions.
		Do _not_ override unless you know what you are doing.</haxe_doc>
		</unwrap>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns exception message.</haxe_doc>
		</toString>
		<details public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Detailed exception description.

		Includes message, stack and the chain of previous exceptions (if set).</haxe_doc>
		</details>
		<new public="1" set="method">
			<f a="message:?previous:?native">
				<c path="String"/>
				<c path="haxe.Exception"/>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new Exception instance.

		The `previous` argument could be used for exception chaining.

		The `native` argument is for internal usage only.
		There is no need to provide `native` argument manually and no need to keep it
		upon extending `haxe.Exception` unless you know what you're doing.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[Base class for exceptions.

	If this class (or derivatives) is used to catch an exception, then
	`haxe.CallStack.exceptionStack()` will not return a stack for the exception
	caught. Use `haxe.Exception.stack` property instead:
	```haxe
	try {
		throwSomething();
	} catch(e:Exception) {
		trace(e.stack);
	}
	```

	Custom exceptions should extend this class:
	```haxe
	class MyException extends haxe.Exception {}
	//...
	throw new MyException('terrible exception');
	```

	`haxe.Exception` is also a wildcard type to catch any exception:
	```haxe
	try {
		throw 'Catch me!';
	} catch(e:haxe.Exception) {
		trace(e.message); // Output: Catch me!
	}
	```

	To rethrow an exception just throw it again.
	Haxe will try to rethrow an original native exception whenever possible.
	```haxe
	try {
		var a:Array<Int> = null;
		a.push(1); // generates target-specific null-pointer exception
	} catch(e:haxe.Exception) {
		throw e; // rethrows native exception instead of haxe.Exception
	}
	```]]></haxe_doc>
	</class>
	<abstract path="haxe.Int32" params="" file="/usr/local/lib/haxe/std/haxe/Int32.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
		</to>
		<haxe_doc>Int32 provides a 32-bit integer with consistent overflow behavior across
	all platforms.</haxe_doc>
		<impl><class path="haxe._Int32.Int32_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Int32.hx" private="1" module="haxe.Int32" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.Int64" params="" file="/usr/local/lib/haxe/std/haxe/Int64.hx">
		<from>
			<icast><t path="haxe._Int64.__Int64"/></icast>
			<icast field="ofInt"><x path="Int"/></icast>
		</from>
		<this><t path="haxe._Int64.__Int64"/></this>
		<to><icast><t path="haxe._Int64.__Int64"/></icast></to>
		<haxe_doc>A cross-platform signed 64-bit integer.
	Int64 instances can be created from two 32-bit words using `Int64.make()`.</haxe_doc>
		<impl><class path="haxe._Int64.Int64_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Int64.hx" private="1" module="haxe.Int64" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<typedef path="haxe._Int64.__Int64" params="" file="/usr/local/lib/haxe/std/haxe/Int64.hx" private="1" module="haxe.Int64">
		<c path="haxe._Int64.___Int64"/>
		<haxe_doc>This typedef will fool `@:coreApi` into thinking that we are using
	the same underlying type, even though it might be different on
	specific platforms.</haxe_doc>
	</typedef>
	<class path="haxe.Log" params="" file="/usr/local/lib/haxe/std/haxe/Log.hx">
		<formatOutput public="1" set="method" line="33" static="1">
			<f a="v:infos">
				<d/>
				<t path="haxe.PosInfos"/>
				<c path="String"/>
			</f>
			<haxe_doc>Format the output of `trace` before printing it.</haxe_doc>
		</formatOutput>
		<trace public="1" set="dynamic" line="62" static="1">
			<f a="v:?infos">
				<d/>
				<x path="Null"><t path="haxe.PosInfos"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Outputs `v` in a platform-dependent way.

		The second parameter `infos` is injected by the compiler and contains
		information about the position where the `trace()` call was made.

		This method can be rebound to a custom function:

			var oldTrace = haxe.Log.trace; // store old function
			haxe.Log.trace = function(v, ?infos) {
			  // handle trace
			}
			...
			haxe.Log.trace = oldTrace;

		If it is bound to null, subsequent calls to `trace()` will cause an
		exception.</haxe_doc>
		</trace>
		<haxe_doc>Log primarily provides the `trace()` method, which is invoked upon a call to
	`trace()` in Haxe code.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.NativeStackTrace" params="" file="/usr/local/lib/haxe/std/haxe/NativeStackTrace.hx" extern="1">
		<saveStack public="1" set="method" static="1"><f a="exception">
	<x path="Any"/>
	<x path="Void"/>
</f></saveStack>
		<callStack public="1" set="method" static="1"><f a=""><x path="Any"/></f></callStack>
		<exceptionStack public="1" set="method" static="1"><f a=""><x path="Any"/></f></exceptionStack>
		<toHaxe public="1" set="method" static="1">
			<f a="nativeStackTrace:?skip" v=":0">
				<x path="Any"/>
				<x path="Int"/>
				<c path="Array"><e path="haxe.StackItem"/></c>
			</f>
			<meta><m n=":value"><e>{ skip : 0 }</e></m></meta>
		</toHaxe>
		<haxe_doc>Do not use manually.</haxe_doc>
		<meta>
			<m n=":dox"><e>hide</e></m>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<typedef path="haxe.PosInfos" params="" file="/usr/local/lib/haxe/std/haxe/PosInfos.hx">
		<a>
			<methodName><c path="String"/></methodName>
			<lineNumber><x path="Int"/></lineNumber>
			<fileName><c path="String"/></fileName>
			<customParams>
				<x path="Null"><c path="Array"><d/></c></x>
				<meta><m n=":optional"/></meta>
			</customParams>
			<className><c path="String"/></className>
		</a>
		<haxe_doc>`PosInfos` is a magic type which can be used to generate position information
	into the output for debugging use.

	If a function has a final optional argument of this type, i.e.
	`(..., ?pos:haxe.PosInfos)`, each call to that function which does not assign
	a value to that argument has its position added as call argument.

	This can be used to track positions of calls in e.g. a unit testing
	framework.</haxe_doc>
	</typedef>
	<class path="haxe.ds.TreeNode" params="K:V" file="/usr/local/lib/haxe/std/haxe/ds/BalancedTree.hx" module="haxe.ds.BalancedTree">
		<left public="1"><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.TreeNode.K"/>
	<c path="haxe.ds.TreeNode.V"/>
</c></left>
		<right public="1"><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.TreeNode.K"/>
	<c path="haxe.ds.TreeNode.V"/>
</c></right>
		<key public="1"><c path="haxe.ds.TreeNode.K"/></key>
		<value public="1"><c path="haxe.ds.TreeNode.V"/></value>
		<_height><x path="Int"/></_height>
		<get_height public="1" get="inline" set="null" line="263"><f a=""><x path="Int"/></f></get_height>
		<new public="1" set="method" line="252">
			<f a="l:k:v:r:?h" v="::::-1">
				<c path="haxe.ds.TreeNode">
					<c path="haxe.ds.TreeNode.K"/>
					<c path="haxe.ds.TreeNode.V"/>
				</c>
				<c path="haxe.ds.TreeNode.K"/>
				<c path="haxe.ds.TreeNode.V"/>
				<c path="haxe.ds.TreeNode">
					<c path="haxe.ds.TreeNode.K"/>
					<c path="haxe.ds.TreeNode.V"/>
				</c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ h : -1 }</e></m></meta>
		</new>
		<haxe_doc>A tree node of `haxe.ds.BalancedTree`.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<abstract path="haxe.ds.HashMap" params="K:V" file="/usr/local/lib/haxe/std/haxe/ds/HashMap.hx">
		<this><c path="haxe.ds._HashMap.HashMapData">
	<c path="haxe.ds.HashMap.K"/>
	<c path="haxe.ds.HashMap.V"/>
</c></this>
		<haxe_doc>HashMap allows mapping of hashable objects to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<impl><class path="haxe.ds._HashMap.HashMap_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/ds/HashMap.hx" private="1" module="haxe.ds.HashMap" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.ds.IntMap" params="T" file="/usr/local/lib/haxe/std/haxe/ds/IntMap.hx" extern="1">
		<implements path="haxe.IMap">
			<x path="Int"/>
			<c path="haxe.ds.IntMap.T"/>
		</implements>
		<set public="1" set="method">
			<f a="key:value">
				<x path="Int"/>
				<c path="haxe.ds.IntMap.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" set="method">
			<f a="key">
				<x path="Int"/>
				<x path="Null"><c path="haxe.ds.IntMap.T"/></x>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" set="method">
			<f a="key">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method">
			<f a="key">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" set="method">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>See `Map.keys`

		(cs, java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</keys>
		<iterator public="1" set="method">
			<f a=""><t path="Iterator"><c path="haxe.ds.IntMap.T"/></t></f>
			<haxe_doc>See `Map.iterator`

		(cs, java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" set="method">
			<f a=""><t path="KeyValueIterator">
	<x path="Int"/>
	<c path="haxe.ds.IntMap.T"/>
</t></f>
			<haxe_doc>See `Map.keyValueIterator`</haxe_doc>
		</keyValueIterator>
		<copy public="1" set="method">
			<f a=""><c path="haxe.ds.IntMap"><c path="haxe.ds.IntMap.T"/></c></f>
			<haxe_doc>See `Map.copy`</haxe_doc>
		</copy>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>See `Map.clear`</haxe_doc>
		</clear>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new IntMap.</haxe_doc>
		</new>
		<haxe_doc>IntMap allows mapping of Int keys to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
	</class>
	<abstract path="haxe.ds.Map" params="K:V" file="/usr/local/lib/haxe/std/haxe/ds/Map.hx">
		<from>
			<icast field="fromStringMap"><c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c></icast>
			<icast field="fromIntMap"><c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c></icast>
			<icast field="fromObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="fromObjectMap.K"/>
	<c path="fromObjectMap.V"/>
</c></icast>
		</from>
		<this><c path="haxe.IMap">
	<c path="haxe.ds.Map.K"/>
	<c path="haxe.ds.Map.V"/>
</c></this>
		<to>
			<icast field="toStringMap"><c path="haxe.ds.StringMap"><c path="toStringMap.V"/></c></icast>
			<icast field="toIntMap"><c path="haxe.ds.IntMap"><c path="toIntMap.V"/></c></icast>
			<icast field="toEnumValueMapMap"><c path="haxe.ds.EnumValueMap">
	<c path="toEnumValueMapMap.K"/>
	<c path="toEnumValueMapMap.V"/>
</c></icast>
			<icast field="toObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="toObjectMap.K"/>
	<c path="toObjectMap.V"/>
</c></icast>
		</to>
		<haxe_doc><![CDATA[Map allows key to value mapping for arbitrary value types, and many key
	types.

	This is a multi-type abstract, it is instantiated as one of its
	specialization types depending on its type parameters.

	A Map can be instantiated without explicit type parameters. Type inference
	will then determine the type parameters from the usage.

	Maps can also be created with `[key1 => value1, key2 => value2]` syntax.

	Map is an abstract type, it is not available at runtime.

	@see https://haxe.org/manual/std-Map.html]]></haxe_doc>
		<meta><m n=":multiType"><e>@:followWithAbstracts K</e></m></meta>
		<impl><class path="haxe.ds._Map.Map_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/ds/Map.hx" private="1" module="haxe.ds.Map" final="1">
	<_new public="1" set="method" static="1">
		<f a=""><x path="haxe.ds.Map">
	<c path="haxe.ds.Map.K"/>
	<c path="haxe.ds.Map.V"/>
</x></f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
		<haxe_doc>Creates a new Map.

		This becomes a constructor call to one of the specialization types in
		the output. The rules for that are as follows:

		1. if `K` is a `String`, `haxe.ds.StringMap` is used
		2. if `K` is an `Int`, `haxe.ds.IntMap` is used
		3. if `K` is an `EnumValue`, `haxe.ds.EnumValueMap` is used
		4. if `K` is any other class or structure, `haxe.ds.ObjectMap` is used
		5. if `K` is any other type, it causes a compile-time error

		(Cpp) Map does not use weak keys on `ObjectMap` by default.</haxe_doc>
	</_new>
	<meta><m n=":keep"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.ds._Map.Map_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/ds/Map.hx" private="1" module="haxe.ds.Map" final="1">
		<_new public="1" set="method" static="1">
			<f a=""><x path="haxe.ds.Map">
	<c path="haxe.ds.Map.K"/>
	<c path="haxe.ds.Map.V"/>
</x></f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
			<haxe_doc>Creates a new Map.

		This becomes a constructor call to one of the specialization types in
		the output. The rules for that are as follows:

		1. if `K` is a `String`, `haxe.ds.StringMap` is used
		2. if `K` is an `Int`, `haxe.ds.IntMap` is used
		3. if `K` is an `EnumValue`, `haxe.ds.EnumValueMap` is used
		4. if `K` is any other class or structure, `haxe.ds.ObjectMap` is used
		5. if `K` is any other type, it causes a compile-time error

		(Cpp) Map does not use weak keys on `ObjectMap` by default.</haxe_doc>
		</_new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.ds.ObjectMap" params="K:V" file="/usr/local/lib/haxe/std/haxe/ds/ObjectMap.hx" extern="1">
		<implements path="haxe.IMap">
			<c path="haxe.ds.ObjectMap.K"/>
			<c path="haxe.ds.ObjectMap.V"/>
		</implements>
		<set public="1" set="method">
			<f a="key:value">
				<c path="haxe.ds.ObjectMap.K"/>
				<c path="haxe.ds.ObjectMap.V"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" set="method">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<x path="Null"><c path="haxe.ds.ObjectMap.V"/></x>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" set="method">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" set="method">
			<f a=""><t path="Iterator"><c path="haxe.ds.ObjectMap.K"/></t></f>
			<haxe_doc>See `Map.keys`

		(cs, java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</keys>
		<iterator public="1" set="method">
			<f a=""><t path="Iterator"><c path="haxe.ds.ObjectMap.V"/></t></f>
			<haxe_doc>See `Map.iterator`

		(cs, java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" set="method">
			<f a=""><t path="KeyValueIterator">
	<c path="haxe.ds.ObjectMap.K"/>
	<c path="haxe.ds.ObjectMap.V"/>
</t></f>
			<haxe_doc>See `Map.keyValueIterator`</haxe_doc>
		</keyValueIterator>
		<copy public="1" set="method">
			<f a=""><c path="haxe.ds.ObjectMap">
	<c path="haxe.ds.ObjectMap.K"/>
	<c path="haxe.ds.ObjectMap.V"/>
</c></f>
			<haxe_doc>See `Map.copy`</haxe_doc>
		</copy>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>See `Map.clear`</haxe_doc>
		</clear>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new ObjectMap.</haxe_doc>
		</new>
		<haxe_doc>ObjectMap allows mapping of object keys to arbitrary values.

	On static targets, the keys are considered to be strong references. Refer
	to `haxe.ds.WeakMap` for a weak reference version.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
	</class>
	<abstract path="haxe.ds.ReadOnlyArray" params="T" file="/usr/local/lib/haxe/std/haxe/ds/ReadOnlyArray.hx">
		<from><icast><c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c></icast></from>
		<this><c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c></this>
		<to><icast><t path="Iterable"><c path="haxe.ds.ReadOnlyArray.T"/></t></icast></to>
		<haxe_doc>`ReadOnlyArray` is an abstract over an ordinary `Array` which only exposes
	APIs that don't modify the instance, hence "read-only".

	Note that this doesn't necessarily mean that the instance is *immutable*.
	Other code holding a reference to the underlying `Array` can still modify it,
	and the reference can be obtained with a `cast`.</haxe_doc>
		<meta><m n=":forward">
	<e>concat</e>
	<e>copy</e>
	<e>filter</e>
	<e>indexOf</e>
	<e>iterator</e>
	<e>keyValueIterator</e>
	<e>join</e>
	<e>lastIndexOf</e>
	<e>map</e>
	<e>slice</e>
	<e>contains</e>
	<e>toString</e>
</m></meta>
		<impl><class path="haxe.ds._ReadOnlyArray.ReadOnlyArray_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/ds/ReadOnlyArray.hx" private="1" module="haxe.ds.ReadOnlyArray" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.ds.StringMap" params="T" file="/usr/local/lib/haxe/std/haxe/ds/StringMap.hx" extern="1">
		<implements path="haxe.IMap">
			<c path="String"/>
			<c path="haxe.ds.StringMap.T"/>
		</implements>
		<set public="1" set="method">
			<f a="key:value">
				<c path="String"/>
				<c path="haxe.ds.StringMap.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" set="method">
			<f a="key">
				<c path="String"/>
				<x path="Null"><c path="haxe.ds.StringMap.T"/></x>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" set="method">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" set="method">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<haxe_doc>See `Map.keys`

		(cs, java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</keys>
		<iterator public="1" set="method">
			<f a=""><t path="Iterator"><c path="haxe.ds.StringMap.T"/></t></f>
			<haxe_doc>See `Map.iterator`

		(cs, java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" set="method">
			<f a=""><t path="KeyValueIterator">
	<c path="String"/>
	<c path="haxe.ds.StringMap.T"/>
</t></f>
			<haxe_doc>See `Map.keyValueIterator`</haxe_doc>
		</keyValueIterator>
		<copy public="1" set="method">
			<f a=""><c path="haxe.ds.StringMap"><c path="haxe.ds.StringMap.T"/></c></f>
			<haxe_doc>See `Map.copy`</haxe_doc>
		</copy>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>See `Map.clear`</haxe_doc>
		</clear>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringMap.</haxe_doc>
		</new>
		<haxe_doc>StringMap allows mapping of String keys to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
	</class>
	<typedef path="haxe.ds._Vector.VectorData" params="T" file="/usr/local/lib/haxe/std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector"><c path="Array"><c path="haxe.ds._Vector.VectorData.T"/></c></typedef>
	<abstract path="haxe.ds.Vector" params="T" file="/usr/local/lib/haxe/std/haxe/ds/Vector.hx">
		<this><t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t></this>
		<haxe_doc>A Vector is a storage of fixed size. It can be faster than Array on some
	targets, and is never slower.

	@see https://haxe.org/manual/std-vector.html</haxe_doc>
		<impl><class path="haxe.ds._Vector.Vector_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<typedef path="haxe.io.BytesData" params="" file="/usr/local/lib/haxe/std/haxe/io/BytesData.hx"><c path="Array"><x path="Int"/></c></typedef>
	<class path="haxe.iterators.ArrayIterator" params="T" file="/usr/local/lib/haxe/std/haxe/iterators/ArrayIterator.hx">
		<array final="1"><c path="Array"><c path="haxe.iterators.ArrayIterator.T"/></c></array>
		<current expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</current>
		<hasNext public="1" get="inline" set="null" line="43">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `Iterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="51">
			<f a=""><c path="haxe.iterators.ArrayIterator.T"/></f>
			<haxe_doc>See `Iterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="35">
			<f a="array">
				<c path="Array"><c path="haxe.iterators.ArrayIterator.T"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new `ArrayIterator`.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[This iterator is used only when `Array<T>` is passed to `Iterable<T>`]]></haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="sys.io.File" params="" file="/usr/local/lib/haxe/std/sys/io/File.hx" extern="1">
		<getContent public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Retrieves the content of the file specified by `path` as a String.

		If the file does not exist or can not be read, an exception is thrown.

		`sys.FileSystem.exists` can be used to check for existence.

		If `path` is null, the result is unspecified.</haxe_doc>
		</getContent>
		<saveContent public="1" set="method" static="1">
			<f a="path:content">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores `content` in the file specified by `path`.

		If the file cannot be written to, an exception is thrown.

		If `path` or `content` are null, the result is unspecified.</haxe_doc>
		</saveContent>
		<getBytes public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Retrieves the binary content of the file specified by `path`.

		If the file does not exist or can not be read, an exception is thrown.

		`sys.FileSystem.exists` can be used to check for existence.

		If `path` is null, the result is unspecified.</haxe_doc>
		</getBytes>
		<saveBytes public="1" set="method" static="1">
			<f a="path:bytes">
				<c path="String"/>
				<c path="haxe.io.Bytes"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores `bytes` in the file specified by `path` in binary mode.

		If the file cannot be written to, an exception is thrown.

		If `path` or `bytes` are null, the result is unspecified.</haxe_doc>
		</saveBytes>
		<read public="1" set="method" static="1">
			<f a="path:?binary" v=":true">
				<c path="String"/>
				<x path="Bool"/>
				<c path="sys.io.FileInput"/>
			</f>
			<meta><m n=":value"><e>{ binary : true }</e></m></meta>
			<haxe_doc>Returns an `FileInput` handle to the file specified by `path`.

		If `binary` is true, the file is opened in binary mode. Otherwise it is
		opened in non-binary mode.

		If the file does not exist or can not be read, an exception is thrown.

		Operations on the returned `FileInput` handle read on the opened file.

		File handles should be closed via `FileInput.close` once the operation
		is complete.

		If `path` is null, the result is unspecified.</haxe_doc>
		</read>
		<write public="1" set="method" static="1">
			<f a="path:?binary" v=":true">
				<c path="String"/>
				<x path="Bool"/>
				<c path="sys.io.FileOutput"/>
			</f>
			<meta><m n=":value"><e>{ binary : true }</e></m></meta>
			<haxe_doc>Returns an `FileOutput` handle to the file specified by `path`.

		If `binary` is true, the file is opened in binary mode. Otherwise it is
		opened in non-binary mode.

		If the file cannot be written to, an exception is thrown.

		Operations on the returned `FileOutput` handle write to the opened file.
		If the file existed, its previous content is overwritten.

		File handles should be closed via `FileOutput.close` once the operation
		is complete.

		If `path` is null, the result is unspecified.</haxe_doc>
		</write>
		<append public="1" set="method" static="1">
			<f a="path:?binary" v=":true">
				<c path="String"/>
				<x path="Bool"/>
				<c path="sys.io.FileOutput"/>
			</f>
			<meta><m n=":value"><e>{ binary : true }</e></m></meta>
			<haxe_doc>Similar to `sys.io.File.write`, but appends to the file if it exists
		instead of overwriting its contents.</haxe_doc>
		</append>
		<update public="1" set="method" static="1">
			<f a="path:?binary" v=":true">
				<c path="String"/>
				<x path="Bool"/>
				<c path="sys.io.FileOutput"/>
			</f>
			<meta><m n=":value"><e>{ binary : true }</e></m></meta>
			<haxe_doc>Similar to `sys.io.File.append`. While `append` can only seek or write
		starting from the end of the file's previous contents, `update` can
		seek to any position, so the file's previous contents can be
		selectively overwritten.</haxe_doc>
		</update>
		<copy public="1" set="method" static="1">
			<f a="srcPath:dstPath">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies the contents of the file specified by `srcPath` to the file
		specified by `dstPath`.

		If the `srcPath` does not exist or cannot be read, or if the `dstPath`
		file cannot be written to, an exception is thrown.

		If the file at `dstPath` exists, its contents are overwritten.

		If `srcPath` or `dstPath` are null, the result is unspecified.</haxe_doc>
		</copy>
		<haxe_doc>API for reading and writing files.

	See `sys.FileSystem` for the complementary file system API.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="sys.io.FileInput" params="" file="/usr/local/lib/haxe/std/sys/io/FileInput.hx" extern="1">
		<extends path="haxe.io.Input"/>
		<seek public="1" set="method"><f a="p:pos">
	<x path="Int"/>
	<e path="sys.io.FileSeek"/>
	<x path="Void"/>
</f></seek>
		<tell public="1" set="method"><f a=""><x path="Int"/></f></tell>
		<eof public="1" set="method"><f a=""><x path="Bool"/></f></eof>
		<haxe_doc>Use `sys.io.File.read` to create a `FileInput`.</haxe_doc>
	</class>
	<class path="sys.io.FileOutput" params="" file="/usr/local/lib/haxe/std/sys/io/FileOutput.hx" extern="1">
		<extends path="haxe.io.Output"/>
		<seek public="1" set="method"><f a="p:pos">
	<x path="Int"/>
	<e path="sys.io.FileSeek"/>
	<x path="Void"/>
</f></seek>
		<tell public="1" set="method"><f a=""><x path="Int"/></f></tell>
		<haxe_doc>Use `sys.io.File.write` to create a `FileOutput`.</haxe_doc>
	</class>
</haxe>