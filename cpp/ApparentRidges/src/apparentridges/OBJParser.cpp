// Generated by Haxe 4.1.3
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_apparentridges_Mesh
#include <apparentridges/Mesh.h>
#endif
#ifndef INCLUDED_apparentridges_OBJParser
#include <apparentridges/OBJParser.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_c5c6261023f597c7_1319_fromFile,"apparentridges.OBJParser","fromFile",0x72be76ab,"apparentridges.OBJParser.fromFile","apparentridges/ApparentRidges.hx",1319,0xfeacc84f)
HX_LOCAL_STACK_FRAME(_hx_pos_c5c6261023f597c7_1322_fromString,"apparentridges.OBJParser","fromString",0x04507ac0,"apparentridges.OBJParser.fromString","apparentridges/ApparentRidges.hx",1322,0xfeacc84f)
namespace apparentridges{

void OBJParser_obj::__construct() { }

Dynamic OBJParser_obj::__CreateEmpty() { return new OBJParser_obj; }

void *OBJParser_obj::_hx_vtable = 0;

Dynamic OBJParser_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< OBJParser_obj > _hx_result = new OBJParser_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool OBJParser_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x01c3ae35;
}

 ::apparentridges::Mesh OBJParser_obj::fromFile(::String path){
            	HX_STACKFRAME(&_hx_pos_c5c6261023f597c7_1319_fromFile)
HXDLIN(1319)		return ::apparentridges::OBJParser_obj::fromString(::sys::io::File_obj::getContent(path));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(OBJParser_obj,fromFile,return )

 ::apparentridges::Mesh OBJParser_obj::fromString(::String str){
            	HX_GC_STACKFRAME(&_hx_pos_c5c6261023f597c7_1322_fromString)
HXLINE(1323)		 ::apparentridges::Mesh mesh =  ::apparentridges::Mesh_obj::__alloc( HX_CTX );
HXLINE(1324)		mesh->vertices = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1325)		mesh->faces = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1327)		::Array< ::String > lines = str.split(HX_("\n",0a,00,00,00));
HXLINE(1328)		{
HXLINE(1328)			int _g = 0;
HXDLIN(1328)			int _g1 = lines->length;
HXDLIN(1328)			while((_g < _g1)){
HXLINE(1328)				_g = (_g + 1);
HXDLIN(1328)				int i = (_g - 1);
HXLINE(1329)				lines[i] = ::StringTools_obj::trim(lines->__get(i));
HXLINE(1330)				if ((lines->__get(i).charAt(0) == HX_("#",23,00,00,00))) {
HXLINE(1331)					continue;
            				}
HXLINE(1333)				if ((lines->__get(i).length <= 2)) {
HXLINE(1334)					continue;
            				}
HXLINE(1336)				::Array< ::String > tok = lines->__get(i).split(HX_(" ",20,00,00,00));
HXLINE(1337)				::String cmd = tok->__get(0);
HXLINE(1338)				if ((cmd == HX_("v",76,00,00,00))) {
HXLINE(1339)					Float _x = ::Std_obj::parseFloat(tok->__get(1));
HXDLIN(1339)					Float _y = ::Std_obj::parseFloat(tok->__get(2));
HXDLIN(1339)					Float _z = ::Std_obj::parseFloat(tok->__get(3));
HXDLIN(1339)					::Array< Float > this1 = ::Array_obj< Float >::__new(3);
HXDLIN(1339)					::Array< Float > this2 = this1;
HXDLIN(1339)					this2->__unsafe_set(0,_x);
HXDLIN(1339)					this2->__unsafe_set(1,_y);
HXDLIN(1339)					this2->__unsafe_set(2,_z);
HXDLIN(1339)					::Array< Float > v = this2;
HXLINE(1344)					mesh->vertices->push(v);
            				}
            				else {
HXLINE(1345)					if ((cmd == HX_("f",66,00,00,00))) {
HXLINE(1346)						int a = ( (int)(::Std_obj::parseInt(tok->__get(1).split(HX_("/",2f,00,00,00))->__get(0))) );
HXLINE(1347)						int b = ( (int)(::Std_obj::parseInt(tok->__get(2).split(HX_("/",2f,00,00,00))->__get(0))) );
HXLINE(1348)						int c = ( (int)(::Std_obj::parseInt(tok->__get(3).split(HX_("/",2f,00,00,00))->__get(0))) );
HXLINE(1349)						int nv = mesh->vertices->length;
HXLINE(1350)						::Array< ::Dynamic> mesh1 = mesh->faces;
HXDLIN(1350)						::Array< int > this1 = ::Array_obj< int >::__new(3);
HXDLIN(1350)						::Array< int > this2 = this1;
HXLINE(1351)						int _hx_tmp;
HXDLIN(1351)						if ((a < 0)) {
HXLINE(1351)							_hx_tmp = (nv + a);
            						}
            						else {
HXLINE(1351)							_hx_tmp = (a - 1);
            						}
HXLINE(1350)						this2->__unsafe_set(0,_hx_tmp);
HXLINE(1352)						int _hx_tmp1;
HXDLIN(1352)						if ((b < 0)) {
HXLINE(1352)							_hx_tmp1 = (nv + b);
            						}
            						else {
HXLINE(1352)							_hx_tmp1 = (b - 1);
            						}
HXLINE(1350)						this2->__unsafe_set(1,_hx_tmp1);
HXLINE(1353)						int _hx_tmp2;
HXDLIN(1353)						if ((c < 0)) {
HXLINE(1353)							_hx_tmp2 = (nv + c);
            						}
            						else {
HXLINE(1353)							_hx_tmp2 = (c - 1);
            						}
HXLINE(1350)						this2->__unsafe_set(2,_hx_tmp2);
HXDLIN(1350)						mesh1->push(this2);
            					}
            				}
            			}
            		}
HXLINE(1357)		return mesh;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(OBJParser_obj,fromString,return )


OBJParser_obj::OBJParser_obj()
{
}

bool OBJParser_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"fromFile") ) { outValue = fromFile_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fromString") ) { outValue = fromString_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *OBJParser_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *OBJParser_obj_sStaticStorageInfo = 0;
#endif

::hx::Class OBJParser_obj::__mClass;

static ::String OBJParser_obj_sStaticFields[] = {
	HX_("fromFile",06,9d,87,a1),
	HX_("fromString",db,2d,74,54),
	::String(null())
};

void OBJParser_obj::__register()
{
	OBJParser_obj _hx_dummy;
	OBJParser_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("apparentridges.OBJParser",69,4f,53,2d);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &OBJParser_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(OBJParser_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< OBJParser_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = OBJParser_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = OBJParser_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace apparentridges
