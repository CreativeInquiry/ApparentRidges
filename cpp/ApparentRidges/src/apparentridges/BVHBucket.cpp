// Generated by Haxe 4.1.3
#include <hxcpp.h>

#ifndef INCLUDED_apparentridges_BBox
#include <apparentridges/BBox.h>
#endif
#ifndef INCLUDED_apparentridges_BVHBucket
#include <apparentridges/BVHBucket.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a553672bb1b8bb8d_1289_new,"apparentridges.BVHBucket","new",0x1bdd1c43,"apparentridges.BVHBucket.new","apparentridges/ApparentRidges.hx",1289,0xfeacc84f)
namespace apparentridges{

void BVHBucket_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_a553672bb1b8bb8d_1289_new)
HXLINE(1290)		this->bbox =  ::apparentridges::BBox_obj::__alloc( HX_CTX );
HXLINE(1291)		this->area = ( (Float)(0) );
HXLINE(1292)		this->count = 0;
            	}

Dynamic BVHBucket_obj::__CreateEmpty() { return new BVHBucket_obj; }

void *BVHBucket_obj::_hx_vtable = 0;

Dynamic BVHBucket_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< BVHBucket_obj > _hx_result = new BVHBucket_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool BVHBucket_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x515b9d9d;
}


::hx::ObjectPtr< BVHBucket_obj > BVHBucket_obj::__new() {
	::hx::ObjectPtr< BVHBucket_obj > __this = new BVHBucket_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< BVHBucket_obj > BVHBucket_obj::__alloc(::hx::Ctx *_hx_ctx) {
	BVHBucket_obj *__this = (BVHBucket_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(BVHBucket_obj), true, "apparentridges.BVHBucket"));
	*(void **)__this = BVHBucket_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

BVHBucket_obj::BVHBucket_obj()
{
}

void BVHBucket_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BVHBucket);
	HX_MARK_MEMBER_NAME(min,"min");
	HX_MARK_MEMBER_NAME(max,"max");
	HX_MARK_MEMBER_NAME(count,"count");
	HX_MARK_MEMBER_NAME(area,"area");
	HX_MARK_MEMBER_NAME(bbox,"bbox");
	HX_MARK_END_CLASS();
}

void BVHBucket_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(min,"min");
	HX_VISIT_MEMBER_NAME(max,"max");
	HX_VISIT_MEMBER_NAME(count,"count");
	HX_VISIT_MEMBER_NAME(area,"area");
	HX_VISIT_MEMBER_NAME(bbox,"bbox");
}

::hx::Val BVHBucket_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"min") ) { return ::hx::Val( min ); }
		if (HX_FIELD_EQ(inName,"max") ) { return ::hx::Val( max ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"area") ) { return ::hx::Val( area ); }
		if (HX_FIELD_EQ(inName,"bbox") ) { return ::hx::Val( bbox ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"count") ) { return ::hx::Val( count ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val BVHBucket_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"min") ) { min=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"max") ) { max=inValue.Cast< Float >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"area") ) { area=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bbox") ) { bbox=inValue.Cast<  ::apparentridges::BBox >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"count") ) { count=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void BVHBucket_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("min",92,11,53,00));
	outFields->push(HX_("max",a4,0a,53,00));
	outFields->push(HX_("count",cf,44,63,4a));
	outFields->push(HX_("area",8d,8b,74,40));
	outFields->push(HX_("bbox",e9,a6,11,41));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo BVHBucket_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(BVHBucket_obj,min),HX_("min",92,11,53,00)},
	{::hx::fsFloat,(int)offsetof(BVHBucket_obj,max),HX_("max",a4,0a,53,00)},
	{::hx::fsInt,(int)offsetof(BVHBucket_obj,count),HX_("count",cf,44,63,4a)},
	{::hx::fsFloat,(int)offsetof(BVHBucket_obj,area),HX_("area",8d,8b,74,40)},
	{::hx::fsObject /*  ::apparentridges::BBox */ ,(int)offsetof(BVHBucket_obj,bbox),HX_("bbox",e9,a6,11,41)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *BVHBucket_obj_sStaticStorageInfo = 0;
#endif

static ::String BVHBucket_obj_sMemberFields[] = {
	HX_("min",92,11,53,00),
	HX_("max",a4,0a,53,00),
	HX_("count",cf,44,63,4a),
	HX_("area",8d,8b,74,40),
	HX_("bbox",e9,a6,11,41),
	::String(null()) };

::hx::Class BVHBucket_obj::__mClass;

void BVHBucket_obj::__register()
{
	BVHBucket_obj _hx_dummy;
	BVHBucket_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("apparentridges.BVHBucket",d1,3e,eb,7c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(BVHBucket_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< BVHBucket_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BVHBucket_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BVHBucket_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace apparentridges
