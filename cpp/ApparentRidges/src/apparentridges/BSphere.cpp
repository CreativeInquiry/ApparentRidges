// Generated by Haxe 4.1.3
#include <hxcpp.h>

#ifndef INCLUDED_apparentridges_BSphere
#include <apparentridges/BSphere.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_962a22343921ddc2_307_new,"apparentridges.BSphere","new",0xfce7d774,"apparentridges.BSphere.new","apparentridges/ApparentRidges.hx",307,0xfeacc84f)
namespace apparentridges{

void BSphere_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_962a22343921ddc2_307_new)
            	}

Dynamic BSphere_obj::__CreateEmpty() { return new BSphere_obj; }

void *BSphere_obj::_hx_vtable = 0;

Dynamic BSphere_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< BSphere_obj > _hx_result = new BSphere_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool BSphere_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0f7cec6a;
}


BSphere_obj::BSphere_obj()
{
}

void BSphere_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BSphere);
	HX_MARK_MEMBER_NAME(r,"r");
	HX_MARK_MEMBER_NAME(o,"o");
	HX_MARK_END_CLASS();
}

void BSphere_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(r,"r");
	HX_VISIT_MEMBER_NAME(o,"o");
}

::hx::Val BSphere_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"r") ) { return ::hx::Val( r ); }
		if (HX_FIELD_EQ(inName,"o") ) { return ::hx::Val( o ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val BSphere_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"r") ) { r=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"o") ) { o=inValue.Cast< ::Array< Float > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void BSphere_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("r",72,00,00,00));
	outFields->push(HX_("o",6f,00,00,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo BSphere_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(BSphere_obj,r),HX_("r",72,00,00,00)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(BSphere_obj,o),HX_("o",6f,00,00,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *BSphere_obj_sStaticStorageInfo = 0;
#endif

static ::String BSphere_obj_sMemberFields[] = {
	HX_("r",72,00,00,00),
	HX_("o",6f,00,00,00),
	::String(null()) };

::hx::Class BSphere_obj::__mClass;

void BSphere_obj::__register()
{
	BSphere_obj _hx_dummy;
	BSphere_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("apparentridges.BSphere",82,4d,6a,ac);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(BSphere_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< BSphere_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BSphere_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BSphere_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace apparentridges
