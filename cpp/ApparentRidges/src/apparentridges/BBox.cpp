// Generated by Haxe 4.1.3
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_apparentridges_BBox
#include <apparentridges/BBox.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a3976ace4254975c_1116_new,"apparentridges.BBox","new",0x195cc868,"apparentridges.BBox.new","apparentridges/ApparentRidges.hx",1116,0xfeacc84f)
HX_LOCAL_STACK_FRAME(_hx_pos_a3976ace4254975c_1121_centroid,"apparentridges.BBox","centroid",0x7634cb38,"apparentridges.BBox.centroid","apparentridges/ApparentRidges.hx",1121,0xfeacc84f)
HX_LOCAL_STACK_FRAME(_hx_pos_a3976ace4254975c_1123_add,"apparentridges.BBox","add",0x1952ea29,"apparentridges.BBox.add","apparentridges/ApparentRidges.hx",1123,0xfeacc84f)
HX_LOCAL_STACK_FRAME(_hx_pos_a3976ace4254975c_1131_merge,"apparentridges.BBox","merge",0x2d03acc0,"apparentridges.BBox.merge","apparentridges/ApparentRidges.hx",1131,0xfeacc84f)
HX_LOCAL_STACK_FRAME(_hx_pos_a3976ace4254975c_1139_surfaceArea,"apparentridges.BBox","surfaceArea",0xff967862,"apparentridges.BBox.surfaceArea","apparentridges/ApparentRidges.hx",1139,0xfeacc84f)
namespace apparentridges{

void BBox_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_a3976ace4254975c_1116_new)
HXLINE(1117)		Float _x = ::Math_obj::POSITIVE_INFINITY;
HXDLIN(1117)		Float _y = ::Math_obj::POSITIVE_INFINITY;
HXDLIN(1117)		Float _z = ::Math_obj::POSITIVE_INFINITY;
HXDLIN(1117)		::Array< Float > this1 = ::Array_obj< Float >::__new(3);
HXDLIN(1117)		::Array< Float > this2 = this1;
HXDLIN(1117)		this2->__unsafe_set(0,_x);
HXDLIN(1117)		this2->__unsafe_set(1,_y);
HXDLIN(1117)		this2->__unsafe_set(2,_z);
HXDLIN(1117)		this->min = this2;
HXLINE(1118)		Float _x1 = ::Math_obj::NEGATIVE_INFINITY;
HXDLIN(1118)		Float _y1 = ::Math_obj::NEGATIVE_INFINITY;
HXDLIN(1118)		Float _z1 = ::Math_obj::NEGATIVE_INFINITY;
HXDLIN(1118)		::Array< Float > this3 = ::Array_obj< Float >::__new(3);
HXDLIN(1118)		::Array< Float > this4 = this3;
HXDLIN(1118)		this4->__unsafe_set(0,_x1);
HXDLIN(1118)		this4->__unsafe_set(1,_y1);
HXDLIN(1118)		this4->__unsafe_set(2,_z1);
HXDLIN(1118)		this->max = this4;
            	}

Dynamic BBox_obj::__CreateEmpty() { return new BBox_obj; }

void *BBox_obj::_hx_vtable = 0;

Dynamic BBox_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< BBox_obj > _hx_result = new BBox_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool BBox_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4272c92a;
}

::Array< Float > BBox_obj::centroid(){
            	HX_STACKFRAME(&_hx_pos_a3976ace4254975c_1121_centroid)
HXDLIN(1121)		::Array< Float > this1 = this->min;
HXDLIN(1121)		::Array< Float > rhs = this->max;
HXDLIN(1121)		Float _x = ( (Float)(_hx_array_unsafe_get(this1,0)) );
HXDLIN(1121)		Float _x1 = (_x + ( (Float)(_hx_array_unsafe_get(rhs,0)) ));
HXDLIN(1121)		Float _y = ( (Float)(_hx_array_unsafe_get(this1,1)) );
HXDLIN(1121)		Float _y1 = (_y + ( (Float)(_hx_array_unsafe_get(rhs,1)) ));
HXDLIN(1121)		Float _z = ( (Float)(_hx_array_unsafe_get(this1,2)) );
HXDLIN(1121)		Float _z1 = (_z + ( (Float)(_hx_array_unsafe_get(rhs,2)) ));
HXDLIN(1121)		::Array< Float > this2 = ::Array_obj< Float >::__new(3);
HXDLIN(1121)		::Array< Float > this3 = this2;
HXDLIN(1121)		this3->__unsafe_set(0,_x1);
HXDLIN(1121)		this3->__unsafe_set(1,_y1);
HXDLIN(1121)		this3->__unsafe_set(2,_z1);
HXDLIN(1121)		::Array< Float > this4 = this3;
HXDLIN(1121)		Float _x2 = (( (Float)(_hx_array_unsafe_get(this4,0)) ) * ((Float)0.5));
HXDLIN(1121)		Float _y2 = (( (Float)(_hx_array_unsafe_get(this4,1)) ) * ((Float)0.5));
HXDLIN(1121)		Float _z2 = (( (Float)(_hx_array_unsafe_get(this4,2)) ) * ((Float)0.5));
HXDLIN(1121)		::Array< Float > this5 = ::Array_obj< Float >::__new(3);
HXDLIN(1121)		::Array< Float > this6 = this5;
HXDLIN(1121)		this6->__unsafe_set(0,_x2);
HXDLIN(1121)		this6->__unsafe_set(1,_y2);
HXDLIN(1121)		this6->__unsafe_set(2,_z2);
HXDLIN(1121)		return this6;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BBox_obj,centroid,return )

void BBox_obj::add(::Array< Float > p){
            	HX_STACKFRAME(&_hx_pos_a3976ace4254975c_1123_add)
HXLINE(1124)		{
HXLINE(1124)			::Array< Float > this1 = this->min;
HXDLIN(1124)			Float v = ( (Float)(_hx_array_unsafe_get(this->min,0)) );
HXDLIN(1124)			Float v1 = ::Math_obj::min(v,( (Float)(_hx_array_unsafe_get(p,0)) ));
HXDLIN(1124)			this1->__unsafe_set(0,v1);
            		}
HXLINE(1125)		{
HXLINE(1125)			::Array< Float > this2 = this->min;
HXDLIN(1125)			Float v2 = ( (Float)(_hx_array_unsafe_get(this->min,1)) );
HXDLIN(1125)			Float v3 = ::Math_obj::min(v2,( (Float)(_hx_array_unsafe_get(p,1)) ));
HXDLIN(1125)			this2->__unsafe_set(1,v3);
            		}
HXLINE(1126)		{
HXLINE(1126)			::Array< Float > this3 = this->min;
HXDLIN(1126)			Float v4 = ( (Float)(_hx_array_unsafe_get(this->min,2)) );
HXDLIN(1126)			Float v5 = ::Math_obj::min(v4,( (Float)(_hx_array_unsafe_get(p,2)) ));
HXDLIN(1126)			this3->__unsafe_set(2,v5);
            		}
HXLINE(1127)		{
HXLINE(1127)			::Array< Float > this4 = this->max;
HXDLIN(1127)			Float v6 = ( (Float)(_hx_array_unsafe_get(this->max,0)) );
HXDLIN(1127)			Float v7 = ::Math_obj::max(v6,( (Float)(_hx_array_unsafe_get(p,0)) ));
HXDLIN(1127)			this4->__unsafe_set(0,v7);
            		}
HXLINE(1128)		{
HXLINE(1128)			::Array< Float > this5 = this->max;
HXDLIN(1128)			Float v8 = ( (Float)(_hx_array_unsafe_get(this->max,1)) );
HXDLIN(1128)			Float v9 = ::Math_obj::max(v8,( (Float)(_hx_array_unsafe_get(p,1)) ));
HXDLIN(1128)			this5->__unsafe_set(1,v9);
            		}
HXLINE(1129)		{
HXLINE(1129)			::Array< Float > this6 = this->max;
HXDLIN(1129)			Float v10 = ( (Float)(_hx_array_unsafe_get(this->max,2)) );
HXDLIN(1129)			Float v11 = ::Math_obj::max(v10,( (Float)(_hx_array_unsafe_get(p,2)) ));
HXDLIN(1129)			this6->__unsafe_set(2,v11);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(BBox_obj,add,(void))

void BBox_obj::merge( ::apparentridges::BBox bb){
            	HX_STACKFRAME(&_hx_pos_a3976ace4254975c_1131_merge)
HXLINE(1132)		{
HXLINE(1132)			::Array< Float > this1 = this->min;
HXDLIN(1132)			Float v = ( (Float)(_hx_array_unsafe_get(this->min,0)) );
HXDLIN(1132)			Float v1 = ::Math_obj::min(v,( (Float)(_hx_array_unsafe_get(bb->min,0)) ));
HXDLIN(1132)			this1->__unsafe_set(0,v1);
            		}
HXLINE(1133)		{
HXLINE(1133)			::Array< Float > this2 = this->min;
HXDLIN(1133)			Float v2 = ( (Float)(_hx_array_unsafe_get(this->min,1)) );
HXDLIN(1133)			Float v3 = ::Math_obj::min(v2,( (Float)(_hx_array_unsafe_get(bb->min,1)) ));
HXDLIN(1133)			this2->__unsafe_set(1,v3);
            		}
HXLINE(1134)		{
HXLINE(1134)			::Array< Float > this3 = this->min;
HXDLIN(1134)			Float v4 = ( (Float)(_hx_array_unsafe_get(this->min,2)) );
HXDLIN(1134)			Float v5 = ::Math_obj::min(v4,( (Float)(_hx_array_unsafe_get(bb->min,2)) ));
HXDLIN(1134)			this3->__unsafe_set(2,v5);
            		}
HXLINE(1135)		{
HXLINE(1135)			::Array< Float > this4 = this->max;
HXDLIN(1135)			Float v6 = ( (Float)(_hx_array_unsafe_get(this->max,0)) );
HXDLIN(1135)			Float v7 = ::Math_obj::max(v6,( (Float)(_hx_array_unsafe_get(bb->max,0)) ));
HXDLIN(1135)			this4->__unsafe_set(0,v7);
            		}
HXLINE(1136)		{
HXLINE(1136)			::Array< Float > this5 = this->max;
HXDLIN(1136)			Float v8 = ( (Float)(_hx_array_unsafe_get(this->max,1)) );
HXDLIN(1136)			Float v9 = ::Math_obj::max(v8,( (Float)(_hx_array_unsafe_get(bb->max,1)) ));
HXDLIN(1136)			this5->__unsafe_set(1,v9);
            		}
HXLINE(1137)		{
HXLINE(1137)			::Array< Float > this6 = this->max;
HXDLIN(1137)			Float v10 = ( (Float)(_hx_array_unsafe_get(this->max,2)) );
HXDLIN(1137)			Float v11 = ::Math_obj::max(v10,( (Float)(_hx_array_unsafe_get(bb->max,2)) ));
HXDLIN(1137)			this6->__unsafe_set(2,v11);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(BBox_obj,merge,(void))

Float BBox_obj::surfaceArea(){
            	HX_STACKFRAME(&_hx_pos_a3976ace4254975c_1139_surfaceArea)
HXLINE(1140)		::Array< Float > this1 = this->max;
HXDLIN(1140)		::Array< Float > rhs = this->min;
HXDLIN(1140)		Float _x = ( (Float)(_hx_array_unsafe_get(this1,0)) );
HXDLIN(1140)		Float _x1 = (_x - ( (Float)(_hx_array_unsafe_get(rhs,0)) ));
HXDLIN(1140)		Float _y = ( (Float)(_hx_array_unsafe_get(this1,1)) );
HXDLIN(1140)		Float _y1 = (_y - ( (Float)(_hx_array_unsafe_get(rhs,1)) ));
HXDLIN(1140)		Float _z = ( (Float)(_hx_array_unsafe_get(this1,2)) );
HXDLIN(1140)		Float _z1 = (_z - ( (Float)(_hx_array_unsafe_get(rhs,2)) ));
HXDLIN(1140)		::Array< Float > this2 = ::Array_obj< Float >::__new(3);
HXDLIN(1140)		::Array< Float > this3 = this2;
HXDLIN(1140)		this3->__unsafe_set(0,_x1);
HXDLIN(1140)		this3->__unsafe_set(1,_y1);
HXDLIN(1140)		this3->__unsafe_set(2,_z1);
HXDLIN(1140)		::Array< Float > extent = this3;
HXLINE(1141)		Float x = ::Math_obj::max(( (Float)(_hx_array_unsafe_get(extent,0)) ),( (Float)(0) ));
HXLINE(1142)		Float y = ::Math_obj::max(( (Float)(_hx_array_unsafe_get(extent,1)) ),( (Float)(0) ));
HXLINE(1143)		Float z = ::Math_obj::max(( (Float)(_hx_array_unsafe_get(extent,2)) ),( (Float)(0) ));
HXLINE(1144)		return (( (Float)(2) ) * (((x * z) + (x * y)) + (y * z)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(BBox_obj,surfaceArea,return )


::hx::ObjectPtr< BBox_obj > BBox_obj::__new() {
	::hx::ObjectPtr< BBox_obj > __this = new BBox_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< BBox_obj > BBox_obj::__alloc(::hx::Ctx *_hx_ctx) {
	BBox_obj *__this = (BBox_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(BBox_obj), true, "apparentridges.BBox"));
	*(void **)__this = BBox_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

BBox_obj::BBox_obj()
{
}

void BBox_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BBox);
	HX_MARK_MEMBER_NAME(min,"min");
	HX_MARK_MEMBER_NAME(max,"max");
	HX_MARK_END_CLASS();
}

void BBox_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(min,"min");
	HX_VISIT_MEMBER_NAME(max,"max");
}

::hx::Val BBox_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"min") ) { return ::hx::Val( min ); }
		if (HX_FIELD_EQ(inName,"max") ) { return ::hx::Val( max ); }
		if (HX_FIELD_EQ(inName,"add") ) { return ::hx::Val( add_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"merge") ) { return ::hx::Val( merge_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"centroid") ) { return ::hx::Val( centroid_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"surfaceArea") ) { return ::hx::Val( surfaceArea_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val BBox_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"min") ) { min=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"max") ) { max=inValue.Cast< ::Array< Float > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void BBox_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("min",92,11,53,00));
	outFields->push(HX_("max",a4,0a,53,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo BBox_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(BBox_obj,min),HX_("min",92,11,53,00)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(BBox_obj,max),HX_("max",a4,0a,53,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *BBox_obj_sStaticStorageInfo = 0;
#endif

static ::String BBox_obj_sMemberFields[] = {
	HX_("min",92,11,53,00),
	HX_("max",a4,0a,53,00),
	HX_("centroid",40,e0,e5,97),
	HX_("add",21,f2,49,00),
	HX_("merge",b8,a2,c6,05),
	HX_("surfaceArea",5a,38,4a,29),
	::String(null()) };

::hx::Class BBox_obj::__mClass;

void BBox_obj::__register()
{
	BBox_obj _hx_dummy;
	BBox_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("apparentridges.BBox",76,b4,ee,59);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(BBox_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< BBox_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BBox_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BBox_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace apparentridges
