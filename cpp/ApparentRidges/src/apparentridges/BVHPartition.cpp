// Generated by Haxe 4.1.3
#include <hxcpp.h>

#ifndef INCLUDED_apparentridges_BBox
#include <apparentridges/BBox.h>
#endif
#ifndef INCLUDED_apparentridges_BVHPartition
#include <apparentridges/BVHPartition.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b85f651ee9a2ab57_1296_new,"apparentridges.BVHPartition","new",0xde005055,"apparentridges.BVHPartition.new","apparentridges/ApparentRidges.hx",1296,0xfeacc84f)
namespace apparentridges{

void BVHPartition_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_b85f651ee9a2ab57_1296_new)
HXLINE(1305)		this->SAH = ((Float)0);
HXLINE(1302)		this->rightArea = ((Float)0);
HXLINE(1301)		this->leftArea = ((Float)0);
HXLINE(1300)		this->rightCount = 0;
HXLINE(1299)		this->leftCount = 0;
HXLINE(1307)		this->leftBBox =  ::apparentridges::BBox_obj::__alloc( HX_CTX );
HXLINE(1308)		this->rightBBox =  ::apparentridges::BBox_obj::__alloc( HX_CTX );
            	}

Dynamic BVHPartition_obj::__CreateEmpty() { return new BVHPartition_obj; }

void *BVHPartition_obj::_hx_vtable = 0;

Dynamic BVHPartition_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< BVHPartition_obj > _hx_result = new BVHPartition_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool BVHPartition_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4ff06a97;
}


::hx::ObjectPtr< BVHPartition_obj > BVHPartition_obj::__new() {
	::hx::ObjectPtr< BVHPartition_obj > __this = new BVHPartition_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< BVHPartition_obj > BVHPartition_obj::__alloc(::hx::Ctx *_hx_ctx) {
	BVHPartition_obj *__this = (BVHPartition_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(BVHPartition_obj), true, "apparentridges.BVHPartition"));
	*(void **)__this = BVHPartition_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

BVHPartition_obj::BVHPartition_obj()
{
}

void BVHPartition_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BVHPartition);
	HX_MARK_MEMBER_NAME(planeIndex,"planeIndex");
	HX_MARK_MEMBER_NAME(axis,"axis");
	HX_MARK_MEMBER_NAME(leftCount,"leftCount");
	HX_MARK_MEMBER_NAME(rightCount,"rightCount");
	HX_MARK_MEMBER_NAME(leftArea,"leftArea");
	HX_MARK_MEMBER_NAME(rightArea,"rightArea");
	HX_MARK_MEMBER_NAME(leftBBox,"leftBBox");
	HX_MARK_MEMBER_NAME(rightBBox,"rightBBox");
	HX_MARK_MEMBER_NAME(SAH,"SAH");
	HX_MARK_END_CLASS();
}

void BVHPartition_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(planeIndex,"planeIndex");
	HX_VISIT_MEMBER_NAME(axis,"axis");
	HX_VISIT_MEMBER_NAME(leftCount,"leftCount");
	HX_VISIT_MEMBER_NAME(rightCount,"rightCount");
	HX_VISIT_MEMBER_NAME(leftArea,"leftArea");
	HX_VISIT_MEMBER_NAME(rightArea,"rightArea");
	HX_VISIT_MEMBER_NAME(leftBBox,"leftBBox");
	HX_VISIT_MEMBER_NAME(rightBBox,"rightBBox");
	HX_VISIT_MEMBER_NAME(SAH,"SAH");
}

::hx::Val BVHPartition_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"SAH") ) { return ::hx::Val( SAH ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"axis") ) { return ::hx::Val( axis ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"leftArea") ) { return ::hx::Val( leftArea ); }
		if (HX_FIELD_EQ(inName,"leftBBox") ) { return ::hx::Val( leftBBox ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"leftCount") ) { return ::hx::Val( leftCount ); }
		if (HX_FIELD_EQ(inName,"rightArea") ) { return ::hx::Val( rightArea ); }
		if (HX_FIELD_EQ(inName,"rightBBox") ) { return ::hx::Val( rightBBox ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"planeIndex") ) { return ::hx::Val( planeIndex ); }
		if (HX_FIELD_EQ(inName,"rightCount") ) { return ::hx::Val( rightCount ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val BVHPartition_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"SAH") ) { SAH=inValue.Cast< Float >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"axis") ) { axis=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"leftArea") ) { leftArea=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"leftBBox") ) { leftBBox=inValue.Cast<  ::apparentridges::BBox >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"leftCount") ) { leftCount=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rightArea") ) { rightArea=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rightBBox") ) { rightBBox=inValue.Cast<  ::apparentridges::BBox >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"planeIndex") ) { planeIndex=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rightCount") ) { rightCount=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void BVHPartition_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("planeIndex",16,7f,10,5c));
	outFields->push(HX_("axis",a1,1c,79,40));
	outFields->push(HX_("leftCount",48,33,43,5f));
	outFields->push(HX_("rightCount",53,2b,28,4d));
	outFields->push(HX_("leftArea",34,cf,6f,47));
	outFields->push(HX_("rightArea",89,e1,3a,ab));
	outFields->push(HX_("leftBBox",70,a2,f4,47));
	outFields->push(HX_("rightBBox",c5,b4,bf,ab));
	outFields->push(HX_("SAH",fa,33,3f,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo BVHPartition_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(BVHPartition_obj,planeIndex),HX_("planeIndex",16,7f,10,5c)},
	{::hx::fsInt,(int)offsetof(BVHPartition_obj,axis),HX_("axis",a1,1c,79,40)},
	{::hx::fsInt,(int)offsetof(BVHPartition_obj,leftCount),HX_("leftCount",48,33,43,5f)},
	{::hx::fsInt,(int)offsetof(BVHPartition_obj,rightCount),HX_("rightCount",53,2b,28,4d)},
	{::hx::fsFloat,(int)offsetof(BVHPartition_obj,leftArea),HX_("leftArea",34,cf,6f,47)},
	{::hx::fsFloat,(int)offsetof(BVHPartition_obj,rightArea),HX_("rightArea",89,e1,3a,ab)},
	{::hx::fsObject /*  ::apparentridges::BBox */ ,(int)offsetof(BVHPartition_obj,leftBBox),HX_("leftBBox",70,a2,f4,47)},
	{::hx::fsObject /*  ::apparentridges::BBox */ ,(int)offsetof(BVHPartition_obj,rightBBox),HX_("rightBBox",c5,b4,bf,ab)},
	{::hx::fsFloat,(int)offsetof(BVHPartition_obj,SAH),HX_("SAH",fa,33,3f,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *BVHPartition_obj_sStaticStorageInfo = 0;
#endif

static ::String BVHPartition_obj_sMemberFields[] = {
	HX_("planeIndex",16,7f,10,5c),
	HX_("axis",a1,1c,79,40),
	HX_("leftCount",48,33,43,5f),
	HX_("rightCount",53,2b,28,4d),
	HX_("leftArea",34,cf,6f,47),
	HX_("rightArea",89,e1,3a,ab),
	HX_("leftBBox",70,a2,f4,47),
	HX_("rightBBox",c5,b4,bf,ab),
	HX_("SAH",fa,33,3f,00),
	::String(null()) };

::hx::Class BVHPartition_obj::__mClass;

void BVHPartition_obj::__register()
{
	BVHPartition_obj _hx_dummy;
	BVHPartition_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("apparentridges.BVHPartition",e3,81,7a,15);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(BVHPartition_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< BVHPartition_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BVHPartition_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BVHPartition_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace apparentridges
