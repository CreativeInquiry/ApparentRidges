// Generated by Haxe 4.1.3
#include <hxcpp.h>

#ifndef INCLUDED_apparentridges_BBox
#include <apparentridges/BBox.h>
#endif
#ifndef INCLUDED_apparentridges_BVHNode
#include <apparentridges/BVHNode.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2b3f2016b1c60cae_1155_new,"apparentridges.BVHNode","new",0x7fc6d61b,"apparentridges.BVHNode.new","apparentridges/ApparentRidges.hx",1155,0xfeacc84f)
HX_LOCAL_STACK_FRAME(_hx_pos_2b3f2016b1c60cae_1163_isLeaf,"apparentridges.BVHNode","isLeaf",0x992fc9cd,"apparentridges.BVHNode.isLeaf","apparentridges/ApparentRidges.hx",1163,0xfeacc84f)
namespace apparentridges{

void BVHNode_obj::__construct( ::apparentridges::BBox box,int i0,int i1){
            	HX_STACKFRAME(&_hx_pos_2b3f2016b1c60cae_1155_new)
HXLINE(1156)		this->bbox = box;
HXLINE(1157)		this->begin = i0;
HXLINE(1158)		this->end = i1;
HXLINE(1159)		this->left = null();
HXLINE(1160)		this->right = null();
            	}

Dynamic BVHNode_obj::__CreateEmpty() { return new BVHNode_obj; }

void *BVHNode_obj::_hx_vtable = 0;

Dynamic BVHNode_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< BVHNode_obj > _hx_result = new BVHNode_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool BVHNode_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x295fcb91;
}

bool BVHNode_obj::isLeaf(){
            	HX_STACKFRAME(&_hx_pos_2b3f2016b1c60cae_1163_isLeaf)
HXDLIN(1163)		if (::hx::IsNull( this->left )) {
HXDLIN(1163)			return ::hx::IsNull( this->right );
            		}
            		else {
HXDLIN(1163)			return false;
            		}
HXDLIN(1163)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BVHNode_obj,isLeaf,return )


::hx::ObjectPtr< BVHNode_obj > BVHNode_obj::__new( ::apparentridges::BBox box,int i0,int i1) {
	::hx::ObjectPtr< BVHNode_obj > __this = new BVHNode_obj();
	__this->__construct(box,i0,i1);
	return __this;
}

::hx::ObjectPtr< BVHNode_obj > BVHNode_obj::__alloc(::hx::Ctx *_hx_ctx, ::apparentridges::BBox box,int i0,int i1) {
	BVHNode_obj *__this = (BVHNode_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(BVHNode_obj), true, "apparentridges.BVHNode"));
	*(void **)__this = BVHNode_obj::_hx_vtable;
	__this->__construct(box,i0,i1);
	return __this;
}

BVHNode_obj::BVHNode_obj()
{
}

void BVHNode_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BVHNode);
	HX_MARK_MEMBER_NAME(left,"left");
	HX_MARK_MEMBER_NAME(right,"right");
	HX_MARK_MEMBER_NAME(begin,"begin");
	HX_MARK_MEMBER_NAME(end,"end");
	HX_MARK_MEMBER_NAME(bbox,"bbox");
	HX_MARK_END_CLASS();
}

void BVHNode_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(left,"left");
	HX_VISIT_MEMBER_NAME(right,"right");
	HX_VISIT_MEMBER_NAME(begin,"begin");
	HX_VISIT_MEMBER_NAME(end,"end");
	HX_VISIT_MEMBER_NAME(bbox,"bbox");
}

::hx::Val BVHNode_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"end") ) { return ::hx::Val( end ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"left") ) { return ::hx::Val( left ); }
		if (HX_FIELD_EQ(inName,"bbox") ) { return ::hx::Val( bbox ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"right") ) { return ::hx::Val( right ); }
		if (HX_FIELD_EQ(inName,"begin") ) { return ::hx::Val( begin ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"isLeaf") ) { return ::hx::Val( isLeaf_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val BVHNode_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"end") ) { end=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"left") ) { left=inValue.Cast<  ::apparentridges::BVHNode >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bbox") ) { bbox=inValue.Cast<  ::apparentridges::BBox >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"right") ) { right=inValue.Cast<  ::apparentridges::BVHNode >(); return inValue; }
		if (HX_FIELD_EQ(inName,"begin") ) { begin=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void BVHNode_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("left",07,08,b0,47));
	outFields->push(HX_("right",dc,0b,64,e9));
	outFields->push(HX_("begin",29,ea,55,b0));
	outFields->push(HX_("end",db,03,4d,00));
	outFields->push(HX_("bbox",e9,a6,11,41));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo BVHNode_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::apparentridges::BVHNode */ ,(int)offsetof(BVHNode_obj,left),HX_("left",07,08,b0,47)},
	{::hx::fsObject /*  ::apparentridges::BVHNode */ ,(int)offsetof(BVHNode_obj,right),HX_("right",dc,0b,64,e9)},
	{::hx::fsInt,(int)offsetof(BVHNode_obj,begin),HX_("begin",29,ea,55,b0)},
	{::hx::fsInt,(int)offsetof(BVHNode_obj,end),HX_("end",db,03,4d,00)},
	{::hx::fsObject /*  ::apparentridges::BBox */ ,(int)offsetof(BVHNode_obj,bbox),HX_("bbox",e9,a6,11,41)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *BVHNode_obj_sStaticStorageInfo = 0;
#endif

static ::String BVHNode_obj_sMemberFields[] = {
	HX_("left",07,08,b0,47),
	HX_("right",dc,0b,64,e9),
	HX_("begin",29,ea,55,b0),
	HX_("end",db,03,4d,00),
	HX_("bbox",e9,a6,11,41),
	HX_("isLeaf",a8,c8,16,65),
	::String(null()) };

::hx::Class BVHNode_obj::__mClass;

void BVHNode_obj::__register()
{
	BVHNode_obj _hx_dummy;
	BVHNode_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("apparentridges.BVHNode",a9,2c,4d,c6);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(BVHNode_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< BVHNode_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BVHNode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BVHNode_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace apparentridges
