// Generated by Haxe 4.1.3
#ifndef INCLUDED_apparentridges_BVHNode
#define INCLUDED_apparentridges_BVHNode

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(apparentridges,BBox)
HX_DECLARE_CLASS1(apparentridges,BVHNode)

namespace apparentridges{


class HXCPP_CLASS_ATTRIBUTES BVHNode_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef BVHNode_obj OBJ_;
		BVHNode_obj();

	public:
		enum { _hx_ClassId = 0x295fcb91 };

		void __construct( ::apparentridges::BBox box,int i0,int i1);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="apparentridges.BVHNode")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"apparentridges.BVHNode"); }
		static ::hx::ObjectPtr< BVHNode_obj > __new( ::apparentridges::BBox box,int i0,int i1);
		static ::hx::ObjectPtr< BVHNode_obj > __alloc(::hx::Ctx *_hx_ctx, ::apparentridges::BBox box,int i0,int i1);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~BVHNode_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("BVHNode",16,a0,f6,c3); }

		 ::apparentridges::BVHNode left;
		 ::apparentridges::BVHNode right;
		int begin;
		int end;
		 ::apparentridges::BBox bbox;
		bool isLeaf();
		::Dynamic isLeaf_dyn();

};

} // end namespace apparentridges

#endif /* INCLUDED_apparentridges_BVHNode */ 
