// Generated by Haxe 4.1.3
#ifndef INCLUDED_apparentridges_Ray
#define INCLUDED_apparentridges_Ray

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(apparentridges,BBox)
HX_DECLARE_CLASS1(apparentridges,BVHTree)
HX_DECLARE_CLASS1(apparentridges,Ray)
HX_DECLARE_CLASS1(apparentridges,RayHit)

namespace apparentridges{


class HXCPP_CLASS_ATTRIBUTES Ray_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Ray_obj OBJ_;
		Ray_obj();

	public:
		enum { _hx_ClassId = 0x5fb79fc5 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="apparentridges.Ray")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"apparentridges.Ray"); }
		static ::hx::ObjectPtr< Ray_obj > __new();
		static ::hx::ObjectPtr< Ray_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Ray_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Ray",ca,8d,3e,00); }

		::Array< Float > o;
		::Array< Float > d;
		Float tmin;
		Float tmax;
		 ::apparentridges::RayHit hitBBox( ::apparentridges::BBox bb);
		::Dynamic hitBBox_dyn();

		 ::apparentridges::RayHit hitTriangle(::Array< Float > p0,::Array< Float > p1,::Array< Float > p2);
		::Dynamic hitTriangle_dyn();

		 ::apparentridges::RayHit hitBVH( ::apparentridges::BVHTree bvh);
		::Dynamic hitBVH_dyn();

};

} // end namespace apparentridges

#endif /* INCLUDED_apparentridges_Ray */ 
