// Generated by Haxe 4.1.3
#ifndef INCLUDED_apparentridges_BVHBucket
#define INCLUDED_apparentridges_BVHBucket

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(apparentridges,BBox)
HX_DECLARE_CLASS1(apparentridges,BVHBucket)

namespace apparentridges{


class HXCPP_CLASS_ATTRIBUTES BVHBucket_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef BVHBucket_obj OBJ_;
		BVHBucket_obj();

	public:
		enum { _hx_ClassId = 0x515b9d9d };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="apparentridges.BVHBucket")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"apparentridges.BVHBucket"); }
		static ::hx::ObjectPtr< BVHBucket_obj > __new();
		static ::hx::ObjectPtr< BVHBucket_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~BVHBucket_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("BVHBucket",7e,27,6a,4e); }

		Float min;
		Float max;
		int count;
		Float area;
		 ::apparentridges::BBox bbox;
};

} // end namespace apparentridges

#endif /* INCLUDED_apparentridges_BVHBucket */ 
