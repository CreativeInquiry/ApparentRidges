// Generated by Haxe 4.1.3
#ifndef INCLUDED_apparentridges__ApparentRidges_Vec3_Impl_
#define INCLUDED_apparentridges__ApparentRidges_Vec3_Impl_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(apparentridges,_ApparentRidges,Vec3_Impl_)

namespace apparentridges{
namespace _ApparentRidges{


class HXCPP_CLASS_ATTRIBUTES Vec3_Impl__obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Vec3_Impl__obj OBJ_;
		Vec3_Impl__obj();

	public:
		enum { _hx_ClassId = 0x003208de };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="apparentridges._ApparentRidges.Vec3_Impl_")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"apparentridges._ApparentRidges.Vec3_Impl_"); }

		inline static ::hx::ObjectPtr< Vec3_Impl__obj > __new() {
			::hx::ObjectPtr< Vec3_Impl__obj > __this = new Vec3_Impl__obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< Vec3_Impl__obj > __alloc(::hx::Ctx *_hx_ctx) {
			Vec3_Impl__obj *__this = (Vec3_Impl__obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Vec3_Impl__obj), false, "apparentridges._ApparentRidges.Vec3_Impl_"));
			*(void **)__this = Vec3_Impl__obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Vec3_Impl__obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Vec3_Impl_",5f,b9,14,86); }

		static ::Array< Float > _new(Float _x,Float _y,Float _z);
		static ::Dynamic _new_dyn();

		static Float get_x(::Array< Float > this1);
		static ::Dynamic get_x_dyn();

		static Float get_y(::Array< Float > this1);
		static ::Dynamic get_y_dyn();

		static Float get_z(::Array< Float > this1);
		static ::Dynamic get_z_dyn();

		static Float set_x(::Array< Float > this1,Float v);
		static ::Dynamic set_x_dyn();

		static Float set_y(::Array< Float > this1,Float v);
		static ::Dynamic set_y_dyn();

		static Float set_z(::Array< Float > this1,Float v);
		static ::Dynamic set_z_dyn();

		static ::Array< Float > copy(::Array< Float > this1);
		static ::Dynamic copy_dyn();

		static void assign(::Array< Float > this1,::Array< Float > v);
		static ::Dynamic assign_dyn();

		static ::Array< Float > cross(::Array< Float > v1,::Array< Float > v2);
		static ::Dynamic cross_dyn();

		static Float dot(::Array< Float > v1,::Array< Float > v2);
		static ::Dynamic dot_dyn();

		static Float dist2(::Array< Float > v1,::Array< Float > v2);
		static ::Dynamic dist2_dyn();

		static Float dist(::Array< Float > v1,::Array< Float > v2);
		static ::Dynamic dist_dyn();

		static Float len(::Array< Float > this1);
		static ::Dynamic len_dyn();

		static Float len2(::Array< Float > this1);
		static ::Dynamic len2_dyn();

		static void normalize(::Array< Float > this1);
		static ::Dynamic normalize_dyn();

		static void scale(::Array< Float > this1,Float s);
		static ::Dynamic scale_dyn();

		static Float get(::Array< Float > this1,int i);
		static ::Dynamic get_dyn();

		static Float set(::Array< Float > this1,int i,Float v);
		static ::Dynamic set_dyn();

		static ::Array< Float > add(::Array< Float > this1,::Array< Float > rhs);
		static ::Dynamic add_dyn();

		static ::Array< Float > sub(::Array< Float > this1,::Array< Float > rhs);
		static ::Dynamic sub_dyn();

		static ::Array< Float > mul(::Array< Float > this1,::Array< Float > rhs);
		static ::Dynamic mul_dyn();

		static ::Array< Float > mulf(::Array< Float > this1,Float rhs);
		static ::Dynamic mulf_dyn();

};

} // end namespace apparentridges
} // end namespace _ApparentRidges

#endif /* INCLUDED_apparentridges__ApparentRidges_Vec3_Impl_ */ 
