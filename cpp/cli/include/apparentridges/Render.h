// Generated by Haxe 4.1.3
#ifndef INCLUDED_apparentridges_Render
#define INCLUDED_apparentridges_Render

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(apparentridges,Line)
HX_DECLARE_CLASS1(apparentridges,Mesh)
HX_DECLARE_CLASS1(apparentridges,Render)

namespace apparentridges{


class HXCPP_CLASS_ATTRIBUTES Render_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Render_obj OBJ_;
		Render_obj();

	public:
		enum { _hx_ClassId = 0x679aeff7 };

		void __construct( ::apparentridges::Mesh _mesh,int w,int h);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="apparentridges.Render")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"apparentridges.Render"); }
		static ::hx::ObjectPtr< Render_obj > __new( ::apparentridges::Mesh _mesh,int w,int h);
		static ::hx::ObjectPtr< Render_obj > __alloc(::hx::Ctx *_hx_ctx, ::apparentridges::Mesh _mesh,int w,int h);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Render_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Render",76,df,bd,39); }

		 ::apparentridges::Mesh mesh;
		::Array< ::Dynamic> lines;
		::Array< ::Dynamic> polylines;
		Float focal;
		int width;
		int height;
		bool verbose;
		bool didPrecompute;
		void clear();
		::Dynamic clear_dyn();

		void setFocal(Float f);
		::Dynamic setFocal_dyn();

		void setVerbose(int v);
		::Dynamic setVerbose_dyn();

		void transform(::Array< Float > mat4x4);
		::Dynamic transform_dyn();

		void scaleRotateTranslate(Float sx,Float sy,Float sz,Float rx,Float ry,Float rz,Float dx,Float dy,Float dz);
		::Dynamic scaleRotateTranslate_dyn();

		void autoPlace(::hx::Null< Float >  zFactor,::hx::Null< Float >  fFactor);
		::Dynamic autoPlace_dyn();

		void vertices();
		::Dynamic vertices_dyn();

		void edges();
		::Dynamic edges_dyn();

		void apparentRidges(Float thresh,::hx::Null< Float >  cull);
		::Dynamic apparentRidges_dyn();

		void buildPolylines(::hx::Null< Float >  epsilon);
		::Dynamic buildPolylines_dyn();

};

} // end namespace apparentridges

#endif /* INCLUDED_apparentridges_Render */ 
