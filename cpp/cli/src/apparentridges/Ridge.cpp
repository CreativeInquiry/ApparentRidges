// Generated by Haxe 4.1.3
#include <hxcpp.h>

#ifndef INCLUDED_apparentridges_Ridge
#include <apparentridges/Ridge.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_aae6d9f18e5dd49a_297_new,"apparentridges.Ridge","new",0xe8de4dd0,"apparentridges.Ridge.new","apparentridges/ApparentRidges.hx",297,0xfeacc84f)
namespace apparentridges{

void Ridge_obj::__construct(::Array< Float > a,Float sa,::Array< Float > b,Float sb){
            	HX_STACKFRAME(&_hx_pos_aae6d9f18e5dd49a_297_new)
HXLINE( 298)		this->A = a;
HXDLIN( 298)		this->strengthA = sa;
HXLINE( 299)		this->B = b;
HXDLIN( 299)		this->strengthB = sb;
            	}

Dynamic Ridge_obj::__CreateEmpty() { return new Ridge_obj; }

void *Ridge_obj::_hx_vtable = 0;

Dynamic Ridge_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Ridge_obj > _hx_result = new Ridge_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool Ridge_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x32256eaa;
}


Ridge_obj::Ridge_obj()
{
}

void Ridge_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Ridge);
	HX_MARK_MEMBER_NAME(A,"A");
	HX_MARK_MEMBER_NAME(B,"B");
	HX_MARK_MEMBER_NAME(strengthA,"strengthA");
	HX_MARK_MEMBER_NAME(strengthB,"strengthB");
	HX_MARK_END_CLASS();
}

void Ridge_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(A,"A");
	HX_VISIT_MEMBER_NAME(B,"B");
	HX_VISIT_MEMBER_NAME(strengthA,"strengthA");
	HX_VISIT_MEMBER_NAME(strengthB,"strengthB");
}

::hx::Val Ridge_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"A") ) { return ::hx::Val( A ); }
		if (HX_FIELD_EQ(inName,"B") ) { return ::hx::Val( B ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"strengthA") ) { return ::hx::Val( strengthA ); }
		if (HX_FIELD_EQ(inName,"strengthB") ) { return ::hx::Val( strengthB ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Ridge_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"A") ) { A=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"B") ) { B=inValue.Cast< ::Array< Float > >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"strengthA") ) { strengthA=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"strengthB") ) { strengthB=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Ridge_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("A",41,00,00,00));
	outFields->push(HX_("B",42,00,00,00));
	outFields->push(HX_("strengthA",a0,5e,69,2e));
	outFields->push(HX_("strengthB",a1,5e,69,2e));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Ridge_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(Ridge_obj,A),HX_("A",41,00,00,00)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(Ridge_obj,B),HX_("B",42,00,00,00)},
	{::hx::fsFloat,(int)offsetof(Ridge_obj,strengthA),HX_("strengthA",a0,5e,69,2e)},
	{::hx::fsFloat,(int)offsetof(Ridge_obj,strengthB),HX_("strengthB",a1,5e,69,2e)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Ridge_obj_sStaticStorageInfo = 0;
#endif

static ::String Ridge_obj_sMemberFields[] = {
	HX_("A",41,00,00,00),
	HX_("B",42,00,00,00),
	HX_("strengthA",a0,5e,69,2e),
	HX_("strengthB",a1,5e,69,2e),
	::String(null()) };

::hx::Class Ridge_obj::__mClass;

void Ridge_obj::__register()
{
	Ridge_obj _hx_dummy;
	Ridge_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("apparentridges.Ridge",de,65,17,a7);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Ridge_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Ridge_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Ridge_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Ridge_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace apparentridges
