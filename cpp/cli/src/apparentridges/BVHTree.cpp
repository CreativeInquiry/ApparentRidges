// Generated by Haxe 4.1.3
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_apparentridges_BBox
#include <apparentridges/BBox.h>
#endif
#ifndef INCLUDED_apparentridges_BVHBucket
#include <apparentridges/BVHBucket.h>
#endif
#ifndef INCLUDED_apparentridges_BVHNode
#include <apparentridges/BVHNode.h>
#endif
#ifndef INCLUDED_apparentridges_BVHPartition
#include <apparentridges/BVHPartition.h>
#endif
#ifndef INCLUDED_apparentridges_BVHTree
#include <apparentridges/BVHTree.h>
#endif
#ifndef INCLUDED_apparentridges_Mesh
#include <apparentridges/Mesh.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4fa810f43e5c5572_1178_new,"apparentridges.BVHTree","new",0xba114377,"apparentridges.BVHTree.new","apparentridges/ApparentRidges.hx",1178,0xfeacc84f)
HX_LOCAL_STACK_FRAME(_hx_pos_4fa810f43e5c5572_1187_build,"apparentridges.BVHTree","build",0x753c8205,"apparentridges.BVHTree.build","apparentridges/ApparentRidges.hx",1187,0xfeacc84f)
HX_LOCAL_STACK_FRAME(_hx_pos_4fa810f43e5c5572_1257_build,"apparentridges.BVHTree","build",0x753c8205,"apparentridges.BVHTree.build","apparentridges/ApparentRidges.hx",1257,0xfeacc84f)
HX_LOCAL_STACK_FRAME(_hx_pos_4fa810f43e5c5572_1191_build,"apparentridges.BVHTree","build",0x753c8205,"apparentridges.BVHTree.build","apparentridges/ApparentRidges.hx",1191,0xfeacc84f)
HX_LOCAL_STACK_FRAME(_hx_pos_4fa810f43e5c5572_1185_build,"apparentridges.BVHTree","build",0x753c8205,"apparentridges.BVHTree.build","apparentridges/ApparentRidges.hx",1185,0xfeacc84f)
namespace apparentridges{

void BVHTree_obj::__construct( ::apparentridges::Mesh _mesh,::hx::Null< int >  __o__maxLeafSize,::hx::Null< int >  __o__bucketCount){
            		int _maxLeafSize = __o__maxLeafSize.Default(4);
            		int _bucketCount = __o__bucketCount.Default(8);
            	HX_STACKFRAME(&_hx_pos_4fa810f43e5c5572_1178_new)
HXLINE(1179)		this->maxLeafSize = _maxLeafSize;
HXLINE(1180)		this->bucketCount = _bucketCount;
HXLINE(1181)		this->faces = _mesh->faces->slice(0,null());
HXLINE(1182)		this->mesh = _mesh;
            	}

Dynamic BVHTree_obj::__CreateEmpty() { return new BVHTree_obj; }

void *BVHTree_obj::_hx_vtable = 0;

Dynamic BVHTree_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< BVHTree_obj > _hx_result = new BVHTree_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool BVHTree_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2d595aed;
}

void BVHTree_obj::build(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::apparentridges::BVHTree,_gthis) HXARGC(2)
            		void _hx_run( ::apparentridges::BBox bbox,::Array< int > f){
            			HX_STACKFRAME(&_hx_pos_4fa810f43e5c5572_1187_build)
HXLINE(1188)			{
HXLINE(1188)				::Array< Float > p = _gthis->mesh->vertices->__get(( (int)(_hx_array_unsafe_get(f,0)) )).StaticCast< ::Array< Float > >();
HXDLIN(1188)				{
HXLINE(1188)					::Array< Float > this1 = bbox->min;
HXDLIN(1188)					Float v = ( (Float)(_hx_array_unsafe_get(bbox->min,0)) );
HXDLIN(1188)					Float v1 = ::Math_obj::min(v,( (Float)(_hx_array_unsafe_get(p,0)) ));
HXDLIN(1188)					this1->__unsafe_set(0,v1);
            				}
HXDLIN(1188)				{
HXLINE(1188)					::Array< Float > this2 = bbox->min;
HXDLIN(1188)					Float v2 = ( (Float)(_hx_array_unsafe_get(bbox->min,1)) );
HXDLIN(1188)					Float v3 = ::Math_obj::min(v2,( (Float)(_hx_array_unsafe_get(p,1)) ));
HXDLIN(1188)					this2->__unsafe_set(1,v3);
            				}
HXDLIN(1188)				{
HXLINE(1188)					::Array< Float > this3 = bbox->min;
HXDLIN(1188)					Float v4 = ( (Float)(_hx_array_unsafe_get(bbox->min,2)) );
HXDLIN(1188)					Float v5 = ::Math_obj::min(v4,( (Float)(_hx_array_unsafe_get(p,2)) ));
HXDLIN(1188)					this3->__unsafe_set(2,v5);
            				}
HXDLIN(1188)				{
HXLINE(1188)					::Array< Float > this4 = bbox->max;
HXDLIN(1188)					Float v6 = ( (Float)(_hx_array_unsafe_get(bbox->max,0)) );
HXDLIN(1188)					Float v7 = ::Math_obj::max(v6,( (Float)(_hx_array_unsafe_get(p,0)) ));
HXDLIN(1188)					this4->__unsafe_set(0,v7);
            				}
HXDLIN(1188)				{
HXLINE(1188)					::Array< Float > this5 = bbox->max;
HXDLIN(1188)					Float v8 = ( (Float)(_hx_array_unsafe_get(bbox->max,1)) );
HXDLIN(1188)					Float v9 = ::Math_obj::max(v8,( (Float)(_hx_array_unsafe_get(p,1)) ));
HXDLIN(1188)					this5->__unsafe_set(1,v9);
            				}
HXDLIN(1188)				{
HXLINE(1188)					::Array< Float > this6 = bbox->max;
HXDLIN(1188)					Float v10 = ( (Float)(_hx_array_unsafe_get(bbox->max,2)) );
HXDLIN(1188)					Float v11 = ::Math_obj::max(v10,( (Float)(_hx_array_unsafe_get(p,2)) ));
HXDLIN(1188)					this6->__unsafe_set(2,v11);
            				}
            			}
HXDLIN(1188)			{
HXLINE(1188)				::Array< Float > p1 = _gthis->mesh->vertices->__get(( (int)(_hx_array_unsafe_get(f,1)) )).StaticCast< ::Array< Float > >();
HXDLIN(1188)				{
HXLINE(1188)					::Array< Float > this7 = bbox->min;
HXDLIN(1188)					Float v12 = ( (Float)(_hx_array_unsafe_get(bbox->min,0)) );
HXDLIN(1188)					Float v13 = ::Math_obj::min(v12,( (Float)(_hx_array_unsafe_get(p1,0)) ));
HXDLIN(1188)					this7->__unsafe_set(0,v13);
            				}
HXDLIN(1188)				{
HXLINE(1188)					::Array< Float > this8 = bbox->min;
HXDLIN(1188)					Float v14 = ( (Float)(_hx_array_unsafe_get(bbox->min,1)) );
HXDLIN(1188)					Float v15 = ::Math_obj::min(v14,( (Float)(_hx_array_unsafe_get(p1,1)) ));
HXDLIN(1188)					this8->__unsafe_set(1,v15);
            				}
HXDLIN(1188)				{
HXLINE(1188)					::Array< Float > this9 = bbox->min;
HXDLIN(1188)					Float v16 = ( (Float)(_hx_array_unsafe_get(bbox->min,2)) );
HXDLIN(1188)					Float v17 = ::Math_obj::min(v16,( (Float)(_hx_array_unsafe_get(p1,2)) ));
HXDLIN(1188)					this9->__unsafe_set(2,v17);
            				}
HXDLIN(1188)				{
HXLINE(1188)					::Array< Float > this10 = bbox->max;
HXDLIN(1188)					Float v18 = ( (Float)(_hx_array_unsafe_get(bbox->max,0)) );
HXDLIN(1188)					Float v19 = ::Math_obj::max(v18,( (Float)(_hx_array_unsafe_get(p1,0)) ));
HXDLIN(1188)					this10->__unsafe_set(0,v19);
            				}
HXDLIN(1188)				{
HXLINE(1188)					::Array< Float > this11 = bbox->max;
HXDLIN(1188)					Float v20 = ( (Float)(_hx_array_unsafe_get(bbox->max,1)) );
HXDLIN(1188)					Float v21 = ::Math_obj::max(v20,( (Float)(_hx_array_unsafe_get(p1,1)) ));
HXDLIN(1188)					this11->__unsafe_set(1,v21);
            				}
HXDLIN(1188)				{
HXLINE(1188)					::Array< Float > this12 = bbox->max;
HXDLIN(1188)					Float v22 = ( (Float)(_hx_array_unsafe_get(bbox->max,2)) );
HXDLIN(1188)					Float v23 = ::Math_obj::max(v22,( (Float)(_hx_array_unsafe_get(p1,2)) ));
HXDLIN(1188)					this12->__unsafe_set(2,v23);
            				}
            			}
HXDLIN(1188)			{
HXLINE(1188)				::Array< Float > p2 = _gthis->mesh->vertices->__get(( (int)(_hx_array_unsafe_get(f,2)) )).StaticCast< ::Array< Float > >();
HXDLIN(1188)				{
HXLINE(1188)					::Array< Float > this13 = bbox->min;
HXDLIN(1188)					Float v24 = ( (Float)(_hx_array_unsafe_get(bbox->min,0)) );
HXDLIN(1188)					Float v25 = ::Math_obj::min(v24,( (Float)(_hx_array_unsafe_get(p2,0)) ));
HXDLIN(1188)					this13->__unsafe_set(0,v25);
            				}
HXDLIN(1188)				{
HXLINE(1188)					::Array< Float > this14 = bbox->min;
HXDLIN(1188)					Float v26 = ( (Float)(_hx_array_unsafe_get(bbox->min,1)) );
HXDLIN(1188)					Float v27 = ::Math_obj::min(v26,( (Float)(_hx_array_unsafe_get(p2,1)) ));
HXDLIN(1188)					this14->__unsafe_set(1,v27);
            				}
HXDLIN(1188)				{
HXLINE(1188)					::Array< Float > this15 = bbox->min;
HXDLIN(1188)					Float v28 = ( (Float)(_hx_array_unsafe_get(bbox->min,2)) );
HXDLIN(1188)					Float v29 = ::Math_obj::min(v28,( (Float)(_hx_array_unsafe_get(p2,2)) ));
HXDLIN(1188)					this15->__unsafe_set(2,v29);
            				}
HXDLIN(1188)				{
HXLINE(1188)					::Array< Float > this16 = bbox->max;
HXDLIN(1188)					Float v30 = ( (Float)(_hx_array_unsafe_get(bbox->max,0)) );
HXDLIN(1188)					Float v31 = ::Math_obj::max(v30,( (Float)(_hx_array_unsafe_get(p2,0)) ));
HXDLIN(1188)					this16->__unsafe_set(0,v31);
            				}
HXDLIN(1188)				{
HXLINE(1188)					::Array< Float > this17 = bbox->max;
HXDLIN(1188)					Float v32 = ( (Float)(_hx_array_unsafe_get(bbox->max,1)) );
HXDLIN(1188)					Float v33 = ::Math_obj::max(v32,( (Float)(_hx_array_unsafe_get(p2,1)) ));
HXDLIN(1188)					this17->__unsafe_set(1,v33);
            				}
HXDLIN(1188)				{
HXLINE(1188)					::Array< Float > this18 = bbox->max;
HXDLIN(1188)					Float v34 = ( (Float)(_hx_array_unsafe_get(bbox->max,2)) );
HXDLIN(1188)					Float v35 = ::Math_obj::max(v34,( (Float)(_hx_array_unsafe_get(p2,2)) ));
HXDLIN(1188)					this18->__unsafe_set(2,v35);
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_2, ::Dynamic,bboxAddFace, ::apparentridges::BVHTree,_gthis,::Array< ::Dynamic>,buildRange) HXARGC(2)
            		 ::apparentridges::BVHNode _hx_run(int i0,int i1){
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::Dynamic,bboxAddFace, ::apparentridges::BVHPartition,minPart) HXARGC(2)
            			int _hx_run(::Array< int > f0,::Array< int > f1){
            				HX_GC_STACKFRAME(&_hx_pos_4fa810f43e5c5572_1257_build)
HXLINE(1258)				 ::apparentridges::BBox bb0 =  ::apparentridges::BBox_obj::__alloc( HX_CTX );
HXLINE(1259)				 ::apparentridges::BBox bb1 =  ::apparentridges::BBox_obj::__alloc( HX_CTX );
HXLINE(1260)				bboxAddFace(bb0,f0);
HXLINE(1261)				bboxAddFace(bb1,f1);
HXLINE(1262)				::Array< Float > this1 = bb0->min;
HXDLIN(1262)				::Array< Float > rhs = bb0->max;
HXDLIN(1262)				Float _x = ( (Float)(_hx_array_unsafe_get(this1,0)) );
HXDLIN(1262)				Float _x1 = (_x + ( (Float)(_hx_array_unsafe_get(rhs,0)) ));
HXDLIN(1262)				Float _y = ( (Float)(_hx_array_unsafe_get(this1,1)) );
HXDLIN(1262)				Float _y1 = (_y + ( (Float)(_hx_array_unsafe_get(rhs,1)) ));
HXDLIN(1262)				Float _z = ( (Float)(_hx_array_unsafe_get(this1,2)) );
HXDLIN(1262)				Float _z1 = (_z + ( (Float)(_hx_array_unsafe_get(rhs,2)) ));
HXDLIN(1262)				::Array< Float > this2 = ::Array_obj< Float >::__new(3);
HXDLIN(1262)				::Array< Float > this3 = this2;
HXDLIN(1262)				this3->__unsafe_set(0,_x1);
HXDLIN(1262)				this3->__unsafe_set(1,_y1);
HXDLIN(1262)				this3->__unsafe_set(2,_z1);
HXDLIN(1262)				::Array< Float > this4 = this3;
HXDLIN(1262)				Float _x2 = (( (Float)(_hx_array_unsafe_get(this4,0)) ) * ((Float)0.5));
HXDLIN(1262)				Float _y2 = (( (Float)(_hx_array_unsafe_get(this4,1)) ) * ((Float)0.5));
HXDLIN(1262)				Float _z2 = (( (Float)(_hx_array_unsafe_get(this4,2)) ) * ((Float)0.5));
HXDLIN(1262)				::Array< Float > this5 = ::Array_obj< Float >::__new(3);
HXDLIN(1262)				::Array< Float > this6 = this5;
HXDLIN(1262)				this6->__unsafe_set(0,_x2);
HXDLIN(1262)				this6->__unsafe_set(1,_y2);
HXDLIN(1262)				this6->__unsafe_set(2,_z2);
HXDLIN(1262)				Float v = ( (Float)(_hx_array_unsafe_get(this6,minPart->axis)) );
HXDLIN(1262)				::Array< Float > this7 = bb1->min;
HXDLIN(1262)				::Array< Float > rhs1 = bb1->max;
HXDLIN(1262)				Float _x3 = ( (Float)(_hx_array_unsafe_get(this7,0)) );
HXDLIN(1262)				Float _x4 = (_x3 + ( (Float)(_hx_array_unsafe_get(rhs1,0)) ));
HXDLIN(1262)				Float _y3 = ( (Float)(_hx_array_unsafe_get(this7,1)) );
HXDLIN(1262)				Float _y4 = (_y3 + ( (Float)(_hx_array_unsafe_get(rhs1,1)) ));
HXDLIN(1262)				Float _z3 = ( (Float)(_hx_array_unsafe_get(this7,2)) );
HXDLIN(1262)				Float _z4 = (_z3 + ( (Float)(_hx_array_unsafe_get(rhs1,2)) ));
HXDLIN(1262)				::Array< Float > this8 = ::Array_obj< Float >::__new(3);
HXDLIN(1262)				::Array< Float > this9 = this8;
HXDLIN(1262)				this9->__unsafe_set(0,_x4);
HXDLIN(1262)				this9->__unsafe_set(1,_y4);
HXDLIN(1262)				this9->__unsafe_set(2,_z4);
HXDLIN(1262)				::Array< Float > this10 = this9;
HXDLIN(1262)				Float _x5 = (( (Float)(_hx_array_unsafe_get(this10,0)) ) * ((Float)0.5));
HXDLIN(1262)				Float _y5 = (( (Float)(_hx_array_unsafe_get(this10,1)) ) * ((Float)0.5));
HXDLIN(1262)				Float _z5 = (( (Float)(_hx_array_unsafe_get(this10,2)) ) * ((Float)0.5));
HXDLIN(1262)				::Array< Float > this11 = ::Array_obj< Float >::__new(3);
HXDLIN(1262)				::Array< Float > this12 = this11;
HXDLIN(1262)				this12->__unsafe_set(0,_x5);
HXDLIN(1262)				this12->__unsafe_set(1,_y5);
HXDLIN(1262)				this12->__unsafe_set(2,_z5);
HXDLIN(1262)				Float v1 = (v - ( (Float)(_hx_array_unsafe_get(this12,minPart->axis)) ));
HXLINE(1263)				if ((v1 < 0)) {
HXLINE(1263)					return -1;
            				}
HXLINE(1264)				if ((v1 > 0)) {
HXLINE(1264)					return 1;
            				}
HXLINE(1265)				return 0;
            			}
            			HX_END_LOCAL_FUNC2(return)

            			HX_GC_STACKFRAME(&_hx_pos_4fa810f43e5c5572_1191_build)
HXLINE(1192)			 ::apparentridges::BBox bbox =  ::apparentridges::BBox_obj::__alloc( HX_CTX );
HXLINE(1193)			{
HXLINE(1193)				int _g = i0;
HXDLIN(1193)				int _g1 = i1;
HXDLIN(1193)				while((_g < _g1)){
HXLINE(1193)					_g = (_g + 1);
HXDLIN(1193)					int i = (_g - 1);
HXLINE(1194)					bboxAddFace(bbox,_gthis->faces->__get(i).StaticCast< ::Array< int > >());
            				}
            			}
HXLINE(1197)			 ::apparentridges::BVHNode node =  ::apparentridges::BVHNode_obj::__alloc( HX_CTX ,bbox,i0,i1);
HXLINE(1198)			if (((i1 - i0) <= _gthis->maxLeafSize)) {
HXLINE(1199)				return node;
            			}
HXLINE(1201)			::Array< ::Dynamic> parts = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1202)			{
HXLINE(1202)				int _g2 = 0;
HXDLIN(1202)				while((_g2 < 3)){
HXLINE(1202)					_g2 = (_g2 + 1);
HXDLIN(1202)					int ax = (_g2 - 1);
HXLINE(1203)					::Array< ::Dynamic> buckets = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1204)					Float lo = ( (Float)(_hx_array_unsafe_get(bbox->min,ax)) );
HXLINE(1205)					Float hi = ( (Float)(_hx_array_unsafe_get(bbox->max,ax)) );
HXLINE(1206)					{
HXLINE(1206)						int _g = 0;
HXDLIN(1206)						int _g1 = _gthis->bucketCount;
HXDLIN(1206)						while((_g < _g1)){
HXLINE(1206)							_g = (_g + 1);
HXDLIN(1206)							int i = (_g - 1);
HXLINE(1207)							 ::apparentridges::BVHBucket b =  ::apparentridges::BVHBucket_obj::__alloc( HX_CTX );
HXLINE(1208)							b->min = (lo + ((( (Float)(i) ) / ( (Float)(_gthis->bucketCount) )) * (hi - lo)));
HXLINE(1209)							b->max = (b->min + ((hi - lo) / ( (Float)(_gthis->bucketCount) )));
HXLINE(1210)							buckets->push(b);
            						}
            					}
HXLINE(1212)					{
HXLINE(1212)						int _g3 = i0;
HXDLIN(1212)						int _g4 = i1;
HXDLIN(1212)						while((_g3 < _g4)){
HXLINE(1212)							_g3 = (_g3 + 1);
HXDLIN(1212)							int i = (_g3 - 1);
HXLINE(1213)							 ::apparentridges::BBox bb =  ::apparentridges::BBox_obj::__alloc( HX_CTX );
HXLINE(1214)							bboxAddFace(bb,_gthis->faces->__get(i).StaticCast< ::Array< int > >());
HXLINE(1215)							::Array< Float > this1 = bb->min;
HXDLIN(1215)							::Array< Float > rhs = bb->max;
HXDLIN(1215)							Float _x = ( (Float)(_hx_array_unsafe_get(this1,0)) );
HXDLIN(1215)							Float _x1 = (_x + ( (Float)(_hx_array_unsafe_get(rhs,0)) ));
HXDLIN(1215)							Float _y = ( (Float)(_hx_array_unsafe_get(this1,1)) );
HXDLIN(1215)							Float _y1 = (_y + ( (Float)(_hx_array_unsafe_get(rhs,1)) ));
HXDLIN(1215)							Float _z = ( (Float)(_hx_array_unsafe_get(this1,2)) );
HXDLIN(1215)							Float _z1 = (_z + ( (Float)(_hx_array_unsafe_get(rhs,2)) ));
HXDLIN(1215)							::Array< Float > this2 = ::Array_obj< Float >::__new(3);
HXDLIN(1215)							::Array< Float > this3 = this2;
HXDLIN(1215)							this3->__unsafe_set(0,_x1);
HXDLIN(1215)							this3->__unsafe_set(1,_y1);
HXDLIN(1215)							this3->__unsafe_set(2,_z1);
HXDLIN(1215)							::Array< Float > this4 = this3;
HXDLIN(1215)							Float _x2 = (( (Float)(_hx_array_unsafe_get(this4,0)) ) * ((Float)0.5));
HXDLIN(1215)							Float _y2 = (( (Float)(_hx_array_unsafe_get(this4,1)) ) * ((Float)0.5));
HXDLIN(1215)							Float _z2 = (( (Float)(_hx_array_unsafe_get(this4,2)) ) * ((Float)0.5));
HXDLIN(1215)							::Array< Float > this5 = ::Array_obj< Float >::__new(3);
HXDLIN(1215)							::Array< Float > this6 = this5;
HXDLIN(1215)							this6->__unsafe_set(0,_x2);
HXDLIN(1215)							this6->__unsafe_set(1,_y2);
HXDLIN(1215)							this6->__unsafe_set(2,_z2);
HXDLIN(1215)							::Array< Float > c = this6;
HXLINE(1216)							{
HXLINE(1216)								int _g = 0;
HXDLIN(1216)								int _g1 = _gthis->bucketCount;
HXDLIN(1216)								while((_g < _g1)){
HXLINE(1216)									_g = (_g + 1);
HXDLIN(1216)									int j = (_g - 1);
HXLINE(1217)									bool _hx_tmp;
HXDLIN(1217)									Float buckets1 = buckets->__get(j).StaticCast<  ::apparentridges::BVHBucket >()->min;
HXDLIN(1217)									if ((buckets1 <= ( (Float)(_hx_array_unsafe_get(c,ax)) ))) {
HXLINE(1217)										_hx_tmp = (( (Float)(_hx_array_unsafe_get(c,ax)) ) <= buckets->__get(j).StaticCast<  ::apparentridges::BVHBucket >()->max);
            									}
            									else {
HXLINE(1217)										_hx_tmp = false;
            									}
HXDLIN(1217)									if (_hx_tmp) {
HXLINE(1218)										buckets->__get(j).StaticCast<  ::apparentridges::BVHBucket >()->count++;
HXLINE(1219)										{
HXLINE(1219)											 ::apparentridges::BBox _this = buckets->__get(j).StaticCast<  ::apparentridges::BVHBucket >()->bbox;
HXDLIN(1219)											{
HXLINE(1219)												::Array< Float > this1 = _this->min;
HXDLIN(1219)												Float v = ( (Float)(_hx_array_unsafe_get(_this->min,0)) );
HXDLIN(1219)												Float v1 = ::Math_obj::min(v,( (Float)(_hx_array_unsafe_get(bb->min,0)) ));
HXDLIN(1219)												this1->__unsafe_set(0,v1);
            											}
HXDLIN(1219)											{
HXLINE(1219)												::Array< Float > this2 = _this->min;
HXDLIN(1219)												Float v2 = ( (Float)(_hx_array_unsafe_get(_this->min,1)) );
HXDLIN(1219)												Float v3 = ::Math_obj::min(v2,( (Float)(_hx_array_unsafe_get(bb->min,1)) ));
HXDLIN(1219)												this2->__unsafe_set(1,v3);
            											}
HXDLIN(1219)											{
HXLINE(1219)												::Array< Float > this3 = _this->min;
HXDLIN(1219)												Float v4 = ( (Float)(_hx_array_unsafe_get(_this->min,2)) );
HXDLIN(1219)												Float v5 = ::Math_obj::min(v4,( (Float)(_hx_array_unsafe_get(bb->min,2)) ));
HXDLIN(1219)												this3->__unsafe_set(2,v5);
            											}
HXDLIN(1219)											{
HXLINE(1219)												::Array< Float > this4 = _this->max;
HXDLIN(1219)												Float v6 = ( (Float)(_hx_array_unsafe_get(_this->max,0)) );
HXDLIN(1219)												Float v7 = ::Math_obj::max(v6,( (Float)(_hx_array_unsafe_get(bb->max,0)) ));
HXDLIN(1219)												this4->__unsafe_set(0,v7);
            											}
HXDLIN(1219)											{
HXLINE(1219)												::Array< Float > this5 = _this->max;
HXDLIN(1219)												Float v8 = ( (Float)(_hx_array_unsafe_get(_this->max,1)) );
HXDLIN(1219)												Float v9 = ::Math_obj::max(v8,( (Float)(_hx_array_unsafe_get(bb->max,1)) ));
HXDLIN(1219)												this5->__unsafe_set(1,v9);
            											}
HXDLIN(1219)											{
HXLINE(1219)												::Array< Float > this6 = _this->max;
HXDLIN(1219)												Float v10 = ( (Float)(_hx_array_unsafe_get(_this->max,2)) );
HXDLIN(1219)												Float v11 = ::Math_obj::max(v10,( (Float)(_hx_array_unsafe_get(bb->max,2)) ));
HXDLIN(1219)												this6->__unsafe_set(2,v11);
            											}
            										}
HXLINE(1220)										Float buckets1 = buckets->__get(j).StaticCast<  ::apparentridges::BVHBucket >()->area;
HXDLIN(1220)										::Array< Float > this7 = bb->max;
HXDLIN(1220)										::Array< Float > rhs = bb->min;
HXDLIN(1220)										Float _x = ( (Float)(_hx_array_unsafe_get(this7,0)) );
HXDLIN(1220)										Float _x1 = (_x - ( (Float)(_hx_array_unsafe_get(rhs,0)) ));
HXDLIN(1220)										Float _y = ( (Float)(_hx_array_unsafe_get(this7,1)) );
HXDLIN(1220)										Float _y1 = (_y - ( (Float)(_hx_array_unsafe_get(rhs,1)) ));
HXDLIN(1220)										Float _z = ( (Float)(_hx_array_unsafe_get(this7,2)) );
HXDLIN(1220)										Float _z1 = (_z - ( (Float)(_hx_array_unsafe_get(rhs,2)) ));
HXDLIN(1220)										::Array< Float > this8 = ::Array_obj< Float >::__new(3);
HXDLIN(1220)										::Array< Float > this9 = this8;
HXDLIN(1220)										this9->__unsafe_set(0,_x1);
HXDLIN(1220)										this9->__unsafe_set(1,_y1);
HXDLIN(1220)										this9->__unsafe_set(2,_z1);
HXDLIN(1220)										::Array< Float > extent = this9;
HXDLIN(1220)										Float x = ::Math_obj::max(( (Float)(_hx_array_unsafe_get(extent,0)) ),( (Float)(0) ));
HXDLIN(1220)										Float y = ::Math_obj::max(( (Float)(_hx_array_unsafe_get(extent,1)) ),( (Float)(0) ));
HXDLIN(1220)										Float z = ::Math_obj::max(( (Float)(_hx_array_unsafe_get(extent,2)) ),( (Float)(0) ));
HXDLIN(1220)										buckets->__get(j).StaticCast<  ::apparentridges::BVHBucket >()->area = (buckets1 + (( (Float)(2) ) * (((x * z) + (x * y)) + (y * z))));
HXLINE(1221)										goto _hx_goto_5;
            									}
            								}
            								_hx_goto_5:;
            							}
            						}
            					}
HXLINE(1225)					{
HXLINE(1225)						int _g5 = 0;
HXDLIN(1225)						int _g6 = _gthis->bucketCount;
HXDLIN(1225)						while((_g5 < _g6)){
HXLINE(1225)							_g5 = (_g5 + 1);
HXDLIN(1225)							int i = (_g5 - 1);
HXLINE(1226)							 ::apparentridges::BVHPartition part =  ::apparentridges::BVHPartition_obj::__alloc( HX_CTX );
HXLINE(1227)							part->planeIndex = i;
HXLINE(1228)							part->axis = ax;
HXLINE(1229)							{
HXLINE(1229)								int _g = 0;
HXDLIN(1229)								int _g1 = i;
HXDLIN(1229)								while((_g < _g1)){
HXLINE(1229)									_g = (_g + 1);
HXDLIN(1229)									int j = (_g - 1);
HXLINE(1230)									 ::apparentridges::BVHPartition part1 = part;
HXDLIN(1230)									part1->leftCount = (part1->leftCount + buckets->__get(j).StaticCast<  ::apparentridges::BVHBucket >()->count);
HXLINE(1231)									 ::apparentridges::BVHPartition part2 = part;
HXDLIN(1231)									part2->leftArea = (part2->leftArea + buckets->__get(j).StaticCast<  ::apparentridges::BVHBucket >()->area);
HXLINE(1232)									{
HXLINE(1232)										 ::apparentridges::BBox _this = part->leftBBox;
HXDLIN(1232)										 ::apparentridges::BBox bb = buckets->__get(j).StaticCast<  ::apparentridges::BVHBucket >()->bbox;
HXDLIN(1232)										{
HXLINE(1232)											::Array< Float > this1 = _this->min;
HXDLIN(1232)											Float v = ( (Float)(_hx_array_unsafe_get(_this->min,0)) );
HXDLIN(1232)											Float v1 = ::Math_obj::min(v,( (Float)(_hx_array_unsafe_get(bb->min,0)) ));
HXDLIN(1232)											this1->__unsafe_set(0,v1);
            										}
HXDLIN(1232)										{
HXLINE(1232)											::Array< Float > this2 = _this->min;
HXDLIN(1232)											Float v2 = ( (Float)(_hx_array_unsafe_get(_this->min,1)) );
HXDLIN(1232)											Float v3 = ::Math_obj::min(v2,( (Float)(_hx_array_unsafe_get(bb->min,1)) ));
HXDLIN(1232)											this2->__unsafe_set(1,v3);
            										}
HXDLIN(1232)										{
HXLINE(1232)											::Array< Float > this3 = _this->min;
HXDLIN(1232)											Float v4 = ( (Float)(_hx_array_unsafe_get(_this->min,2)) );
HXDLIN(1232)											Float v5 = ::Math_obj::min(v4,( (Float)(_hx_array_unsafe_get(bb->min,2)) ));
HXDLIN(1232)											this3->__unsafe_set(2,v5);
            										}
HXDLIN(1232)										{
HXLINE(1232)											::Array< Float > this4 = _this->max;
HXDLIN(1232)											Float v6 = ( (Float)(_hx_array_unsafe_get(_this->max,0)) );
HXDLIN(1232)											Float v7 = ::Math_obj::max(v6,( (Float)(_hx_array_unsafe_get(bb->max,0)) ));
HXDLIN(1232)											this4->__unsafe_set(0,v7);
            										}
HXDLIN(1232)										{
HXLINE(1232)											::Array< Float > this5 = _this->max;
HXDLIN(1232)											Float v8 = ( (Float)(_hx_array_unsafe_get(_this->max,1)) );
HXDLIN(1232)											Float v9 = ::Math_obj::max(v8,( (Float)(_hx_array_unsafe_get(bb->max,1)) ));
HXDLIN(1232)											this5->__unsafe_set(1,v9);
            										}
HXDLIN(1232)										{
HXLINE(1232)											::Array< Float > this6 = _this->max;
HXDLIN(1232)											Float v10 = ( (Float)(_hx_array_unsafe_get(_this->max,2)) );
HXDLIN(1232)											Float v11 = ::Math_obj::max(v10,( (Float)(_hx_array_unsafe_get(bb->max,2)) ));
HXDLIN(1232)											this6->__unsafe_set(2,v11);
            										}
            									}
            								}
            							}
HXLINE(1234)							{
HXLINE(1234)								int _g2 = i;
HXDLIN(1234)								int _g3 = _gthis->bucketCount;
HXDLIN(1234)								while((_g2 < _g3)){
HXLINE(1234)									_g2 = (_g2 + 1);
HXDLIN(1234)									int j = (_g2 - 1);
HXLINE(1235)									 ::apparentridges::BVHPartition part1 = part;
HXDLIN(1235)									part1->rightCount = (part1->rightCount + buckets->__get(j).StaticCast<  ::apparentridges::BVHBucket >()->count);
HXLINE(1236)									 ::apparentridges::BVHPartition part2 = part;
HXDLIN(1236)									part2->rightArea = (part2->rightArea + buckets->__get(j).StaticCast<  ::apparentridges::BVHBucket >()->area);
HXLINE(1237)									{
HXLINE(1237)										 ::apparentridges::BBox _this = part->rightBBox;
HXDLIN(1237)										 ::apparentridges::BBox bb = buckets->__get(j).StaticCast<  ::apparentridges::BVHBucket >()->bbox;
HXDLIN(1237)										{
HXLINE(1237)											::Array< Float > this1 = _this->min;
HXDLIN(1237)											Float v = ( (Float)(_hx_array_unsafe_get(_this->min,0)) );
HXDLIN(1237)											Float v1 = ::Math_obj::min(v,( (Float)(_hx_array_unsafe_get(bb->min,0)) ));
HXDLIN(1237)											this1->__unsafe_set(0,v1);
            										}
HXDLIN(1237)										{
HXLINE(1237)											::Array< Float > this2 = _this->min;
HXDLIN(1237)											Float v2 = ( (Float)(_hx_array_unsafe_get(_this->min,1)) );
HXDLIN(1237)											Float v3 = ::Math_obj::min(v2,( (Float)(_hx_array_unsafe_get(bb->min,1)) ));
HXDLIN(1237)											this2->__unsafe_set(1,v3);
            										}
HXDLIN(1237)										{
HXLINE(1237)											::Array< Float > this3 = _this->min;
HXDLIN(1237)											Float v4 = ( (Float)(_hx_array_unsafe_get(_this->min,2)) );
HXDLIN(1237)											Float v5 = ::Math_obj::min(v4,( (Float)(_hx_array_unsafe_get(bb->min,2)) ));
HXDLIN(1237)											this3->__unsafe_set(2,v5);
            										}
HXDLIN(1237)										{
HXLINE(1237)											::Array< Float > this4 = _this->max;
HXDLIN(1237)											Float v6 = ( (Float)(_hx_array_unsafe_get(_this->max,0)) );
HXDLIN(1237)											Float v7 = ::Math_obj::max(v6,( (Float)(_hx_array_unsafe_get(bb->max,0)) ));
HXDLIN(1237)											this4->__unsafe_set(0,v7);
            										}
HXDLIN(1237)										{
HXLINE(1237)											::Array< Float > this5 = _this->max;
HXDLIN(1237)											Float v8 = ( (Float)(_hx_array_unsafe_get(_this->max,1)) );
HXDLIN(1237)											Float v9 = ::Math_obj::max(v8,( (Float)(_hx_array_unsafe_get(bb->max,1)) ));
HXDLIN(1237)											this5->__unsafe_set(1,v9);
            										}
HXDLIN(1237)										{
HXLINE(1237)											::Array< Float > this6 = _this->max;
HXDLIN(1237)											Float v10 = ( (Float)(_hx_array_unsafe_get(_this->max,2)) );
HXDLIN(1237)											Float v11 = ::Math_obj::max(v10,( (Float)(_hx_array_unsafe_get(bb->max,2)) ));
HXDLIN(1237)											this6->__unsafe_set(2,v11);
            										}
            									}
            								}
            							}
HXLINE(1239)							bool _hx_tmp;
HXDLIN(1239)							if ((part->leftCount > 0)) {
HXLINE(1239)								_hx_tmp = (part->rightCount > 0);
            							}
            							else {
HXLINE(1239)								_hx_tmp = false;
            							}
HXDLIN(1239)							if (_hx_tmp) {
HXLINE(1240)								 ::apparentridges::BBox _this = part->leftBBox;
HXDLIN(1240)								::Array< Float > this1 = _this->max;
HXDLIN(1240)								::Array< Float > rhs = _this->min;
HXDLIN(1240)								Float _x = ( (Float)(_hx_array_unsafe_get(this1,0)) );
HXDLIN(1240)								Float _x1 = (_x - ( (Float)(_hx_array_unsafe_get(rhs,0)) ));
HXDLIN(1240)								Float _y = ( (Float)(_hx_array_unsafe_get(this1,1)) );
HXDLIN(1240)								Float _y1 = (_y - ( (Float)(_hx_array_unsafe_get(rhs,1)) ));
HXDLIN(1240)								Float _z = ( (Float)(_hx_array_unsafe_get(this1,2)) );
HXDLIN(1240)								Float _z1 = (_z - ( (Float)(_hx_array_unsafe_get(rhs,2)) ));
HXDLIN(1240)								::Array< Float > this2 = ::Array_obj< Float >::__new(3);
HXDLIN(1240)								::Array< Float > this3 = this2;
HXDLIN(1240)								this3->__unsafe_set(0,_x1);
HXDLIN(1240)								this3->__unsafe_set(1,_y1);
HXDLIN(1240)								this3->__unsafe_set(2,_z1);
HXDLIN(1240)								::Array< Float > extent = this3;
HXDLIN(1240)								Float x = ::Math_obj::max(( (Float)(_hx_array_unsafe_get(extent,0)) ),( (Float)(0) ));
HXDLIN(1240)								Float y = ::Math_obj::max(( (Float)(_hx_array_unsafe_get(extent,1)) ),( (Float)(0) ));
HXDLIN(1240)								Float z = ::Math_obj::max(( (Float)(_hx_array_unsafe_get(extent,2)) ),( (Float)(0) ));
HXDLIN(1240)								Float _hx_tmp = ((( (Float)(2) ) * (((x * z) + (x * y)) + (y * z))) / ( (Float)(part->leftCount) ));
HXLINE(1241)								 ::apparentridges::BBox _this1 = part->rightBBox;
HXDLIN(1241)								::Array< Float > this4 = _this1->max;
HXDLIN(1241)								::Array< Float > rhs1 = _this1->min;
HXDLIN(1241)								Float _x2 = ( (Float)(_hx_array_unsafe_get(this4,0)) );
HXDLIN(1241)								Float _x3 = (_x2 - ( (Float)(_hx_array_unsafe_get(rhs1,0)) ));
HXDLIN(1241)								Float _y2 = ( (Float)(_hx_array_unsafe_get(this4,1)) );
HXDLIN(1241)								Float _y3 = (_y2 - ( (Float)(_hx_array_unsafe_get(rhs1,1)) ));
HXDLIN(1241)								Float _z2 = ( (Float)(_hx_array_unsafe_get(this4,2)) );
HXDLIN(1241)								Float _z3 = (_z2 - ( (Float)(_hx_array_unsafe_get(rhs1,2)) ));
HXDLIN(1241)								::Array< Float > this5 = ::Array_obj< Float >::__new(3);
HXDLIN(1241)								::Array< Float > this6 = this5;
HXDLIN(1241)								this6->__unsafe_set(0,_x3);
HXDLIN(1241)								this6->__unsafe_set(1,_y3);
HXDLIN(1241)								this6->__unsafe_set(2,_z3);
HXDLIN(1241)								::Array< Float > extent1 = this6;
HXDLIN(1241)								Float x1 = ::Math_obj::max(( (Float)(_hx_array_unsafe_get(extent1,0)) ),( (Float)(0) ));
HXDLIN(1241)								Float y1 = ::Math_obj::max(( (Float)(_hx_array_unsafe_get(extent1,1)) ),( (Float)(0) ));
HXDLIN(1241)								Float z1 = ::Math_obj::max(( (Float)(_hx_array_unsafe_get(extent1,2)) ),( (Float)(0) ));
HXLINE(1240)								part->SAH = (_hx_tmp + ((( (Float)(2) ) * (((x1 * z1) + (x1 * y1)) + (y1 * z1))) / ( (Float)(part->rightCount) )));
HXLINE(1242)								parts->push(part);
            							}
            						}
            					}
            				}
            			}
HXLINE(1246)			if ((parts->length == 0)) {
HXLINE(1247)				return node;
            			}
HXLINE(1249)			Float minSAH = ::Math_obj::POSITIVE_INFINITY;
HXLINE(1250)			 ::apparentridges::BVHPartition minPart = null();
HXLINE(1251)			{
HXLINE(1251)				int _g3 = 0;
HXDLIN(1251)				while((_g3 < parts->length)){
HXLINE(1251)					 ::apparentridges::BVHPartition p = parts->__get(_g3).StaticCast<  ::apparentridges::BVHPartition >();
HXDLIN(1251)					_g3 = (_g3 + 1);
HXLINE(1252)					if ((p->SAH < minSAH)) {
HXLINE(1253)						minSAH = p->SAH;
HXLINE(1254)						minPart = p;
            					}
            				}
            			}
HXLINE(1257)			 ::Dynamic comp =  ::Dynamic(new _hx_Closure_1(bboxAddFace,minPart));
HXLINE(1267)			::Array< ::Dynamic> sorted = _gthis->faces->slice(i0,i1);
HXLINE(1268)			sorted->sort(comp);
HXLINE(1269)			{
HXLINE(1269)				int _g4 = i0;
HXDLIN(1269)				int _g5 = i1;
HXDLIN(1269)				while((_g4 < _g5)){
HXLINE(1269)					_g4 = (_g4 + 1);
HXDLIN(1269)					int i = (_g4 - 1);
HXLINE(1270)					_gthis->faces[i] = sorted->__get((i - i0)).StaticCast< ::Array< int > >();
            				}
            			}
HXLINE(1272)			int m = (i0 + minPart->leftCount);
HXLINE(1273)			node->left = ( ( ::apparentridges::BVHNode)(buildRange->__get(0)(i0,m)) );
HXLINE(1274)			node->right = ( ( ::apparentridges::BVHNode)(buildRange->__get(0)(m,i1)) );
HXLINE(1276)			return node;
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACKFRAME(&_hx_pos_4fa810f43e5c5572_1185_build)
HXDLIN(1185)		 ::apparentridges::BVHTree _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1186)		 ::Dynamic bboxAddFace =  ::Dynamic(new _hx_Closure_0(_gthis));
HXLINE(1191)		::Array< ::Dynamic> buildRange = ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
HXDLIN(1191)		buildRange[0] =  ::Dynamic(new _hx_Closure_2(bboxAddFace,_gthis,buildRange));
HXLINE(1278)		this->root = ( ( ::apparentridges::BVHNode)(buildRange->__get(0)(0,this->faces->length)) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(BVHTree_obj,build,(void))


::hx::ObjectPtr< BVHTree_obj > BVHTree_obj::__new( ::apparentridges::Mesh _mesh,::hx::Null< int >  __o__maxLeafSize,::hx::Null< int >  __o__bucketCount) {
	::hx::ObjectPtr< BVHTree_obj > __this = new BVHTree_obj();
	__this->__construct(_mesh,__o__maxLeafSize,__o__bucketCount);
	return __this;
}

::hx::ObjectPtr< BVHTree_obj > BVHTree_obj::__alloc(::hx::Ctx *_hx_ctx, ::apparentridges::Mesh _mesh,::hx::Null< int >  __o__maxLeafSize,::hx::Null< int >  __o__bucketCount) {
	BVHTree_obj *__this = (BVHTree_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(BVHTree_obj), true, "apparentridges.BVHTree"));
	*(void **)__this = BVHTree_obj::_hx_vtable;
	__this->__construct(_mesh,__o__maxLeafSize,__o__bucketCount);
	return __this;
}

BVHTree_obj::BVHTree_obj()
{
}

void BVHTree_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BVHTree);
	HX_MARK_MEMBER_NAME(root,"root");
	HX_MARK_MEMBER_NAME(mesh,"mesh");
	HX_MARK_MEMBER_NAME(faces,"faces");
	HX_MARK_MEMBER_NAME(maxLeafSize,"maxLeafSize");
	HX_MARK_MEMBER_NAME(bucketCount,"bucketCount");
	HX_MARK_END_CLASS();
}

void BVHTree_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(root,"root");
	HX_VISIT_MEMBER_NAME(mesh,"mesh");
	HX_VISIT_MEMBER_NAME(faces,"faces");
	HX_VISIT_MEMBER_NAME(maxLeafSize,"maxLeafSize");
	HX_VISIT_MEMBER_NAME(bucketCount,"bucketCount");
}

::hx::Val BVHTree_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"root") ) { return ::hx::Val( root ); }
		if (HX_FIELD_EQ(inName,"mesh") ) { return ::hx::Val( mesh ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"faces") ) { return ::hx::Val( faces ); }
		if (HX_FIELD_EQ(inName,"build") ) { return ::hx::Val( build_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"maxLeafSize") ) { return ::hx::Val( maxLeafSize ); }
		if (HX_FIELD_EQ(inName,"bucketCount") ) { return ::hx::Val( bucketCount ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val BVHTree_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"root") ) { root=inValue.Cast<  ::apparentridges::BVHNode >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mesh") ) { mesh=inValue.Cast<  ::apparentridges::Mesh >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"faces") ) { faces=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"maxLeafSize") ) { maxLeafSize=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bucketCount") ) { bucketCount=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void BVHTree_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("root",22,ee,ae,4b));
	outFields->push(HX_("mesh",ed,49,59,48));
	outFields->push(HX_("faces",36,55,48,fb));
	outFields->push(HX_("maxLeafSize",43,02,b0,b9));
	outFields->push(HX_("bucketCount",05,90,8d,59));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo BVHTree_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::apparentridges::BVHNode */ ,(int)offsetof(BVHTree_obj,root),HX_("root",22,ee,ae,4b)},
	{::hx::fsObject /*  ::apparentridges::Mesh */ ,(int)offsetof(BVHTree_obj,mesh),HX_("mesh",ed,49,59,48)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(BVHTree_obj,faces),HX_("faces",36,55,48,fb)},
	{::hx::fsInt,(int)offsetof(BVHTree_obj,maxLeafSize),HX_("maxLeafSize",43,02,b0,b9)},
	{::hx::fsInt,(int)offsetof(BVHTree_obj,bucketCount),HX_("bucketCount",05,90,8d,59)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *BVHTree_obj_sStaticStorageInfo = 0;
#endif

static ::String BVHTree_obj_sMemberFields[] = {
	HX_("root",22,ee,ae,4b),
	HX_("mesh",ed,49,59,48),
	HX_("faces",36,55,48,fb),
	HX_("maxLeafSize",43,02,b0,b9),
	HX_("bucketCount",05,90,8d,59),
	HX_("build",2e,db,ea,ba),
	::String(null()) };

::hx::Class BVHTree_obj::__mClass;

void BVHTree_obj::__register()
{
	BVHTree_obj _hx_dummy;
	BVHTree_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("apparentridges.BVHTree",05,bc,46,ca);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(BVHTree_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< BVHTree_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BVHTree_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BVHTree_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace apparentridges
