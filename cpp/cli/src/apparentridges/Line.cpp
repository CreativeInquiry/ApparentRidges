// Generated by Haxe 4.1.3
#include <hxcpp.h>

#ifndef INCLUDED_apparentridges_Line
#include <apparentridges/Line.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_777862f6d00c0fdb_1366_new,"apparentridges.Line","new",0x5421f313,"apparentridges.Line.new","apparentridges/ApparentRidges.hx",1366,0xfeacc84f)
HX_LOCAL_STACK_FRAME(_hx_pos_777862f6d00c0fdb_1379_setOpacity,"apparentridges.Line","setOpacity",0xd1a46bf6,"apparentridges.Line.setOpacity","apparentridges/ApparentRidges.hx",1379,0xfeacc84f)
HX_LOCAL_STACK_FRAME(_hx_pos_777862f6d00c0fdb_1383_flip,"apparentridges.Line","flip",0x444e4c9a,"apparentridges.Line.flip","apparentridges/ApparentRidges.hx",1383,0xfeacc84f)
namespace apparentridges{

void Line_obj::__construct(Float _x1,Float _y1,Float _x2,Float _y2){
            	HX_STACKFRAME(&_hx_pos_777862f6d00c0fdb_1366_new)
HXLINE(1372)		this->opacity2 = ((Float)1);
HXLINE(1371)		this->opacity1 = ((Float)1);
HXLINE(1374)		this->x1 = _x1;
HXLINE(1375)		this->y1 = _y1;
HXLINE(1376)		this->x2 = _x2;
HXLINE(1377)		this->y2 = _y2;
            	}

Dynamic Line_obj::__CreateEmpty() { return new Line_obj; }

void *Line_obj::_hx_vtable = 0;

Dynamic Line_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Line_obj > _hx_result = new Line_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool Line_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x492c8255;
}

void Line_obj::setOpacity(Float o1,Float o2){
            	HX_STACKFRAME(&_hx_pos_777862f6d00c0fdb_1379_setOpacity)
HXLINE(1380)		this->opacity1 = o1;
HXLINE(1381)		this->opacity2 = o2;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Line_obj,setOpacity,(void))

void Line_obj::flip(){
            	HX_STACKFRAME(&_hx_pos_777862f6d00c0fdb_1383_flip)
HXLINE(1384)		Float tmp = this->x1;
HXLINE(1386)		this->x1 = this->x2;
HXLINE(1387)		this->x2 = tmp;
HXLINE(1388)		tmp = this->y1;
HXLINE(1389)		this->y1 = this->y2;
HXLINE(1390)		this->y2 = tmp;
HXLINE(1391)		tmp = this->opacity1;
HXLINE(1392)		this->opacity1 = this->opacity2;
HXLINE(1393)		this->opacity2 = tmp;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Line_obj,flip,(void))


Line_obj::Line_obj()
{
}

::hx::Val Line_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"x1") ) { return ::hx::Val( x1 ); }
		if (HX_FIELD_EQ(inName,"y1") ) { return ::hx::Val( y1 ); }
		if (HX_FIELD_EQ(inName,"x2") ) { return ::hx::Val( x2 ); }
		if (HX_FIELD_EQ(inName,"y2") ) { return ::hx::Val( y2 ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"flip") ) { return ::hx::Val( flip_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"opacity1") ) { return ::hx::Val( opacity1 ); }
		if (HX_FIELD_EQ(inName,"opacity2") ) { return ::hx::Val( opacity2 ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"setOpacity") ) { return ::hx::Val( setOpacity_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Line_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"x1") ) { x1=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y1") ) { y1=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"x2") ) { x2=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y2") ) { y2=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"opacity1") ) { opacity1=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"opacity2") ) { opacity2=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Line_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("x1",b9,68,00,00));
	outFields->push(HX_("y1",98,69,00,00));
	outFields->push(HX_("x2",ba,68,00,00));
	outFields->push(HX_("y2",99,69,00,00));
	outFields->push(HX_("opacity1",06,b4,4c,0d));
	outFields->push(HX_("opacity2",07,b4,4c,0d));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Line_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(Line_obj,x1),HX_("x1",b9,68,00,00)},
	{::hx::fsFloat,(int)offsetof(Line_obj,y1),HX_("y1",98,69,00,00)},
	{::hx::fsFloat,(int)offsetof(Line_obj,x2),HX_("x2",ba,68,00,00)},
	{::hx::fsFloat,(int)offsetof(Line_obj,y2),HX_("y2",99,69,00,00)},
	{::hx::fsFloat,(int)offsetof(Line_obj,opacity1),HX_("opacity1",06,b4,4c,0d)},
	{::hx::fsFloat,(int)offsetof(Line_obj,opacity2),HX_("opacity2",07,b4,4c,0d)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Line_obj_sStaticStorageInfo = 0;
#endif

static ::String Line_obj_sMemberFields[] = {
	HX_("x1",b9,68,00,00),
	HX_("y1",98,69,00,00),
	HX_("x2",ba,68,00,00),
	HX_("y2",99,69,00,00),
	HX_("opacity1",06,b4,4c,0d),
	HX_("opacity2",07,b4,4c,0d),
	HX_("setOpacity",49,82,44,3e),
	HX_("flip",ad,12,be,43),
	::String(null()) };

::hx::Class Line_obj::__mClass;

void Line_obj::__register()
{
	Line_obj _hx_dummy;
	Line_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("apparentridges.Line",a1,6d,a8,60);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Line_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Line_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Line_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Line_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace apparentridges
