// Generated by Haxe 4.1.3
#include <hxcpp.h>

#ifndef INCLUDED_5f5af744d9ff5693
#define INCLUDED_5f5af744d9ff5693
#include "cpp/Pointer.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringBuf
#include <StringBuf.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_0e615b5827179e15_222_startsWith,"StringTools","startsWith",0x5f4e6efb,"StringTools.startsWith","/usr/local/lib/haxe/std/StringTools.hx",222,0x3f930611)
HX_LOCAL_STACK_FRAME(_hx_pos_0e615b5827179e15_279_isSpace,"StringTools","isSpace",0xe0290778,"StringTools.isSpace","/usr/local/lib/haxe/std/StringTools.hx",279,0x3f930611)
HX_LOCAL_STACK_FRAME(_hx_pos_0e615b5827179e15_297_ltrim,"StringTools","ltrim",0x24d2234a,"StringTools.ltrim","/usr/local/lib/haxe/std/StringTools.hx",297,0x3f930611)
HX_LOCAL_STACK_FRAME(_hx_pos_0e615b5827179e15_322_rtrim,"StringTools","rtrim",0x99399e50,"StringTools.rtrim","/usr/local/lib/haxe/std/StringTools.hx",322,0x3f930611)
HX_LOCAL_STACK_FRAME(_hx_pos_0e615b5827179e15_350_trim,"StringTools","trim",0x2908d066,"StringTools.trim","/usr/local/lib/haxe/std/StringTools.hx",350,0x3f930611)
HX_LOCAL_STACK_FRAME(_hx_pos_0e615b5827179e15_391_rpad,"StringTools","rpad",0x27b4d7a5,"StringTools.rpad","/usr/local/lib/haxe/std/StringTools.hx",391,0x3f930611)
HX_LOCAL_STACK_FRAME(_hx_pos_0e615b5827179e15_425_replace,"StringTools","replace",0x6d651f30,"StringTools.replace","/usr/local/lib/haxe/std/StringTools.hx",425,0x3f930611)

void StringTools_obj::__construct() { }

Dynamic StringTools_obj::__CreateEmpty() { return new StringTools_obj; }

void *StringTools_obj::_hx_vtable = 0;

Dynamic StringTools_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< StringTools_obj > _hx_result = new StringTools_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool StringTools_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x084f186e;
}

bool StringTools_obj::startsWith(::String s,::String start){
            	HX_STACKFRAME(&_hx_pos_0e615b5827179e15_222_startsWith)
HXLINE( 228)		if ((s.length < start.length)) {
HXLINE( 229)			return false;
            		}
HXLINE( 230)		::cpp::Pointer< char > p0 = cpp::Pointer_obj::fromPointer(s.c_str());
HXLINE( 231)		::cpp::Pointer< char > p1 = cpp::Pointer_obj::fromPointer(start.c_str());
HXLINE( 232)		{
HXLINE( 232)			int _g = 0;
HXDLIN( 232)			int _g1 = start.length;
HXDLIN( 232)			while((_g < _g1)){
HXLINE( 232)				_g = (_g + 1);
HXDLIN( 232)				int i = (_g - 1);
HXLINE( 233)				char & _hx_tmp = p0->at(i);
HXDLIN( 233)				char & _hx_tmp1 = p1->at(i);
HXDLIN( 233)				if (::hx::IsNotEq( _hx_tmp,_hx_tmp1 )) {
HXLINE( 234)					return false;
            				}
            			}
            		}
HXLINE( 235)		return true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(StringTools_obj,startsWith,return )

bool StringTools_obj::isSpace(::String s,int pos){
            	HX_STACKFRAME(&_hx_pos_0e615b5827179e15_279_isSpace)
HXLINE( 284)		 ::Dynamic c = s.charCodeAt(pos);
HXLINE( 285)		bool _hx_tmp;
HXDLIN( 285)		if (::hx::IsGreater( c,8 )) {
HXLINE( 285)			_hx_tmp = ::hx::IsLess( c,14 );
            		}
            		else {
HXLINE( 285)			_hx_tmp = false;
            		}
HXDLIN( 285)		if (!(_hx_tmp)) {
HXLINE( 285)			return ::hx::IsEq( c,32 );
            		}
            		else {
HXLINE( 285)			return true;
            		}
HXDLIN( 285)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(StringTools_obj,isSpace,return )

::String StringTools_obj::ltrim(::String s){
            	HX_STACKFRAME(&_hx_pos_0e615b5827179e15_297_ltrim)
HXLINE( 301)		int l = s.length;
HXLINE( 302)		int r = 0;
HXLINE( 303)		while(true){
HXLINE( 303)			bool _hx_tmp;
HXDLIN( 303)			if ((r < l)) {
HXLINE( 303)				_hx_tmp = ::StringTools_obj::isSpace(s,r);
            			}
            			else {
HXLINE( 303)				_hx_tmp = false;
            			}
HXDLIN( 303)			if (!(_hx_tmp)) {
HXLINE( 303)				goto _hx_goto_3;
            			}
HXLINE( 304)			r = (r + 1);
            		}
            		_hx_goto_3:;
HXLINE( 306)		if ((r > 0)) {
HXLINE( 307)			return s.substr(r,(l - r));
            		}
            		else {
HXLINE( 309)			return s;
            		}
HXLINE( 306)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(StringTools_obj,ltrim,return )

::String StringTools_obj::rtrim(::String s){
            	HX_STACKFRAME(&_hx_pos_0e615b5827179e15_322_rtrim)
HXLINE( 326)		int l = s.length;
HXLINE( 327)		int r = 0;
HXLINE( 328)		while(true){
HXLINE( 328)			bool _hx_tmp;
HXDLIN( 328)			if ((r < l)) {
HXLINE( 328)				_hx_tmp = ::StringTools_obj::isSpace(s,((l - r) - 1));
            			}
            			else {
HXLINE( 328)				_hx_tmp = false;
            			}
HXDLIN( 328)			if (!(_hx_tmp)) {
HXLINE( 328)				goto _hx_goto_5;
            			}
HXLINE( 329)			r = (r + 1);
            		}
            		_hx_goto_5:;
HXLINE( 331)		if ((r > 0)) {
HXLINE( 332)			return s.substr(0,(l - r));
            		}
            		else {
HXLINE( 334)			return s;
            		}
HXLINE( 331)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(StringTools_obj,rtrim,return )

::String StringTools_obj::trim(::String s){
            	HX_STACKFRAME(&_hx_pos_0e615b5827179e15_350_trim)
HXDLIN( 350)		return ::StringTools_obj::ltrim(::StringTools_obj::rtrim(s));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(StringTools_obj,trim,return )

::String StringTools_obj::rpad(::String s,::String c,int l){
            	HX_GC_STACKFRAME(&_hx_pos_0e615b5827179e15_391_rpad)
HXLINE( 392)		if ((c.length <= 0)) {
HXLINE( 393)			return s;
            		}
HXLINE( 395)		 ::StringBuf buf =  ::StringBuf_obj::__alloc( HX_CTX );
HXLINE( 396)		{
HXLINE( 396)			if (::hx::IsNotNull( buf->charBuf )) {
HXLINE( 396)				buf->flush();
            			}
HXDLIN( 396)			if (::hx::IsNull( buf->b )) {
HXLINE( 396)				buf->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(s));
            			}
            			else {
HXLINE( 396)				::Array< ::String > buf1 = buf->b;
HXDLIN( 396)				buf1->push(::Std_obj::string(s));
            			}
            		}
HXLINE( 397)		while((buf->get_length() < l)){
HXLINE( 398)			if (::hx::IsNotNull( buf->charBuf )) {
HXLINE( 398)				buf->flush();
            			}
HXDLIN( 398)			if (::hx::IsNull( buf->b )) {
HXLINE( 398)				buf->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(c));
            			}
            			else {
HXLINE( 398)				::Array< ::String > buf1 = buf->b;
HXDLIN( 398)				buf1->push(::Std_obj::string(c));
            			}
            		}
HXLINE( 400)		return buf->toString();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(StringTools_obj,rpad,return )

::String StringTools_obj::replace(::String s,::String sub,::String by){
            	HX_STACKFRAME(&_hx_pos_0e615b5827179e15_425_replace)
HXDLIN( 425)		return s.split(sub)->join(by);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(StringTools_obj,replace,return )


StringTools_obj::StringTools_obj()
{
}

bool StringTools_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"trim") ) { outValue = trim_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"rpad") ) { outValue = rpad_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"ltrim") ) { outValue = ltrim_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"rtrim") ) { outValue = rtrim_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"isSpace") ) { outValue = isSpace_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"replace") ) { outValue = replace_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"startsWith") ) { outValue = startsWith_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *StringTools_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *StringTools_obj_sStaticStorageInfo = 0;
#endif

::hx::Class StringTools_obj::__mClass;

static ::String StringTools_obj_sStaticFields[] = {
	HX_("startsWith",77,c0,cf,f9),
	HX_("isSpace",7c,30,ec,1d),
	HX_("ltrim",4e,43,4a,7c),
	HX_("rtrim",54,be,b1,f0),
	HX_("trim",e2,9c,03,4d),
	HX_("rpad",21,a4,af,4b),
	HX_("replace",34,48,28,ab),
	::String(null())
};

void StringTools_obj::__register()
{
	StringTools_obj _hx_dummy;
	StringTools_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("StringTools",6a,db,63,03);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &StringTools_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(StringTools_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< StringTools_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = StringTools_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = StringTools_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

