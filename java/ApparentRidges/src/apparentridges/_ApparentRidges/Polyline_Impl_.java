// Generated by Haxe 4.1.3
package apparentridges._ApparentRidges;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public final class Polyline_Impl_
{
	
	
	public static haxe.root.Array<double[]> _new()
	{
		haxe.root.Array<double[]> this1 = new haxe.root.Array<double[]>(new double[][]{});
		return ((haxe.root.Array<double[]>) (this1) );
	}
	
	
	public static int get_length(haxe.root.Array<double[]> this1)
	{
		return this1.length;
	}
	
	
	public static int set_length(haxe.root.Array<double[]> this1, int v)
	{
		return this1.length;
	}
	
	
	public static int startY(haxe.root.Array<double[]> this1)
	{
		return ((int) (((double) (((int) (java.lang.Math.round(((double[]) (this1.__get(0)) )[1])) )) )) );
	}
	
	
	public static int endY(haxe.root.Array<double[]> this1)
	{
		return ((int) (((double) (((int) (java.lang.Math.round(((double[]) (this1.__get(( this1.length - 1 ))) )[1])) )) )) );
	}
	
	
	public static double startX(haxe.root.Array<double[]> this1)
	{
		return ((double[]) (this1.__get(0)) )[0];
	}
	
	
	public static double endX(haxe.root.Array<double[]> this1)
	{
		return ((double[]) (this1.__get(( this1.length - 1 ))) )[0];
	}
	
	
	public static double[] get(haxe.root.Array<double[]> this1, int i)
	{
		return this1.__get(i);
	}
	
	
	public static double[] set(haxe.root.Array<double[]> this1, int i, double[] v)
	{
		this1.__set(i, v);
		return v;
	}
	
	
	public static int push(haxe.root.Array<double[]> this1, double[] v)
	{
		this1.push(v);
		return this1.length;
	}
	
	
	public static void unshift(haxe.root.Array<double[]> this1, double[] v)
	{
		this1.unshift(v);
	}
	
	
}


