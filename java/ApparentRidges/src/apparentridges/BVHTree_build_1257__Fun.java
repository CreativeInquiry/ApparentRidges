// Generated by Haxe 4.1.3
package apparentridges;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class BVHTree_build_1257__Fun extends haxe.lang.Function
{
	public BVHTree_build_1257__Fun(apparentridges.BVHPartition minPart, haxe.lang.Function bboxAddFace)
	{
		super(2, 1);
		this.minPart = minPart;
		this.bboxAddFace = bboxAddFace;
	}
	
	
	@Override public double __hx_invoke2_f(double __fn_float1, java.lang.Object __fn_dyn1, double __fn_float2, java.lang.Object __fn_dyn2)
	{
		int[] f1 = ( (( __fn_dyn2 == haxe.lang.Runtime.undefined )) ? (((int[]) (((java.lang.Object) (__fn_float2) )) )) : (((int[]) (__fn_dyn2) )) );
		int[] f0 = ( (( __fn_dyn1 == haxe.lang.Runtime.undefined )) ? (((int[]) (((java.lang.Object) (__fn_float1) )) )) : (((int[]) (__fn_dyn1) )) );
		apparentridges.BBox bb0 = new apparentridges.BBox();
		apparentridges.BBox bb1 = new apparentridges.BBox();
		this.bboxAddFace.__hx_invoke2_o(0.0, bb0, 0.0, f0);
		this.bboxAddFace.__hx_invoke2_o(0.0, bb1, 0.0, f1);
		double[] this1 = bb0.min;
		double[] rhs = bb0.max;
		double[] this2 = new double[3];
		double[] this3 = ((double[]) (this2) );
		((double[]) (this3) )[0] = ( ((double[]) (this1) )[0] + ((double[]) (rhs) )[0] );
		((double[]) (this3) )[1] = ( ((double[]) (this1) )[1] + ((double[]) (rhs) )[1] );
		((double[]) (this3) )[2] = ( ((double[]) (this1) )[2] + ((double[]) (rhs) )[2] );
		double[] this4 = ((double[]) (this3) );
		double[] this5 = new double[3];
		double[] this6 = ((double[]) (this5) );
		((double[]) (this6) )[0] = ( ((double[]) (this4) )[0] * 0.5 );
		((double[]) (this6) )[1] = ( ((double[]) (this4) )[1] * 0.5 );
		((double[]) (this6) )[2] = ( ((double[]) (this4) )[2] * 0.5 );
		double v = ((double[]) (this6) )[this.minPart.axis];
		double[] this7 = bb1.min;
		double[] rhs1 = bb1.max;
		double[] this8 = new double[3];
		double[] this9 = ((double[]) (this8) );
		((double[]) (this9) )[0] = ( ((double[]) (this7) )[0] + ((double[]) (rhs1) )[0] );
		((double[]) (this9) )[1] = ( ((double[]) (this7) )[1] + ((double[]) (rhs1) )[1] );
		((double[]) (this9) )[2] = ( ((double[]) (this7) )[2] + ((double[]) (rhs1) )[2] );
		double[] this10 = ((double[]) (this9) );
		double[] this11 = new double[3];
		double[] this12 = ((double[]) (this11) );
		((double[]) (this12) )[0] = ( ((double[]) (this10) )[0] * 0.5 );
		((double[]) (this12) )[1] = ( ((double[]) (this10) )[1] * 0.5 );
		((double[]) (this12) )[2] = ( ((double[]) (this10) )[2] * 0.5 );
		double v1 = ( v - ((double[]) (this12) )[this.minPart.axis] );
		if (( v1 < 0 )) 
		{
			return ((double) (-1) );
		}
		
		if (( v1 > 0 )) 
		{
			return ((double) (1) );
		}
		
		return ((double) (0) );
	}
	
	
	public apparentridges.BVHPartition minPart;
	
	public haxe.lang.Function bboxAddFace;
	
}


