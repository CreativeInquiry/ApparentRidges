// Generated by Haxe 4.1.3
package apparentridges;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class Mesh extends haxe.lang.HxObject
{
	public Mesh(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public Mesh()
	{
		apparentridges.Mesh.__hx_ctor_apparentridges_Mesh(this);
	}
	
	
	protected static void __hx_ctor_apparentridges_Mesh(apparentridges.Mesh __hx_this)
	{
		__hx_this.Dt1q1 = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
		__hx_this.t1q1 = new haxe.root.Array<double[]>(new double[][]{});
		__hx_this.ndotv = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
		__hx_this.adjacentFaces = new haxe.root.Array<haxe.root.Array<java.lang.Object>>(new haxe.root.Array[]{});
		__hx_this.cornerAreas = new haxe.root.Array<double[]>(new double[][]{});
		__hx_this.pointAreas = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
		__hx_this.pdir2 = new haxe.root.Array<double[]>(new double[][]{});
		__hx_this.pdir1 = new haxe.root.Array<double[]>(new double[][]{});
		__hx_this.curv2 = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
		__hx_this.curv1 = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
		__hx_this.normals = new haxe.root.Array<double[]>(new double[][]{});
		__hx_this.faces = new haxe.root.Array<int[]>(new int[][]{});
		__hx_this.vertices = new haxe.root.Array<double[]>(new double[][]{});
		{
		}
		
	}
	
	
	public static void rotCoordSys(double[] old_u, double[] old_v, double[] new_norm, double[] new_u, double[] new_v)
	{
		{
			((double[]) (new_u) )[0] = ((double[]) (old_u) )[0];
			((double[]) (new_u) )[1] = ((double[]) (old_u) )[1];
			((double[]) (new_u) )[2] = ((double[]) (old_u) )[2];
		}
		
		{
			((double[]) (new_v) )[0] = ((double[]) (old_v) )[0];
			((double[]) (new_v) )[1] = ((double[]) (old_v) )[1];
			((double[]) (new_v) )[2] = ((double[]) (old_v) )[2];
		}
		
		double[] this1 = new double[3];
		double[] this2 = ((double[]) (this1) );
		((double[]) (this2) )[0] = ( ( ((double[]) (old_u) )[1] * ((double[]) (old_v) )[2] ) - ( ((double[]) (old_u) )[2] * ((double[]) (old_v) )[1] ) );
		((double[]) (this2) )[1] = ( ( ((double[]) (old_u) )[2] * ((double[]) (old_v) )[0] ) - ( ((double[]) (old_u) )[0] * ((double[]) (old_v) )[2] ) );
		((double[]) (this2) )[2] = ( ( ((double[]) (old_u) )[0] * ((double[]) (old_v) )[1] ) - ( ((double[]) (old_u) )[1] * ((double[]) (old_v) )[0] ) );
		double[] old_norm = ((double[]) (this2) );
		double ndot = ( ( ( ((double[]) (old_norm) )[0] * ((double[]) (new_norm) )[0] ) + ( ((double[]) (old_norm) )[1] * ((double[]) (new_norm) )[1] ) ) + ( ((double[]) (old_norm) )[2] * ((double[]) (new_norm) )[2] ) );
		if (( ndot <= -1 )) 
		{
			{
				((double[]) (new_u) )[0] *= ((double) (-1) );
				((double[]) (new_u) )[1] *= ((double) (-1) );
				((double[]) (new_u) )[2] *= ((double) (-1) );
			}
			
			{
				((double[]) (new_v) )[0] *= ((double) (-1) );
				((double[]) (new_v) )[1] *= ((double) (-1) );
				((double[]) (new_v) )[2] *= ((double) (-1) );
			}
			
			return ;
		}
		
		double[] this3 = new double[3];
		double[] this4 = ((double[]) (this3) );
		((double[]) (this4) )[0] = ( ((double[]) (old_norm) )[0] * ndot );
		((double[]) (this4) )[1] = ( ((double[]) (old_norm) )[1] * ndot );
		((double[]) (this4) )[2] = ( ((double[]) (old_norm) )[2] * ndot );
		double[] rhs = ((double[]) (this4) );
		double[] this5 = new double[3];
		double[] this6 = ((double[]) (this5) );
		((double[]) (this6) )[0] = ( ((double[]) (new_norm) )[0] - ((double[]) (rhs) )[0] );
		((double[]) (this6) )[1] = ( ((double[]) (new_norm) )[1] - ((double[]) (rhs) )[1] );
		((double[]) (this6) )[2] = ( ((double[]) (new_norm) )[2] - ((double[]) (rhs) )[2] );
		double[] perp_old = ((double[]) (this6) );
		double[] this7 = new double[3];
		double[] this8 = ((double[]) (this7) );
		((double[]) (this8) )[0] = ( ((double[]) (old_norm) )[0] + ((double[]) (new_norm) )[0] );
		((double[]) (this8) )[1] = ( ((double[]) (old_norm) )[1] + ((double[]) (new_norm) )[1] );
		((double[]) (this8) )[2] = ( ((double[]) (old_norm) )[2] + ((double[]) (new_norm) )[2] );
		double[] this9 = ((double[]) (this8) );
		double rhs1 = ( 1 / (( 1 + ndot )) );
		double[] this10 = new double[3];
		double[] this11 = ((double[]) (this10) );
		((double[]) (this11) )[0] = ( ((double[]) (this9) )[0] * rhs1 );
		((double[]) (this11) )[1] = ( ((double[]) (this9) )[1] * rhs1 );
		((double[]) (this11) )[2] = ( ((double[]) (this9) )[2] * rhs1 );
		double[] dperp = ((double[]) (this11) );
		double rhs2 = ( ( ( ((double[]) (new_u) )[0] * ((double[]) (perp_old) )[0] ) + ( ((double[]) (new_u) )[1] * ((double[]) (perp_old) )[1] ) ) + ( ((double[]) (new_u) )[2] * ((double[]) (perp_old) )[2] ) );
		double[] this12 = new double[3];
		double[] this13 = ((double[]) (this12) );
		((double[]) (this13) )[0] = ( ((double[]) (dperp) )[0] * rhs2 );
		((double[]) (this13) )[1] = ( ((double[]) (dperp) )[1] * rhs2 );
		((double[]) (this13) )[2] = ( ((double[]) (dperp) )[2] * rhs2 );
		double[] rhs3 = ((double[]) (this13) );
		double[] this14 = new double[3];
		double[] this15 = ((double[]) (this14) );
		((double[]) (this15) )[0] = ( ((double[]) (new_u) )[0] - ((double[]) (rhs3) )[0] );
		((double[]) (this15) )[1] = ( ((double[]) (new_u) )[1] - ((double[]) (rhs3) )[1] );
		((double[]) (this15) )[2] = ( ((double[]) (new_u) )[2] - ((double[]) (rhs3) )[2] );
		new_u = ((double[]) (this15) );
		double rhs4 = ( ( ( ((double[]) (new_v) )[0] * ((double[]) (perp_old) )[0] ) + ( ((double[]) (new_v) )[1] * ((double[]) (perp_old) )[1] ) ) + ( ((double[]) (new_v) )[2] * ((double[]) (perp_old) )[2] ) );
		double[] this16 = new double[3];
		double[] this17 = ((double[]) (this16) );
		((double[]) (this17) )[0] = ( ((double[]) (dperp) )[0] * rhs4 );
		((double[]) (this17) )[1] = ( ((double[]) (dperp) )[1] * rhs4 );
		((double[]) (this17) )[2] = ( ((double[]) (dperp) )[2] * rhs4 );
		double[] rhs5 = ((double[]) (this17) );
		double[] this18 = new double[3];
		double[] this19 = ((double[]) (this18) );
		((double[]) (this19) )[0] = ( ((double[]) (new_v) )[0] - ((double[]) (rhs5) )[0] );
		((double[]) (this19) )[1] = ( ((double[]) (new_v) )[1] - ((double[]) (rhs5) )[1] );
		((double[]) (this19) )[2] = ( ((double[]) (new_v) )[2] - ((double[]) (rhs5) )[2] );
		new_v = ((double[]) (this19) );
	}
	
	
	public static double[] projCurv(double[] old_u, double[] old_v, double old_ku, double old_kuv, double old_kv, double[] new_u, double[] new_v)
	{
		double[] this1 = new double[3];
		double[] this2 = ((double[]) (this1) );
		((double[]) (this2) )[0] = ((double) (0) );
		((double[]) (this2) )[1] = ((double) (0) );
		((double[]) (this2) )[2] = ((double) (0) );
		double[] r_new_u = ((double[]) (this2) );
		double[] this3 = new double[3];
		double[] this4 = ((double[]) (this3) );
		((double[]) (this4) )[0] = ((double) (0) );
		((double[]) (this4) )[1] = ((double) (0) );
		((double[]) (this4) )[2] = ((double) (0) );
		double[] r_new_v = ((double[]) (this4) );
		double[] this5 = new double[3];
		double[] this6 = ((double[]) (this5) );
		((double[]) (this6) )[0] = ( ( ((double[]) (old_u) )[1] * ((double[]) (old_v) )[2] ) - ( ((double[]) (old_u) )[2] * ((double[]) (old_v) )[1] ) );
		((double[]) (this6) )[1] = ( ( ((double[]) (old_u) )[2] * ((double[]) (old_v) )[0] ) - ( ((double[]) (old_u) )[0] * ((double[]) (old_v) )[2] ) );
		((double[]) (this6) )[2] = ( ( ((double[]) (old_u) )[0] * ((double[]) (old_v) )[1] ) - ( ((double[]) (old_u) )[1] * ((double[]) (old_v) )[0] ) );
		apparentridges.Mesh.rotCoordSys(new_u, new_v, ((double[]) (this6) ), r_new_u, r_new_v);
		double u1 = ( ( ( ((double[]) (r_new_u) )[0] * ((double[]) (old_u) )[0] ) + ( ((double[]) (r_new_u) )[1] * ((double[]) (old_u) )[1] ) ) + ( ((double[]) (r_new_u) )[2] * ((double[]) (old_u) )[2] ) );
		double v1 = ( ( ( ((double[]) (r_new_u) )[0] * ((double[]) (old_v) )[0] ) + ( ((double[]) (r_new_u) )[1] * ((double[]) (old_v) )[1] ) ) + ( ((double[]) (r_new_u) )[2] * ((double[]) (old_v) )[2] ) );
		double u2 = ( ( ( ((double[]) (r_new_v) )[0] * ((double[]) (old_u) )[0] ) + ( ((double[]) (r_new_v) )[1] * ((double[]) (old_u) )[1] ) ) + ( ((double[]) (r_new_v) )[2] * ((double[]) (old_u) )[2] ) );
		double v2 = ( ( ( ((double[]) (r_new_v) )[0] * ((double[]) (old_v) )[0] ) + ( ((double[]) (r_new_v) )[1] * ((double[]) (old_v) )[1] ) ) + ( ((double[]) (r_new_v) )[2] * ((double[]) (old_v) )[2] ) );
		double new_ku = ( ( ( ( old_ku * u1 ) * u1 ) + ( old_kuv * (( ( 2 * u1 ) * v1 )) ) ) + ( ( old_kv * v1 ) * v1 ) );
		double new_kuv = ( ( ( ( old_ku * u1 ) * u2 ) + ( old_kuv * (( ( u1 * v2 ) + ( u2 * v1 ) )) ) ) + ( ( old_kv * v1 ) * v2 ) );
		double new_kv = ( ( ( ( old_ku * u2 ) * u2 ) + ( old_kuv * (( ( 2 * u2 ) * v2 )) ) ) + ( ( old_kv * v2 ) * v2 ) );
		double[] this7 = new double[3];
		double[] this8 = ((double[]) (this7) );
		((double[]) (this8) )[0] = new_ku;
		((double[]) (this8) )[1] = new_kuv;
		((double[]) (this8) )[2] = new_kv;
		return ((double[]) (this8) );
	}
	
	
	public static void diagonalizeCurv(double[] old_u, double[] old_v, double ku, double kuv, double kv, double[] new_norm, double[] pd1, double[] pd2, double[] k1k2)
	{
		double[] this1 = new double[3];
		double[] this2 = ((double[]) (this1) );
		((double[]) (this2) )[0] = ((double) (0) );
		((double[]) (this2) )[1] = ((double) (0) );
		((double[]) (this2) )[2] = ((double) (0) );
		double[] r_old_u = ((double[]) (this2) );
		double[] this3 = new double[3];
		double[] this4 = ((double[]) (this3) );
		((double[]) (this4) )[0] = ((double) (0) );
		((double[]) (this4) )[1] = ((double) (0) );
		((double[]) (this4) )[2] = ((double) (0) );
		double[] r_old_v = ((double[]) (this4) );
		apparentridges.Mesh.rotCoordSys(old_u, old_v, new_norm, r_old_u, r_old_v);
		double c = ((double) (1) );
		double s = ((double) (0) );
		double tt = ((double) (0) );
		if (( kuv != 0.0 )) 
		{
			double h = ( ( 0.5 * (( kv - ku )) ) / kuv );
			tt = ( (( h < 0.0 )) ? (( 1.0 / (( h - java.lang.Math.sqrt(( 1.0 + ( h * h ) )) )) )) : (( 1.0 / (( h + java.lang.Math.sqrt(( 1.0 + ( h * h ) )) )) )) );
			c = ( 1.0 / java.lang.Math.sqrt(( 1.0 + ( tt * tt ) )) );
			s = ( tt * c );
		}
		
		double k1 = ( ku - ( tt * kuv ) );
		double k2 = ( kv + ( tt * kuv ) );
		if (( java.lang.Math.abs(k1) >= java.lang.Math.abs(k2) )) 
		{
			((double[]) (k1k2) )[0] = k1;
			((double[]) (k1k2) )[1] = k2;
			{
				double[] this5 = new double[3];
				double[] this6 = ((double[]) (this5) );
				((double[]) (this6) )[0] = ( ((double[]) (r_old_u) )[0] * c );
				((double[]) (this6) )[1] = ( ((double[]) (r_old_u) )[1] * c );
				((double[]) (this6) )[2] = ( ((double[]) (r_old_u) )[2] * c );
				double[] this7 = ((double[]) (this6) );
				double[] this8 = new double[3];
				double[] this9 = ((double[]) (this8) );
				((double[]) (this9) )[0] = ( ((double[]) (r_old_v) )[0] * s );
				((double[]) (this9) )[1] = ( ((double[]) (r_old_v) )[1] * s );
				((double[]) (this9) )[2] = ( ((double[]) (r_old_v) )[2] * s );
				double[] rhs = ((double[]) (this9) );
				double[] this10 = new double[3];
				double[] this11 = ((double[]) (this10) );
				((double[]) (this11) )[0] = ( ((double[]) (this7) )[0] - ((double[]) (rhs) )[0] );
				((double[]) (this11) )[1] = ( ((double[]) (this7) )[1] - ((double[]) (rhs) )[1] );
				((double[]) (this11) )[2] = ( ((double[]) (this7) )[2] - ((double[]) (rhs) )[2] );
				double[] v = ((double[]) (this11) );
				((double[]) (pd1) )[0] = ((double[]) (v) )[0];
				((double[]) (pd1) )[1] = ((double[]) (v) )[1];
				((double[]) (pd1) )[2] = ((double[]) (v) )[2];
			}
			
		}
		else
		{
			((double[]) (k1k2) )[0] = k2;
			((double[]) (k1k2) )[1] = k1;
			{
				double[] this12 = new double[3];
				double[] this13 = ((double[]) (this12) );
				((double[]) (this13) )[0] = ( ((double[]) (r_old_u) )[0] * s );
				((double[]) (this13) )[1] = ( ((double[]) (r_old_u) )[1] * s );
				((double[]) (this13) )[2] = ( ((double[]) (r_old_u) )[2] * s );
				double[] this14 = ((double[]) (this13) );
				double[] this15 = new double[3];
				double[] this16 = ((double[]) (this15) );
				((double[]) (this16) )[0] = ( ((double[]) (r_old_v) )[0] * c );
				((double[]) (this16) )[1] = ( ((double[]) (r_old_v) )[1] * c );
				((double[]) (this16) )[2] = ( ((double[]) (r_old_v) )[2] * c );
				double[] rhs1 = ((double[]) (this16) );
				double[] this17 = new double[3];
				double[] this18 = ((double[]) (this17) );
				((double[]) (this18) )[0] = ( ((double[]) (this14) )[0] + ((double[]) (rhs1) )[0] );
				((double[]) (this18) )[1] = ( ((double[]) (this14) )[1] + ((double[]) (rhs1) )[1] );
				((double[]) (this18) )[2] = ( ((double[]) (this14) )[2] + ((double[]) (rhs1) )[2] );
				double[] v1 = ((double[]) (this18) );
				((double[]) (pd1) )[0] = ((double[]) (v1) )[0];
				((double[]) (pd1) )[1] = ((double[]) (v1) )[1];
				((double[]) (pd1) )[2] = ((double[]) (v1) )[2];
			}
			
		}
		
		{
			double[] this19 = new double[3];
			double[] this20 = ((double[]) (this19) );
			((double[]) (this20) )[0] = ( ( ((double[]) (new_norm) )[1] * ((double[]) (pd1) )[2] ) - ( ((double[]) (new_norm) )[2] * ((double[]) (pd1) )[1] ) );
			((double[]) (this20) )[1] = ( ( ((double[]) (new_norm) )[2] * ((double[]) (pd1) )[0] ) - ( ((double[]) (new_norm) )[0] * ((double[]) (pd1) )[2] ) );
			((double[]) (this20) )[2] = ( ( ((double[]) (new_norm) )[0] * ((double[]) (pd1) )[1] ) - ( ((double[]) (new_norm) )[1] * ((double[]) (pd1) )[0] ) );
			double[] v2 = ((double[]) (this20) );
			((double[]) (pd2) )[0] = ((double[]) (v2) )[0];
			((double[]) (pd2) )[1] = ((double[]) (v2) )[1];
			((double[]) (pd2) )[2] = ((double[]) (v2) )[2];
		}
		
	}
	
	
	public haxe.root.Array<double[]> vertices;
	
	public haxe.root.Array<int[]> faces;
	
	public haxe.root.Array<double[]> normals;
	
	public haxe.root.Array<java.lang.Object> curv1;
	
	public haxe.root.Array<java.lang.Object> curv2;
	
	public haxe.root.Array<double[]> pdir1;
	
	public haxe.root.Array<double[]> pdir2;
	
	public haxe.root.Array<java.lang.Object> pointAreas;
	
	public haxe.root.Array<double[]> cornerAreas;
	
	public haxe.root.Array<haxe.root.Array<java.lang.Object>> adjacentFaces;
	
	public haxe.root.Array<java.lang.Object> ndotv;
	
	public haxe.root.Array<double[]> t1q1;
	
	public haxe.root.Array<java.lang.Object> Dt1q1;
	
	public apparentridges.BSphere bsphere;
	
	public double featureSize;
	
	public apparentridges.BVHTree bvh;
	
	public void precompute(java.lang.Object doBVH, java.lang.Object verb)
	{
		boolean verb1 = ( (haxe.lang.Runtime.eq(verb, null)) ? (false) : (haxe.lang.Runtime.toBool(((java.lang.Boolean) (verb) ))) );
		boolean doBVH1 = ( (haxe.lang.Runtime.eq(doBVH, null)) ? (true) : (haxe.lang.Runtime.toBool(((java.lang.Boolean) (doBVH) ))) );
		if (verb1) 
		{
			haxe.Log.trace.__hx_invoke2_o(0.0, "computing normals...", 0.0, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"apparentridges.Mesh", "apparentridges/ApparentRidges.hx", "precompute"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (337) )) )}));
		}
		
		this.computeNormals();
		if (verb1) 
		{
			haxe.Log.trace.__hx_invoke2_o(0.0, "computing point areas...", 0.0, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"apparentridges.Mesh", "apparentridges/ApparentRidges.hx", "precompute"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (339) )) )}));
		}
		
		this.computePointAreas();
		if (verb1) 
		{
			haxe.Log.trace.__hx_invoke2_o(0.0, "computing adjacent faces...", 0.0, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"apparentridges.Mesh", "apparentridges/ApparentRidges.hx", "precompute"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (341) )) )}));
		}
		
		this.computeAdjacentFaces();
		if (verb1) 
		{
			haxe.Log.trace.__hx_invoke2_o(0.0, "computing curvatures...", 0.0, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"apparentridges.Mesh", "apparentridges/ApparentRidges.hx", "precompute"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (343) )) )}));
		}
		
		this.computeCurvatures();
		if (verb1) 
		{
			haxe.Log.trace.__hx_invoke2_o(0.0, "computing bounding sphere...", 0.0, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"apparentridges.Mesh", "apparentridges/ApparentRidges.hx", "precompute"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (345) )) )}));
		}
		
		this.computeBSphere();
		if (verb1) 
		{
			haxe.Log.trace.__hx_invoke2_o(0.0, "computing feature size...", 0.0, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"apparentridges.Mesh", "apparentridges/ApparentRidges.hx", "precompute"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (347) )) )}));
		}
		
		this.computeFeatureSize();
		if (verb1) 
		{
			haxe.Log.trace.__hx_invoke2_o(0.0, "computing bounding volume hierarchy...", 0.0, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"apparentridges.Mesh", "apparentridges/ApparentRidges.hx", "precompute"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (349) )) )}));
		}
		
		if (doBVH1) 
		{
			this.computeBVH();
		}
		else
		{
			this.computeBVHTrivial();
		}
		
		if (verb1) 
		{
			haxe.Log.trace.__hx_invoke2_o(0.0, "pre-computation finished.", 0.0, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"apparentridges.Mesh", "apparentridges/ApparentRidges.hx", "precompute"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (351) )) )}));
		}
		
	}
	
	
	public void computeNormals()
	{
		haxe.root.Array<double[]> _g = new haxe.root.Array<double[]>(new double[][]{});
		{
			int _g1 = 0;
			int _g2 = this.vertices.length;
			while (( _g1 < _g2 ))
			{
				int i = _g1++;
				double[] this1 = new double[3];
				double[] this2 = ((double[]) (this1) );
				((double[]) (this2) )[0] = ((double) (0) );
				((double[]) (this2) )[1] = ((double) (0) );
				((double[]) (this2) )[2] = ((double) (0) );
				_g.push(((double[]) (this2) ));
			}
			
		}
		
		this.normals = _g;
		{
			int _g3 = 0;
			haxe.root.Array<int[]> _g4 = this.faces;
			while (( _g3 < _g4.length ))
			{
				int[] f = _g4.__get(_g3);
				 ++ _g3;
				double[] p0 = this.vertices.__get(((int[]) (f) )[0]);
				double[] p1 = this.vertices.__get(((int[]) (f) )[1]);
				double[] p2 = this.vertices.__get(((int[]) (f) )[2]);
				double[] this3 = new double[3];
				double[] this4 = ((double[]) (this3) );
				((double[]) (this4) )[0] = ( ((double[]) (p0) )[0] - ((double[]) (p1) )[0] );
				((double[]) (this4) )[1] = ( ((double[]) (p0) )[1] - ((double[]) (p1) )[1] );
				((double[]) (this4) )[2] = ( ((double[]) (p0) )[2] - ((double[]) (p1) )[2] );
				double[] a = ((double[]) (this4) );
				double[] this5 = new double[3];
				double[] this6 = ((double[]) (this5) );
				((double[]) (this6) )[0] = ( ((double[]) (p1) )[0] - ((double[]) (p2) )[0] );
				((double[]) (this6) )[1] = ( ((double[]) (p1) )[1] - ((double[]) (p2) )[1] );
				((double[]) (this6) )[2] = ( ((double[]) (p1) )[2] - ((double[]) (p2) )[2] );
				double[] b = ((double[]) (this6) );
				double[] this7 = new double[3];
				double[] this8 = ((double[]) (this7) );
				((double[]) (this8) )[0] = ( ( ((double[]) (a) )[1] * ((double[]) (b) )[2] ) - ( ((double[]) (a) )[2] * ((double[]) (b) )[1] ) );
				((double[]) (this8) )[1] = ( ( ((double[]) (a) )[2] * ((double[]) (b) )[0] ) - ( ((double[]) (a) )[0] * ((double[]) (b) )[2] ) );
				((double[]) (this8) )[2] = ( ( ((double[]) (a) )[0] * ((double[]) (b) )[1] ) - ( ((double[]) (a) )[1] * ((double[]) (b) )[0] ) );
				double[] fn = ((double[]) (this8) );
				haxe.root.Array<double[]> tmp = this.normals;
				int f1 = ((int[]) (f) )[0];
				double[] this9 = this.normals.__get(((int[]) (f) )[0]);
				double[] this10 = new double[3];
				double[] this11 = ((double[]) (this10) );
				((double[]) (this11) )[0] = ( ((double[]) (this9) )[0] + ((double[]) (fn) )[0] );
				((double[]) (this11) )[1] = ( ((double[]) (this9) )[1] + ((double[]) (fn) )[1] );
				((double[]) (this11) )[2] = ( ((double[]) (this9) )[2] + ((double[]) (fn) )[2] );
				tmp.__set(f1, ((double[]) (this11) ));
				haxe.root.Array<double[]> tmp1 = this.normals;
				int f2 = ((int[]) (f) )[1];
				double[] this12 = this.normals.__get(((int[]) (f) )[1]);
				double[] this13 = new double[3];
				double[] this14 = ((double[]) (this13) );
				((double[]) (this14) )[0] = ( ((double[]) (this12) )[0] + ((double[]) (fn) )[0] );
				((double[]) (this14) )[1] = ( ((double[]) (this12) )[1] + ((double[]) (fn) )[1] );
				((double[]) (this14) )[2] = ( ((double[]) (this12) )[2] + ((double[]) (fn) )[2] );
				tmp1.__set(f2, ((double[]) (this14) ));
				haxe.root.Array<double[]> tmp2 = this.normals;
				int f3 = ((int[]) (f) )[2];
				double[] this15 = this.normals.__get(((int[]) (f) )[2]);
				double[] this16 = new double[3];
				double[] this17 = ((double[]) (this16) );
				((double[]) (this17) )[0] = ( ((double[]) (this15) )[0] + ((double[]) (fn) )[0] );
				((double[]) (this17) )[1] = ( ((double[]) (this15) )[1] + ((double[]) (fn) )[1] );
				((double[]) (this17) )[2] = ( ((double[]) (this15) )[2] + ((double[]) (fn) )[2] );
				tmp2.__set(f3, ((double[]) (this17) ));
			}
			
		}
		
		{
			int _g5 = 0;
			haxe.root.Array<double[]> _g6 = this.normals;
			while (( _g5 < _g6.length ))
			{
				double[] n = _g6.__get(_g5);
				 ++ _g5;
				{
					double l = java.lang.Math.sqrt(( ( ( ((double[]) (n) )[0] * ((double[]) (n) )[0] ) + ( ((double[]) (n) )[1] * ((double[]) (n) )[1] ) ) + ( ((double[]) (n) )[2] * ((double[]) (n) )[2] ) ));
					if (( l > 0 )) 
					{
						l = ( 1 / l );
						((double[]) (n) )[0] *= l;
						((double[]) (n) )[1] *= l;
						((double[]) (n) )[2] *= l;
					}
					else
					{
						((double[]) (n) )[0] = ((double) (0) );
						((double[]) (n) )[1] = ((double) (0) );
						((double[]) (n) )[2] = ((double) (1) );
					}
					
				}
				
			}
			
		}
		
	}
	
	
	public void computeBSphere()
	{
		this.bsphere = new apparentridges.BSphere();
		apparentridges.Mesh _gthis = this;
		haxe.lang.Function farthestVertexAlong = new apparentridges.Mesh_computeBSphere_375__Fun(_gthis);
		double[] this1 = new double[3];
		double[] this2 = ((double[]) (this1) );
		((double[]) (this2) )[0] = ((double) (0) );
		((double[]) (this2) )[1] = ((double) (0) );
		((double[]) (this2) )[2] = ((double) (0) );
		double[] best_min = ((double[]) (this2) );
		double[] this3 = new double[3];
		double[] this4 = ((double[]) (this3) );
		((double[]) (this4) )[0] = ((double) (0) );
		((double[]) (this4) )[1] = ((double) (0) );
		((double[]) (this4) )[2] = ((double) (0) );
		double[] best_max = ((double[]) (this4) );
		double[] this5 = new double[3];
		double[] this6 = ((double[]) (this5) );
		((double[]) (this6) )[0] = ((double) (1) );
		((double[]) (this6) )[1] = ((double) (0) );
		((double[]) (this6) )[2] = ((double) (0) );
		double[] this7 = new double[3];
		double[] this8 = ((double[]) (this7) );
		((double[]) (this8) )[0] = ((double) (0) );
		((double[]) (this8) )[1] = ((double) (1) );
		((double[]) (this8) )[2] = ((double) (0) );
		double[] this9 = new double[3];
		double[] this10 = ((double[]) (this9) );
		((double[]) (this10) )[0] = ((double) (0) );
		((double[]) (this10) )[1] = ((double) (0) );
		((double[]) (this10) )[2] = ((double) (1) );
		double[] this11 = new double[3];
		double[] this12 = ((double[]) (this11) );
		((double[]) (this12) )[0] = ((double) (1) );
		((double[]) (this12) )[1] = ((double) (1) );
		((double[]) (this12) )[2] = ((double) (1) );
		double[] this13 = new double[3];
		double[] this14 = ((double[]) (this13) );
		((double[]) (this14) )[0] = ((double) (1) );
		((double[]) (this14) )[1] = ((double) (-1) );
		((double[]) (this14) )[2] = ((double) (1) );
		double[] this15 = new double[3];
		double[] this16 = ((double[]) (this15) );
		((double[]) (this16) )[0] = ((double) (1) );
		((double[]) (this16) )[1] = ((double) (-1) );
		((double[]) (this16) )[2] = ((double) (-1) );
		double[] this17 = new double[3];
		double[] this18 = ((double[]) (this17) );
		((double[]) (this18) )[0] = ((double) (1) );
		((double[]) (this18) )[1] = ((double) (1) );
		((double[]) (this18) )[2] = ((double) (1) );
		haxe.root.Array<double[]> dirs = new haxe.root.Array<double[]>(new double[][]{((double[]) (this6) ), ((double[]) (this8) ), ((double[]) (this10) ), ((double[]) (this12) ), ((double[]) (this14) ), ((double[]) (this16) ), ((double[]) (this18) )});
		{
			int _g = 0;
			while (( _g < dirs.length ))
			{
				double[] d = dirs.__get(_g);
				 ++ _g;
				haxe.root.Array<double[]> p1 = this.vertices;
				double[] this19 = new double[3];
				double[] this20 = ((double[]) (this19) );
				((double[]) (this20) )[0] = ( ((double[]) (d) )[0] * -1.0 );
				((double[]) (this20) )[1] = ( ((double[]) (d) )[1] * -1.0 );
				((double[]) (this20) )[2] = ( ((double[]) (d) )[2] * -1.0 );
				double[] p11 = p1.__get(((int) (farthestVertexAlong.__hx_invoke1_f(0.0, ((double[]) (this20) ))) ));
				double[] p2 = this.vertices.__get(((int) (farthestVertexAlong.__hx_invoke1_f(0.0, d)) ));
				double x = ( ((double[]) (p11) )[0] - ((double[]) (p2) )[0] );
				double x1 = ( ((double[]) (p11) )[1] - ((double[]) (p2) )[1] );
				double x2 = ( ((double[]) (p11) )[2] - ((double[]) (p2) )[2] );
				double x3 = ( ((double[]) (best_min) )[0] - ((double[]) (best_max) )[0] );
				double x4 = ( ((double[]) (best_min) )[1] - ((double[]) (best_max) )[1] );
				double x5 = ( ((double[]) (best_min) )[2] - ((double[]) (best_max) )[2] );
				if (( ( ( ( x * x ) + ( x1 * x1 ) ) + ( x2 * x2 ) ) > ( ( ( x3 * x3 ) + ( x4 * x4 ) ) + ( x5 * x5 ) ) )) 
				{
					best_min = p11;
					best_max = p2;
				}
				
			}
			
		}
		
		double[] this21 = new double[3];
		double[] this22 = ((double[]) (this21) );
		((double[]) (this22) )[0] = ( ((double[]) (best_min) )[0] + ((double[]) (best_max) )[0] );
		((double[]) (this22) )[1] = ( ((double[]) (best_min) )[1] + ((double[]) (best_max) )[1] );
		((double[]) (this22) )[2] = ( ((double[]) (best_min) )[2] + ((double[]) (best_max) )[2] );
		double[] this23 = ((double[]) (this22) );
		double[] this24 = new double[3];
		double[] this25 = ((double[]) (this24) );
		((double[]) (this25) )[0] = ( ((double[]) (this23) )[0] * 0.5 );
		((double[]) (this25) )[1] = ( ((double[]) (this23) )[1] * 0.5 );
		((double[]) (this25) )[2] = ( ((double[]) (this23) )[2] * 0.5 );
		this.bsphere.o = ((double[]) (this25) );
		double x6 = ( ((double[]) (best_min) )[0] - ((double[]) (best_max) )[0] );
		double x7 = ( ((double[]) (best_min) )[1] - ((double[]) (best_max) )[1] );
		double x8 = ( ((double[]) (best_min) )[2] - ((double[]) (best_max) )[2] );
		double tmp = java.lang.Math.sqrt(( ( ( x6 * x6 ) + ( x7 * x7 ) ) + ( x8 * x8 ) ));
		this.bsphere.r = ( tmp * 0.5 );
		double x9 = this.bsphere.r;
		double r2 = ( x9 * x9 );
		{
			int _g1 = 0;
			int _g2 = this.vertices.length;
			while (( _g1 < _g2 ))
			{
				int i = _g1++;
				double[] v1 = this.vertices.__get(i);
				double[] v2 = this.bsphere.o;
				double x10 = ( ((double[]) (v1) )[0] - ((double[]) (v2) )[0] );
				double x11 = ( ((double[]) (v1) )[1] - ((double[]) (v2) )[1] );
				double x12 = ( ((double[]) (v1) )[2] - ((double[]) (v2) )[2] );
				double d2 = ( ( ( x10 * x10 ) + ( x11 * x11 ) ) + ( x12 * x12 ) );
				if (( d2 <= r2 )) 
				{
					continue;
				}
				
				double d1 = java.lang.Math.sqrt(d2);
				this.bsphere.r = ( 0.5 * (( this.bsphere.r + d1 )) );
				double x13 = this.bsphere.r;
				r2 = ( x13 * x13 );
				double[] this26 = this.bsphere.o;
				double[] rhs = this.vertices.__get(i);
				double[] this27 = new double[3];
				double[] this28 = ((double[]) (this27) );
				((double[]) (this28) )[0] = ( ((double[]) (this26) )[0] - ((double[]) (rhs) )[0] );
				((double[]) (this28) )[1] = ( ((double[]) (this26) )[1] - ((double[]) (rhs) )[1] );
				((double[]) (this28) )[2] = ( ((double[]) (this26) )[2] - ((double[]) (rhs) )[2] );
				this.bsphere.o = ((double[]) (this28) );
				double[] this29 = this.bsphere.o;
				double rhs1 = ( this.bsphere.r * (( 1.0 / d1 )) );
				double[] this30 = new double[3];
				double[] this31 = ((double[]) (this30) );
				((double[]) (this31) )[0] = ( ((double[]) (this29) )[0] * rhs1 );
				((double[]) (this31) )[1] = ( ((double[]) (this29) )[1] * rhs1 );
				((double[]) (this31) )[2] = ( ((double[]) (this29) )[2] * rhs1 );
				this.bsphere.o = ((double[]) (this31) );
				double[] this32 = this.bsphere.o;
				double[] rhs2 = this.vertices.__get(i);
				double[] this33 = new double[3];
				double[] this34 = ((double[]) (this33) );
				((double[]) (this34) )[0] = ( ((double[]) (this32) )[0] + ((double[]) (rhs2) )[0] );
				((double[]) (this34) )[1] = ( ((double[]) (this32) )[1] + ((double[]) (rhs2) )[1] );
				((double[]) (this34) )[2] = ( ((double[]) (this32) )[2] + ((double[]) (rhs2) )[2] );
				this.bsphere.o = ((double[]) (this34) );
			}
			
		}
		
	}
	
	
	public void computeFeatureSize()
	{
		int nv = this.curv1.length;
		int nsamp = ( (( nv > 500 )) ? (500) : (nv) );
		haxe.root.Array<java.lang.Object> samples = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
		int s = 79;
		int p = 103;
		int q = 211;
		int m = ( p * q );
		{
			int _g = 0;
			int _g1 = nsamp;
			while (( _g < _g1 ))
			{
				int i = _g++;
				int ind = ((int) (( nv * (( ((double) (s) ) / m )) )) );
				s = ( ( s * s ) % m );
				samples.push(java.lang.Math.abs(((double) (haxe.lang.Runtime.toDouble(this.curv1.__get(ind))) )));
				samples.push(java.lang.Math.abs(((double) (haxe.lang.Runtime.toDouble(this.curv2.__get(ind))) )));
			}
			
		}
		
		double frac = 0.1;
		double mult = 0.01;
		double max_feat_size = ( 0.05 * this.bsphere.r );
		int which = ((int) (( frac * samples.length )) );
		samples.sort(( (( apparentridges.Mesh_computeFeatureSize_446__Fun.__hx_current != null )) ? (apparentridges.Mesh_computeFeatureSize_446__Fun.__hx_current) : (apparentridges.Mesh_computeFeatureSize_446__Fun.__hx_current = ((apparentridges.Mesh_computeFeatureSize_446__Fun) (new apparentridges.Mesh_computeFeatureSize_446__Fun()) )) ));
		this.featureSize = java.lang.Math.min(( mult / ((double) (haxe.lang.Runtime.toDouble(samples.__get(which))) ) ), max_feat_size);
	}
	
	
	public void computeAdjacentFaces()
	{
		haxe.root.Array<haxe.root.Array<java.lang.Object>> _g = new haxe.root.Array<haxe.root.Array<java.lang.Object>>(new haxe.root.Array[]{});
		{
			int _g1 = 0;
			int _g2 = this.vertices.length;
			while (( _g1 < _g2 ))
			{
				int i = _g1++;
				_g.push(new haxe.root.Array<java.lang.Object>());
			}
			
		}
		
		this.adjacentFaces = _g;
		{
			int _g3 = 0;
			int _g4 = this.faces.length;
			while (( _g3 < _g4 ))
			{
				int i1 = _g3++;
				{
					this.adjacentFaces.__get(((int[]) (this.faces.__get(i1)) )[0]).push(i1);
					this.adjacentFaces.__get(((int[]) (this.faces.__get(i1)) )[1]).push(i1);
					this.adjacentFaces.__get(((int[]) (this.faces.__get(i1)) )[2]).push(i1);
				}
				
			}
			
		}
		
	}
	
	
	public double[][] getFaceEdges(int[] f)
	{
		double[][] this1 = new double[3][];
		double[][] e = ((double[][]) (this1) );
		{
			double[] this2 = this.vertices.__get(((int[]) (f) )[2]);
			double[] rhs = this.vertices.__get(((int[]) (f) )[1]);
			double[] this3 = new double[3];
			double[] this4 = ((double[]) (this3) );
			((double[]) (this4) )[0] = ( ((double[]) (this2) )[0] - ((double[]) (rhs) )[0] );
			((double[]) (this4) )[1] = ( ((double[]) (this2) )[1] - ((double[]) (rhs) )[1] );
			((double[]) (this4) )[2] = ( ((double[]) (this2) )[2] - ((double[]) (rhs) )[2] );
			((double[][]) (e) )[0] = ((double[]) (this4) );
		}
		
		{
			double[] this5 = this.vertices.__get(((int[]) (f) )[0]);
			double[] rhs1 = this.vertices.__get(((int[]) (f) )[2]);
			double[] this6 = new double[3];
			double[] this7 = ((double[]) (this6) );
			((double[]) (this7) )[0] = ( ((double[]) (this5) )[0] - ((double[]) (rhs1) )[0] );
			((double[]) (this7) )[1] = ( ((double[]) (this5) )[1] - ((double[]) (rhs1) )[1] );
			((double[]) (this7) )[2] = ( ((double[]) (this5) )[2] - ((double[]) (rhs1) )[2] );
			((double[][]) (e) )[1] = ((double[]) (this7) );
		}
		
		{
			double[] this8 = this.vertices.__get(((int[]) (f) )[1]);
			double[] rhs2 = this.vertices.__get(((int[]) (f) )[0]);
			double[] this9 = new double[3];
			double[] this10 = ((double[]) (this9) );
			((double[]) (this10) )[0] = ( ((double[]) (this8) )[0] - ((double[]) (rhs2) )[0] );
			((double[]) (this10) )[1] = ( ((double[]) (this8) )[1] - ((double[]) (rhs2) )[1] );
			((double[]) (this10) )[2] = ( ((double[]) (this8) )[2] - ((double[]) (rhs2) )[2] );
			((double[][]) (e) )[2] = ((double[]) (this10) );
		}
		
		return e;
	}
	
	
	public void computePointAreas()
	{
		int nf = this.faces.length;
		int nv = this.vertices.length;
		haxe.root.Array<java.lang.Object> _g = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
		int _g1 = 0;
		int _g2 = nv;
		while (( _g1 < _g2 ))
		{
			int i = _g1++;
			_g.push(0);
		}
		
		this.pointAreas = _g;
		haxe.root.Array<double[]> _g3 = new haxe.root.Array<double[]>(new double[][]{});
		int _g4 = 0;
		int _g5 = nf;
		while (( _g4 < _g5 ))
		{
			int i1 = _g4++;
			double[] this1 = new double[3];
			double[] this2 = ((double[]) (this1) );
			((double[]) (this2) )[0] = ((double) (0) );
			((double[]) (this2) )[1] = ((double) (0) );
			((double[]) (this2) )[2] = ((double) (0) );
			_g3.push(((double[]) (this2) ));
		}
		
		this.cornerAreas = _g3;
		{
			int _g6 = 0;
			int _g7 = nf;
			while (( _g6 < _g7 ))
			{
				int i2 = _g6++;
				double[][] e = this.getFaceEdges(this.faces.__get(i2));
				double[] v1 = ((double[][]) (e) )[0];
				double[] v2 = ((double[][]) (e) )[1];
				double[] this3 = new double[3];
				double[] this4 = ((double[]) (this3) );
				((double[]) (this4) )[0] = ( ( ((double[]) (v1) )[1] * ((double[]) (v2) )[2] ) - ( ((double[]) (v1) )[2] * ((double[]) (v2) )[1] ) );
				((double[]) (this4) )[1] = ( ( ((double[]) (v1) )[2] * ((double[]) (v2) )[0] ) - ( ((double[]) (v1) )[0] * ((double[]) (v2) )[2] ) );
				((double[]) (this4) )[2] = ( ( ((double[]) (v1) )[0] * ((double[]) (v2) )[1] ) - ( ((double[]) (v1) )[1] * ((double[]) (v2) )[0] ) );
				double[] this5 = ((double[]) (this4) );
				double area = ( 0.5 * java.lang.Math.sqrt(( ( ( ((double[]) (this5) )[0] * ((double[]) (this5) )[0] ) + ( ((double[]) (this5) )[1] * ((double[]) (this5) )[1] ) ) + ( ((double[]) (this5) )[2] * ((double[]) (this5) )[2] ) )) );
				double[] this6 = ((double[][]) (e) )[0];
				double l2_0 = ( ( ( ((double[]) (this6) )[0] * ((double[]) (this6) )[0] ) + ( ((double[]) (this6) )[1] * ((double[]) (this6) )[1] ) ) + ( ((double[]) (this6) )[2] * ((double[]) (this6) )[2] ) );
				double[] this7 = ((double[][]) (e) )[1];
				double l2_1 = ( ( ( ((double[]) (this7) )[0] * ((double[]) (this7) )[0] ) + ( ((double[]) (this7) )[1] * ((double[]) (this7) )[1] ) ) + ( ((double[]) (this7) )[2] * ((double[]) (this7) )[2] ) );
				double[] this8 = ((double[][]) (e) )[2];
				double l2_2 = ( ( ( ((double[]) (this8) )[0] * ((double[]) (this8) )[0] ) + ( ((double[]) (this8) )[1] * ((double[]) (this8) )[1] ) ) + ( ((double[]) (this8) )[2] * ((double[]) (this8) )[2] ) );
				double bcw_0 = ( l2_0 * (( ( l2_1 + l2_2 ) - l2_0 )) );
				double bcw_1 = ( l2_1 * (( ( l2_2 + l2_0 ) - l2_1 )) );
				double bcw_2 = ( l2_2 * (( ( l2_0 + l2_1 ) - l2_2 )) );
				if (( bcw_0 <= 0 )) 
				{
					{
						double[] v11 = ((double[][]) (e) )[0];
						double[] v21 = ((double[][]) (e) )[2];
						double v = ( ( ( -0.25 * l2_2 ) * area ) / (( ( ( ((double[]) (v11) )[0] * ((double[]) (v21) )[0] ) + ( ((double[]) (v11) )[1] * ((double[]) (v21) )[1] ) ) + ( ((double[]) (v11) )[2] * ((double[]) (v21) )[2] ) )) );
						((double[]) (this.cornerAreas.__get(i2)) )[1] = v;
					}
					
					{
						double[] v12 = ((double[][]) (e) )[0];
						double[] v22 = ((double[][]) (e) )[1];
						double v3 = ( ( ( -0.25 * l2_1 ) * area ) / (( ( ( ((double[]) (v12) )[0] * ((double[]) (v22) )[0] ) + ( ((double[]) (v12) )[1] * ((double[]) (v22) )[1] ) ) + ( ((double[]) (v12) )[2] * ((double[]) (v22) )[2] ) )) );
						((double[]) (this.cornerAreas.__get(i2)) )[2] = v3;
					}
					
					{
						double v4 = ( ( area - ((double[]) (this.cornerAreas.__get(i2)) )[1] ) - ((double[]) (this.cornerAreas.__get(i2)) )[2] );
						((double[]) (this.cornerAreas.__get(i2)) )[0] = v4;
					}
					
				}
				else
				{
					if (( bcw_1 <= 0.0 )) 
					{
						{
							double[] v13 = ((double[][]) (e) )[1];
							double[] v23 = ((double[][]) (e) )[0];
							double v5 = ( ( ( -0.25 * l2_0 ) * area ) / (( ( ( ((double[]) (v13) )[0] * ((double[]) (v23) )[0] ) + ( ((double[]) (v13) )[1] * ((double[]) (v23) )[1] ) ) + ( ((double[]) (v13) )[2] * ((double[]) (v23) )[2] ) )) );
							((double[]) (this.cornerAreas.__get(i2)) )[2] = v5;
						}
						
						{
							double[] v14 = ((double[][]) (e) )[1];
							double[] v24 = ((double[][]) (e) )[2];
							double v6 = ( ( ( -0.25 * l2_2 ) * area ) / (( ( ( ((double[]) (v14) )[0] * ((double[]) (v24) )[0] ) + ( ((double[]) (v14) )[1] * ((double[]) (v24) )[1] ) ) + ( ((double[]) (v14) )[2] * ((double[]) (v24) )[2] ) )) );
							((double[]) (this.cornerAreas.__get(i2)) )[0] = v6;
						}
						
						{
							double v7 = ( ( area - ((double[]) (this.cornerAreas.__get(i2)) )[2] ) - ((double[]) (this.cornerAreas.__get(i2)) )[0] );
							((double[]) (this.cornerAreas.__get(i2)) )[1] = v7;
						}
						
					}
					else
					{
						if (( bcw_2 <= 0.0 )) 
						{
							{
								double[] v15 = ((double[][]) (e) )[2];
								double[] v25 = ((double[][]) (e) )[1];
								double v8 = ( ( ( -0.25 * l2_1 ) * area ) / (( ( ( ((double[]) (v15) )[0] * ((double[]) (v25) )[0] ) + ( ((double[]) (v15) )[1] * ((double[]) (v25) )[1] ) ) + ( ((double[]) (v15) )[2] * ((double[]) (v25) )[2] ) )) );
								((double[]) (this.cornerAreas.__get(i2)) )[0] = v8;
							}
							
							{
								double[] v16 = ((double[][]) (e) )[2];
								double[] v26 = ((double[][]) (e) )[0];
								double v9 = ( ( ( -0.25 * l2_0 ) * area ) / (( ( ( ((double[]) (v16) )[0] * ((double[]) (v26) )[0] ) + ( ((double[]) (v16) )[1] * ((double[]) (v26) )[1] ) ) + ( ((double[]) (v16) )[2] * ((double[]) (v26) )[2] ) )) );
								((double[]) (this.cornerAreas.__get(i2)) )[1] = v9;
							}
							
							{
								double v10 = ( ( area - ((double[]) (this.cornerAreas.__get(i2)) )[0] ) - ((double[]) (this.cornerAreas.__get(i2)) )[1] );
								((double[]) (this.cornerAreas.__get(i2)) )[2] = v10;
							}
							
						}
						else
						{
							double scale = ( ( 0.5 * area ) / (( ( bcw_0 + bcw_1 ) + bcw_2 )) );
							{
								{
									double v17 = ( scale * (( bcw_1 + bcw_2 )) );
									((double[]) (this.cornerAreas.__get(i2)) )[0] = v17;
								}
								
								{
									double v18 = ( scale * (( bcw_2 + bcw_0 )) );
									((double[]) (this.cornerAreas.__get(i2)) )[1] = v18;
								}
								
								{
									double v19 = ( scale * (( bcw_0 + bcw_1 )) );
									((double[]) (this.cornerAreas.__get(i2)) )[2] = v19;
								}
								
							}
							
						}
						
					}
					
				}
				
				{
					haxe.root.Array<java.lang.Object> __temp_array1 = this.pointAreas;
					int __temp_index2 = ((int[]) (this.faces.__get(i2)) )[0];
					double __temp_expr1 = ((double) (haxe.lang.Runtime.toDouble(__temp_array1.__set(__temp_index2, ( ((double) (haxe.lang.Runtime.toDouble(__temp_array1.__get(__temp_index2))) ) + ((double[]) (this.cornerAreas.__get(i2)) )[0] )))) );
				}
				
				{
					haxe.root.Array<java.lang.Object> __temp_array3 = this.pointAreas;
					int __temp_index4 = ((int[]) (this.faces.__get(i2)) )[1];
					double __temp_expr2 = ((double) (haxe.lang.Runtime.toDouble(__temp_array3.__set(__temp_index4, ( ((double) (haxe.lang.Runtime.toDouble(__temp_array3.__get(__temp_index4))) ) + ((double[]) (this.cornerAreas.__get(i2)) )[1] )))) );
				}
				
				{
					haxe.root.Array<java.lang.Object> __temp_array5 = this.pointAreas;
					int __temp_index6 = ((int[]) (this.faces.__get(i2)) )[2];
					double __temp_expr3 = ((double) (haxe.lang.Runtime.toDouble(__temp_array5.__set(__temp_index6, ( ((double) (haxe.lang.Runtime.toDouble(__temp_array5.__get(__temp_index6))) ) + ((double[]) (this.cornerAreas.__get(i2)) )[2] )))) );
				}
				
			}
			
		}
		
	}
	
	
	public void computeCurvatures()
	{
		int nv = this.vertices.length;
		int nf = this.faces.length;
		haxe.root.Array<java.lang.Object> _g = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
		{
			int _g1 = 0;
			int _g2 = nv;
			while (( _g1 < _g2 ))
			{
				int i = _g1++;
				_g.push(0);
			}
			
		}
		
		this.curv1 = _g;
		haxe.root.Array<java.lang.Object> _g3 = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
		{
			int _g4 = 0;
			int _g5 = nv;
			while (( _g4 < _g5 ))
			{
				int i1 = _g4++;
				_g3.push(0);
			}
			
		}
		
		this.curv2 = _g3;
		haxe.root.Array<double[]> _g6 = new haxe.root.Array<double[]>(new double[][]{});
		{
			int _g7 = 0;
			int _g8 = nv;
			while (( _g7 < _g8 ))
			{
				int i2 = _g7++;
				double[] this1 = new double[3];
				double[] this2 = ((double[]) (this1) );
				((double[]) (this2) )[0] = ((double) (0) );
				((double[]) (this2) )[1] = ((double) (0) );
				((double[]) (this2) )[2] = ((double) (0) );
				_g6.push(((double[]) (this2) ));
			}
			
		}
		
		this.pdir1 = _g6;
		haxe.root.Array<double[]> _g9 = new haxe.root.Array<double[]>(new double[][]{});
		{
			int _g10 = 0;
			int _g11 = nv;
			while (( _g10 < _g11 ))
			{
				int i3 = _g10++;
				double[] this3 = new double[3];
				double[] this4 = ((double[]) (this3) );
				((double[]) (this4) )[0] = ((double) (0) );
				((double[]) (this4) )[1] = ((double) (0) );
				((double[]) (this4) )[2] = ((double) (0) );
				_g9.push(((double[]) (this4) ));
			}
			
		}
		
		this.pdir2 = _g9;
		haxe.root.Array<java.lang.Object> _g12 = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
		{
			int _g13 = 0;
			int _g14 = nv;
			while (( _g13 < _g14 ))
			{
				int i4 = _g13++;
				_g12.push(0);
			}
			
		}
		
		haxe.root.Array<java.lang.Object> curv12 = _g12;
		{
			int _g15 = 0;
			int _g16 = nf;
			while (( _g15 < _g16 ))
			{
				int i5 = _g15++;
				haxe.root.Array<double[]> tmp = this.pdir1;
				int tmp1 = ((int[]) (this.faces.__get(i5)) )[0];
				double[] this5 = this.vertices.__get(((int[]) (this.faces.__get(i5)) )[1]);
				double[] rhs = this.vertices.__get(((int[]) (this.faces.__get(i5)) )[0]);
				double[] this6 = new double[3];
				double[] this7 = ((double[]) (this6) );
				((double[]) (this7) )[0] = ( ((double[]) (this5) )[0] - ((double[]) (rhs) )[0] );
				((double[]) (this7) )[1] = ( ((double[]) (this5) )[1] - ((double[]) (rhs) )[1] );
				((double[]) (this7) )[2] = ( ((double[]) (this5) )[2] - ((double[]) (rhs) )[2] );
				tmp.__set(tmp1, ((double[]) (this7) ));
				haxe.root.Array<double[]> tmp2 = this.pdir1;
				int tmp3 = ((int[]) (this.faces.__get(i5)) )[1];
				double[] this8 = this.vertices.__get(((int[]) (this.faces.__get(i5)) )[2]);
				double[] rhs1 = this.vertices.__get(((int[]) (this.faces.__get(i5)) )[1]);
				double[] this9 = new double[3];
				double[] this10 = ((double[]) (this9) );
				((double[]) (this10) )[0] = ( ((double[]) (this8) )[0] - ((double[]) (rhs1) )[0] );
				((double[]) (this10) )[1] = ( ((double[]) (this8) )[1] - ((double[]) (rhs1) )[1] );
				((double[]) (this10) )[2] = ( ((double[]) (this8) )[2] - ((double[]) (rhs1) )[2] );
				tmp2.__set(tmp3, ((double[]) (this10) ));
				haxe.root.Array<double[]> tmp4 = this.pdir1;
				int tmp5 = ((int[]) (this.faces.__get(i5)) )[2];
				double[] this11 = this.vertices.__get(((int[]) (this.faces.__get(i5)) )[0]);
				double[] rhs2 = this.vertices.__get(((int[]) (this.faces.__get(i5)) )[2]);
				double[] this12 = new double[3];
				double[] this13 = ((double[]) (this12) );
				((double[]) (this13) )[0] = ( ((double[]) (this11) )[0] - ((double[]) (rhs2) )[0] );
				((double[]) (this13) )[1] = ( ((double[]) (this11) )[1] - ((double[]) (rhs2) )[1] );
				((double[]) (this13) )[2] = ( ((double[]) (this11) )[2] - ((double[]) (rhs2) )[2] );
				tmp4.__set(tmp5, ((double[]) (this13) ));
			}
			
		}
		
		{
			int _g17 = 0;
			int _g18 = nv;
			while (( _g17 < _g18 ))
			{
				int i6 = _g17++;
				haxe.root.Array<double[]> tmp6 = this.pdir1;
				double[] v1 = this.pdir1.__get(i6);
				double[] v2 = this.normals.__get(i6);
				double[] this14 = new double[3];
				double[] this15 = ((double[]) (this14) );
				((double[]) (this15) )[0] = ( ( ((double[]) (v1) )[1] * ((double[]) (v2) )[2] ) - ( ((double[]) (v1) )[2] * ((double[]) (v2) )[1] ) );
				((double[]) (this15) )[1] = ( ( ((double[]) (v1) )[2] * ((double[]) (v2) )[0] ) - ( ((double[]) (v1) )[0] * ((double[]) (v2) )[2] ) );
				((double[]) (this15) )[2] = ( ( ((double[]) (v1) )[0] * ((double[]) (v2) )[1] ) - ( ((double[]) (v1) )[1] * ((double[]) (v2) )[0] ) );
				tmp6.__set(i6, ((double[]) (this15) ));
				{
					double[] this16 = this.pdir1.__get(i6);
					double l = java.lang.Math.sqrt(( ( ( ((double[]) (this16) )[0] * ((double[]) (this16) )[0] ) + ( ((double[]) (this16) )[1] * ((double[]) (this16) )[1] ) ) + ( ((double[]) (this16) )[2] * ((double[]) (this16) )[2] ) ));
					if (( l > 0 )) 
					{
						l = ( 1 / l );
						((double[]) (this16) )[0] *= l;
						((double[]) (this16) )[1] *= l;
						((double[]) (this16) )[2] *= l;
					}
					else
					{
						((double[]) (this16) )[0] = ((double) (0) );
						((double[]) (this16) )[1] = ((double) (0) );
						((double[]) (this16) )[2] = ((double) (1) );
					}
					
				}
				
				haxe.root.Array<double[]> tmp7 = this.pdir2;
				double[] v11 = this.normals.__get(i6);
				double[] v21 = this.pdir1.__get(i6);
				double[] this17 = new double[3];
				double[] this18 = ((double[]) (this17) );
				((double[]) (this18) )[0] = ( ( ((double[]) (v11) )[1] * ((double[]) (v21) )[2] ) - ( ((double[]) (v11) )[2] * ((double[]) (v21) )[1] ) );
				((double[]) (this18) )[1] = ( ( ((double[]) (v11) )[2] * ((double[]) (v21) )[0] ) - ( ((double[]) (v11) )[0] * ((double[]) (v21) )[2] ) );
				((double[]) (this18) )[2] = ( ( ((double[]) (v11) )[0] * ((double[]) (v21) )[1] ) - ( ((double[]) (v11) )[1] * ((double[]) (v21) )[0] ) );
				tmp7.__set(i6, ((double[]) (this18) ));
			}
			
		}
		
		{
			int _g19 = 0;
			int _g20 = nf;
			while (( _g19 < _g20 ))
			{
				int i7 = _g19++;
				int[] f = this.faces.__get(i7);
				double[][] e = this.getFaceEdges(f);
				double[] this19 = ((double[][]) (e) )[0];
				double[] this20 = new double[3];
				double[] this21 = ((double[]) (this20) );
				((double[]) (this21) )[0] = ((double[]) (this19) )[0];
				((double[]) (this21) )[1] = ((double[]) (this19) )[1];
				((double[]) (this21) )[2] = ((double[]) (this19) )[2];
				double[] t = ((double[]) (this21) );
				{
					double l1 = java.lang.Math.sqrt(( ( ( ((double[]) (t) )[0] * ((double[]) (t) )[0] ) + ( ((double[]) (t) )[1] * ((double[]) (t) )[1] ) ) + ( ((double[]) (t) )[2] * ((double[]) (t) )[2] ) ));
					if (( l1 > 0 )) 
					{
						l1 = ( 1 / l1 );
						((double[]) (t) )[0] *= l1;
						((double[]) (t) )[1] *= l1;
						((double[]) (t) )[2] *= l1;
					}
					else
					{
						((double[]) (t) )[0] = ((double) (0) );
						((double[]) (t) )[1] = ((double) (0) );
						((double[]) (t) )[2] = ((double) (1) );
					}
					
				}
				
				double[] v12 = ((double[][]) (e) )[0];
				double[] v22 = ((double[][]) (e) )[1];
				double[] this22 = new double[3];
				double[] this23 = ((double[]) (this22) );
				((double[]) (this23) )[0] = ( ( ((double[]) (v12) )[1] * ((double[]) (v22) )[2] ) - ( ((double[]) (v12) )[2] * ((double[]) (v22) )[1] ) );
				((double[]) (this23) )[1] = ( ( ((double[]) (v12) )[2] * ((double[]) (v22) )[0] ) - ( ((double[]) (v12) )[0] * ((double[]) (v22) )[2] ) );
				((double[]) (this23) )[2] = ( ( ((double[]) (v12) )[0] * ((double[]) (v22) )[1] ) - ( ((double[]) (v12) )[1] * ((double[]) (v22) )[0] ) );
				double[] n = ((double[]) (this23) );
				double[] this24 = new double[3];
				double[] this25 = ((double[]) (this24) );
				((double[]) (this25) )[0] = ( ( ((double[]) (n) )[1] * ((double[]) (t) )[2] ) - ( ((double[]) (n) )[2] * ((double[]) (t) )[1] ) );
				((double[]) (this25) )[1] = ( ( ((double[]) (n) )[2] * ((double[]) (t) )[0] ) - ( ((double[]) (n) )[0] * ((double[]) (t) )[2] ) );
				((double[]) (this25) )[2] = ( ( ((double[]) (n) )[0] * ((double[]) (t) )[1] ) - ( ((double[]) (n) )[1] * ((double[]) (t) )[0] ) );
				double[] b = ((double[]) (this25) );
				{
					double l2 = java.lang.Math.sqrt(( ( ( ((double[]) (b) )[0] * ((double[]) (b) )[0] ) + ( ((double[]) (b) )[1] * ((double[]) (b) )[1] ) ) + ( ((double[]) (b) )[2] * ((double[]) (b) )[2] ) ));
					if (( l2 > 0 )) 
					{
						l2 = ( 1 / l2 );
						((double[]) (b) )[0] *= l2;
						((double[]) (b) )[1] *= l2;
						((double[]) (b) )[2] *= l2;
					}
					else
					{
						((double[]) (b) )[0] = ((double) (0) );
						((double[]) (b) )[1] = ((double) (0) );
						((double[]) (b) )[2] = ((double) (1) );
					}
					
				}
				
				haxe.root.Array<java.lang.Object> m = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) )});
				haxe.root.Array<haxe.root.Array<java.lang.Object>> w = new haxe.root.Array<haxe.root.Array<java.lang.Object>>(new haxe.root.Array[]{new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) )}), new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) )}), new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) )})});
				{
					int _g21 = 0;
					while (( _g21 < 3 ))
					{
						int j = _g21++;
						double[] v13 = ((double[][]) (e) )[j];
						double u = ( ( ( ((double[]) (v13) )[0] * ((double[]) (t) )[0] ) + ( ((double[]) (v13) )[1] * ((double[]) (t) )[1] ) ) + ( ((double[]) (v13) )[2] * ((double[]) (t) )[2] ) );
						double[] v14 = ((double[][]) (e) )[j];
						double v = ( ( ( ((double[]) (v14) )[0] * ((double[]) (b) )[0] ) + ( ((double[]) (v14) )[1] * ((double[]) (b) )[1] ) ) + ( ((double[]) (v14) )[2] * ((double[]) (b) )[2] ) );
						{
							haxe.root.Array<java.lang.Object> __temp_array1 = w.__get(0);
							int __temp_index2 = 0;
							double __temp_expr1 = ((double) (haxe.lang.Runtime.toDouble(__temp_array1.__set(__temp_index2, ( ((double) (haxe.lang.Runtime.toDouble(__temp_array1.__get(__temp_index2))) ) + ( u * u ) )))) );
						}
						
						{
							haxe.root.Array<java.lang.Object> __temp_array3 = w.__get(0);
							int __temp_index4 = 1;
							double __temp_expr2 = ((double) (haxe.lang.Runtime.toDouble(__temp_array3.__set(__temp_index4, ( ((double) (haxe.lang.Runtime.toDouble(__temp_array3.__get(__temp_index4))) ) + ( u * v ) )))) );
						}
						
						{
							haxe.root.Array<java.lang.Object> __temp_array5 = w.__get(2);
							int __temp_index6 = 2;
							double __temp_expr3 = ((double) (haxe.lang.Runtime.toDouble(__temp_array5.__set(__temp_index6, ( ((double) (haxe.lang.Runtime.toDouble(__temp_array5.__get(__temp_index6))) ) + ( v * v ) )))) );
						}
						
						double[] this26 = this.normals.__get(((int[]) (f) )[( (( j > 0 )) ? (( j - 1 )) : (( j + 2 )) )]);
						double[] rhs3 = this.normals.__get(((int[]) (f) )[( (( j < 2 )) ? (( j + 1 )) : (( j - 2 )) )]);
						double[] this27 = new double[3];
						double[] this28 = ((double[]) (this27) );
						((double[]) (this28) )[0] = ( ((double[]) (this26) )[0] - ((double[]) (rhs3) )[0] );
						((double[]) (this28) )[1] = ( ((double[]) (this26) )[1] - ((double[]) (rhs3) )[1] );
						((double[]) (this28) )[2] = ( ((double[]) (this26) )[2] - ((double[]) (rhs3) )[2] );
						double[] dn = ((double[]) (this28) );
						double dnu = ( ( ( ((double[]) (dn) )[0] * ((double[]) (t) )[0] ) + ( ((double[]) (dn) )[1] * ((double[]) (t) )[1] ) ) + ( ((double[]) (dn) )[2] * ((double[]) (t) )[2] ) );
						double dnv = ( ( ( ((double[]) (dn) )[0] * ((double[]) (b) )[0] ) + ( ((double[]) (dn) )[1] * ((double[]) (b) )[1] ) ) + ( ((double[]) (dn) )[2] * ((double[]) (b) )[2] ) );
						{
							int __temp_index7 = 0;
							double __temp_expr4 = ((double) (haxe.lang.Runtime.toDouble(m.__set(__temp_index7, ( ((double) (haxe.lang.Runtime.toDouble(m.__get(__temp_index7))) ) + ( dnu * u ) )))) );
						}
						
						{
							int __temp_index8 = 1;
							double __temp_expr5 = ((double) (haxe.lang.Runtime.toDouble(m.__set(__temp_index8, ( ((double) (haxe.lang.Runtime.toDouble(m.__get(__temp_index8))) ) + ( ( dnu * v ) + ( dnv * u ) ) )))) );
						}
						
						{
							int __temp_index9 = 2;
							double __temp_expr6 = ((double) (haxe.lang.Runtime.toDouble(m.__set(__temp_index9, ( ((double) (haxe.lang.Runtime.toDouble(m.__get(__temp_index9))) ) + ( dnv * v ) )))) );
						}
						
					}
					
				}
				
				double __temp_expr7 = ((double) (haxe.lang.Runtime.toDouble(w.__get(1).__set(1, ( ((double) (haxe.lang.Runtime.toDouble(w.__get(0).__get(0))) ) + ((double) (haxe.lang.Runtime.toDouble(w.__get(2).__get(2))) ) )))) );
				double __temp_expr8 = ((double) (haxe.lang.Runtime.toDouble(w.__get(1).__set(2, ((double) (haxe.lang.Runtime.toDouble(w.__get(0).__get(1))) )))) );
				haxe.root.Array<java.lang.Object> diag = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) )});
				if ( ! (apparentridges.Util.ldltdc(w, diag)) ) 
				{
					continue;
				}
				
				apparentridges.Util.ldltsl(w, diag, m, m);
				{
					{
						int vj = ((int[]) (f) )[0];
						double[] ccc = apparentridges.Mesh.projCurv(t, b, ((double) (haxe.lang.Runtime.toDouble(m.__get(0))) ), ((double) (haxe.lang.Runtime.toDouble(m.__get(1))) ), ((double) (haxe.lang.Runtime.toDouble(m.__get(2))) ), this.pdir1.__get(vj), this.pdir2.__get(vj));
						double c1 = ((double[]) (ccc) )[0];
						double c12 = ((double[]) (ccc) )[1];
						double c2 = ((double[]) (ccc) )[2];
						double wt = ( ((double[]) (this.cornerAreas.__get(i7)) )[0] / ((double) (haxe.lang.Runtime.toDouble(this.pointAreas.__get(vj))) ) );
						{
							haxe.root.Array<java.lang.Object> __temp_array10 = this.curv1;
							double __temp_expr9 = ((double) (haxe.lang.Runtime.toDouble(__temp_array10.__set(vj, ( ((double) (haxe.lang.Runtime.toDouble(__temp_array10.__get(vj))) ) + ( wt * c1 ) )))) );
						}
						
						double __temp_expr10 = ((double) (haxe.lang.Runtime.toDouble(curv12.__set(vj, ( ((double) (haxe.lang.Runtime.toDouble(curv12.__get(vj))) ) + ( wt * c12 ) )))) );
						{
							haxe.root.Array<java.lang.Object> __temp_array11 = this.curv2;
							double __temp_expr11 = ((double) (haxe.lang.Runtime.toDouble(__temp_array11.__set(vj, ( ((double) (haxe.lang.Runtime.toDouble(__temp_array11.__get(vj))) ) + ( wt * c2 ) )))) );
						}
						
					}
					
					{
						int vj1 = ((int[]) (f) )[1];
						double[] ccc1 = apparentridges.Mesh.projCurv(t, b, ((double) (haxe.lang.Runtime.toDouble(m.__get(0))) ), ((double) (haxe.lang.Runtime.toDouble(m.__get(1))) ), ((double) (haxe.lang.Runtime.toDouble(m.__get(2))) ), this.pdir1.__get(vj1), this.pdir2.__get(vj1));
						double c11 = ((double[]) (ccc1) )[0];
						double c121 = ((double[]) (ccc1) )[1];
						double c21 = ((double[]) (ccc1) )[2];
						double wt1 = ( ((double[]) (this.cornerAreas.__get(i7)) )[1] / ((double) (haxe.lang.Runtime.toDouble(this.pointAreas.__get(vj1))) ) );
						{
							haxe.root.Array<java.lang.Object> __temp_array12 = this.curv1;
							double __temp_expr12 = ((double) (haxe.lang.Runtime.toDouble(__temp_array12.__set(vj1, ( ((double) (haxe.lang.Runtime.toDouble(__temp_array12.__get(vj1))) ) + ( wt1 * c11 ) )))) );
						}
						
						double __temp_expr13 = ((double) (haxe.lang.Runtime.toDouble(curv12.__set(vj1, ( ((double) (haxe.lang.Runtime.toDouble(curv12.__get(vj1))) ) + ( wt1 * c121 ) )))) );
						{
							haxe.root.Array<java.lang.Object> __temp_array13 = this.curv2;
							double __temp_expr14 = ((double) (haxe.lang.Runtime.toDouble(__temp_array13.__set(vj1, ( ((double) (haxe.lang.Runtime.toDouble(__temp_array13.__get(vj1))) ) + ( wt1 * c21 ) )))) );
						}
						
					}
					
					{
						int vj2 = ((int[]) (f) )[2];
						double[] ccc2 = apparentridges.Mesh.projCurv(t, b, ((double) (haxe.lang.Runtime.toDouble(m.__get(0))) ), ((double) (haxe.lang.Runtime.toDouble(m.__get(1))) ), ((double) (haxe.lang.Runtime.toDouble(m.__get(2))) ), this.pdir1.__get(vj2), this.pdir2.__get(vj2));
						double c13 = ((double[]) (ccc2) )[0];
						double c122 = ((double[]) (ccc2) )[1];
						double c22 = ((double[]) (ccc2) )[2];
						double wt2 = ( ((double[]) (this.cornerAreas.__get(i7)) )[2] / ((double) (haxe.lang.Runtime.toDouble(this.pointAreas.__get(vj2))) ) );
						{
							haxe.root.Array<java.lang.Object> __temp_array14 = this.curv1;
							double __temp_expr15 = ((double) (haxe.lang.Runtime.toDouble(__temp_array14.__set(vj2, ( ((double) (haxe.lang.Runtime.toDouble(__temp_array14.__get(vj2))) ) + ( wt2 * c13 ) )))) );
						}
						
						double __temp_expr16 = ((double) (haxe.lang.Runtime.toDouble(curv12.__set(vj2, ( ((double) (haxe.lang.Runtime.toDouble(curv12.__get(vj2))) ) + ( wt2 * c122 ) )))) );
						{
							haxe.root.Array<java.lang.Object> __temp_array15 = this.curv2;
							double __temp_expr17 = ((double) (haxe.lang.Runtime.toDouble(__temp_array15.__set(vj2, ( ((double) (haxe.lang.Runtime.toDouble(__temp_array15.__get(vj2))) ) + ( wt2 * c22 ) )))) );
						}
						
					}
					
				}
				
			}
			
		}
		
		{
			int _g22 = 0;
			int _g23 = nv;
			while (( _g22 < _g23 ))
			{
				int i8 = _g22++;
				double[] this29 = new double[3];
				double[] this30 = ((double[]) (this29) );
				((double[]) (this30) )[0] = ((double) (0) );
				((double[]) (this30) )[1] = ((double) (0) );
				((double[]) (this30) )[2] = ((double) (0) );
				double[] c1c2 = ((double[]) (this30) );
				apparentridges.Mesh.diagonalizeCurv(this.pdir1.__get(i8), this.pdir2.__get(i8), ((double) (haxe.lang.Runtime.toDouble(this.curv1.__get(i8))) ), ((double) (haxe.lang.Runtime.toDouble(curv12.__get(i8))) ), ((double) (haxe.lang.Runtime.toDouble(this.curv2.__get(i8))) ), this.normals.__get(i8), this.pdir1.__get(i8), this.pdir2.__get(i8), c1c2);
				double __temp_expr18 = ((double) (haxe.lang.Runtime.toDouble(this.curv1.__set(i8, ((double[]) (c1c2) )[0]))) );
				double __temp_expr19 = ((double) (haxe.lang.Runtime.toDouble(this.curv2.__set(i8, ((double[]) (c1c2) )[1]))) );
			}
			
		}
		
	}
	
	
	public double[] computeVertViewDepCurv(int i, double ndotv, double u2, double uv, double v2)
	{
		double sectheta_minus1 = ( ( 1.0 / java.lang.Math.abs(ndotv) ) - 1.0 );
		double Q11 = ( ((double) (haxe.lang.Runtime.toDouble(this.curv1.__get(i))) ) * (( 1.0 + ( sectheta_minus1 * u2 ) )) );
		double Q12 = ( ((double) (haxe.lang.Runtime.toDouble(this.curv1.__get(i))) ) * (( sectheta_minus1 * uv )) );
		double Q21 = ( ((double) (haxe.lang.Runtime.toDouble(this.curv2.__get(i))) ) * (( sectheta_minus1 * uv )) );
		double Q22 = ( ((double) (haxe.lang.Runtime.toDouble(this.curv2.__get(i))) ) * (( 1.0 + ( sectheta_minus1 * v2 ) )) );
		double QTQ1 = ( ( Q11 * Q11 ) + ( Q21 * Q21 ) );
		double QTQ12 = ( ( Q11 * Q12 ) + ( Q21 * Q22 ) );
		double QTQ2 = ( ( Q12 * Q12 ) + ( Q22 * Q22 ) );
		return apparentridges.Util.largestEig2x2(QTQ1, QTQ12, QTQ2);
	}
	
	
	public double computeVertDt1q1(int i, double ndotv, haxe.root.Array<double[]> t1q1)
	{
		double[] v0 = this.vertices.__get(i);
		double this_viewdep_curv = ((double[]) (t1q1.__get(i)) )[2];
		double[] this1 = this.pdir1.__get(i);
		double rhs = ((double[]) (t1q1.__get(i)) )[0];
		double[] this2 = new double[3];
		double[] this3 = ((double[]) (this2) );
		((double[]) (this3) )[0] = ( ((double[]) (this1) )[0] * rhs );
		((double[]) (this3) )[1] = ( ((double[]) (this1) )[1] * rhs );
		((double[]) (this3) )[2] = ( ((double[]) (this1) )[2] * rhs );
		double[] this4 = ((double[]) (this3) );
		double[] this5 = this.pdir2.__get(i);
		double rhs1 = ((double[]) (t1q1.__get(i)) )[1];
		double[] this6 = new double[3];
		double[] this7 = ((double[]) (this6) );
		((double[]) (this7) )[0] = ( ((double[]) (this5) )[0] * rhs1 );
		((double[]) (this7) )[1] = ( ((double[]) (this5) )[1] * rhs1 );
		((double[]) (this7) )[2] = ( ((double[]) (this5) )[2] * rhs1 );
		double[] rhs2 = ((double[]) (this7) );
		double[] this8 = new double[3];
		double[] this9 = ((double[]) (this8) );
		((double[]) (this9) )[0] = ( ((double[]) (this4) )[0] + ((double[]) (rhs2) )[0] );
		((double[]) (this9) )[1] = ( ((double[]) (this4) )[1] + ((double[]) (rhs2) )[1] );
		((double[]) (this9) )[2] = ( ((double[]) (this4) )[2] + ((double[]) (rhs2) )[2] );
		double[] world_t1 = ((double[]) (this9) );
		double[] v1 = this.normals.__get(i);
		double[] this10 = new double[3];
		double[] this11 = ((double[]) (this10) );
		((double[]) (this11) )[0] = ( ( ((double[]) (v1) )[1] * ((double[]) (world_t1) )[2] ) - ( ((double[]) (v1) )[2] * ((double[]) (world_t1) )[1] ) );
		((double[]) (this11) )[1] = ( ( ((double[]) (v1) )[2] * ((double[]) (world_t1) )[0] ) - ( ((double[]) (v1) )[0] * ((double[]) (world_t1) )[2] ) );
		((double[]) (this11) )[2] = ( ( ((double[]) (v1) )[0] * ((double[]) (world_t1) )[1] ) - ( ((double[]) (v1) )[1] * ((double[]) (world_t1) )[0] ) );
		double[] world_t2 = ((double[]) (this11) );
		double v0_dot_t2 = ( ( ( ((double[]) (v0) )[0] * ((double[]) (world_t2) )[0] ) + ( ((double[]) (v0) )[1] * ((double[]) (world_t2) )[1] ) ) + ( ((double[]) (v0) )[2] * ((double[]) (world_t2) )[2] ) );
		double Dt1q1 = 0.0;
		int n = 0;
		int naf = this.adjacentFaces.__get(i).length;
		{
			int _g = 0;
			int _g1 = naf;
			while (( _g < _g1 ))
			{
				int j = _g++;
				int f = ((int) (haxe.lang.Runtime.toInt(this.adjacentFaces.__get(i).__get(j))) );
				int[] this12 = this.faces.__get(f);
				int ind = ( (( ((int[]) (this12) )[0] == i )) ? (0) : (( (( ((int[]) (this12) )[1] == i )) ? (1) : (( (( ((int[]) (this12) )[2] == i )) ? (2) : (-1) )) )) );
				int i1 = ((int[]) (this.faces.__get(f)) )[( (( ind < 2 )) ? (( ind + 1 )) : (( ind - 2 )) )];
				int i2 = ((int[]) (this.faces.__get(f)) )[( (( ind > 0 )) ? (( ind - 1 )) : (( ind + 2 )) )];
				double[] v11 = this.vertices.__get(i1);
				double[] v2 = this.vertices.__get(i2);
				double v1_dot_t2 = ( ( ( ((double[]) (v11) )[0] * ((double[]) (world_t2) )[0] ) + ( ((double[]) (v11) )[1] * ((double[]) (world_t2) )[1] ) ) + ( ((double[]) (v11) )[2] * ((double[]) (world_t2) )[2] ) );
				double v2_dot_t2 = ( ( ( ((double[]) (v2) )[0] * ((double[]) (world_t2) )[0] ) + ( ((double[]) (v2) )[1] * ((double[]) (world_t2) )[1] ) ) + ( ((double[]) (v2) )[2] * ((double[]) (world_t2) )[2] ) );
				double w1 = ( (( v2_dot_t2 - v0_dot_t2 )) / (( v2_dot_t2 - v1_dot_t2 )) );
				if (( ( w1 < 0.0 ) || ( w1 >= 1.0 ) )) 
				{
					continue;
				}
				
				double w2 = ( 1.0 - w1 );
				double[] this13 = new double[3];
				double[] this14 = ((double[]) (this13) );
				((double[]) (this14) )[0] = ( ((double[]) (v11) )[0] * w1 );
				((double[]) (this14) )[1] = ( ((double[]) (v11) )[1] * w1 );
				((double[]) (this14) )[2] = ( ((double[]) (v11) )[2] * w1 );
				double[] this15 = ((double[]) (this14) );
				double[] this16 = new double[3];
				double[] this17 = ((double[]) (this16) );
				((double[]) (this17) )[0] = ( ((double[]) (v2) )[0] * w2 );
				((double[]) (this17) )[1] = ( ((double[]) (v2) )[1] * w2 );
				((double[]) (this17) )[2] = ( ((double[]) (v2) )[2] * w2 );
				double[] rhs3 = ((double[]) (this17) );
				double[] this18 = new double[3];
				double[] this19 = ((double[]) (this18) );
				((double[]) (this19) )[0] = ( ((double[]) (this15) )[0] + ((double[]) (rhs3) )[0] );
				((double[]) (this19) )[1] = ( ((double[]) (this15) )[1] + ((double[]) (rhs3) )[1] );
				((double[]) (this19) )[2] = ( ((double[]) (this15) )[2] + ((double[]) (rhs3) )[2] );
				double[] p = ((double[]) (this19) );
				double interp_viewdep_curv = ( ( w1 * ((double[]) (t1q1.__get(i1)) )[2] ) + ( w2 * ((double[]) (t1q1.__get(i2)) )[2] ) );
				double[] this20 = new double[3];
				double[] this21 = ((double[]) (this20) );
				((double[]) (this21) )[0] = ( ((double[]) (p) )[0] - ((double[]) (v0) )[0] );
				((double[]) (this21) )[1] = ( ((double[]) (p) )[1] - ((double[]) (v0) )[1] );
				((double[]) (this21) )[2] = ( ((double[]) (p) )[2] - ((double[]) (v0) )[2] );
				double[] v12 = ((double[]) (this21) );
				double proj_dist = ( ( ( ((double[]) (v12) )[0] * ((double[]) (world_t1) )[0] ) + ( ((double[]) (v12) )[1] * ((double[]) (world_t1) )[1] ) ) + ( ((double[]) (v12) )[2] * ((double[]) (world_t1) )[2] ) );
				proj_dist *= java.lang.Math.abs(ndotv);
				Dt1q1 += ( (( interp_viewdep_curv - this_viewdep_curv )) / proj_dist );
				 ++ n;
				if (( n == 2 )) 
				{
					Dt1q1 *= 0.5;
					return Dt1q1;
				}
				
			}
			
		}
		
		return Dt1q1;
	}
	
	
	public apparentridges.Ridge segmentApparentRidge(int v0, int v1, int v2, double emax0, double emax1, double emax2, double kmax0, double kmax1, double kmax2, double[] tmax0, double[] tmax1, double[] tmax2, double thresh, boolean to_center, boolean do_test)
	{
		double w10 = ( java.lang.Math.abs(emax0) / (( java.lang.Math.abs(emax0) + java.lang.Math.abs(emax1) )) );
		double w01 = ( 1.0 - w10 );
		double[] this1 = this.vertices.__get(v0);
		double[] this2 = new double[3];
		double[] this3 = ((double[]) (this2) );
		((double[]) (this3) )[0] = ( ((double[]) (this1) )[0] * w01 );
		((double[]) (this3) )[1] = ( ((double[]) (this1) )[1] * w01 );
		((double[]) (this3) )[2] = ( ((double[]) (this1) )[2] * w01 );
		double[] this4 = ((double[]) (this3) );
		double[] this5 = this.vertices.__get(v1);
		double[] this6 = new double[3];
		double[] this7 = ((double[]) (this6) );
		((double[]) (this7) )[0] = ( ((double[]) (this5) )[0] * w10 );
		((double[]) (this7) )[1] = ( ((double[]) (this5) )[1] * w10 );
		((double[]) (this7) )[2] = ( ((double[]) (this5) )[2] * w10 );
		double[] rhs = ((double[]) (this7) );
		double[] this8 = new double[3];
		double[] this9 = ((double[]) (this8) );
		((double[]) (this9) )[0] = ( ((double[]) (this4) )[0] + ((double[]) (rhs) )[0] );
		((double[]) (this9) )[1] = ( ((double[]) (this4) )[1] + ((double[]) (rhs) )[1] );
		((double[]) (this9) )[2] = ( ((double[]) (this4) )[2] + ((double[]) (rhs) )[2] );
		double[] p01 = ((double[]) (this9) );
		double k01 = java.lang.Math.abs(( ( w01 * kmax0 ) + ( w10 * kmax1 ) ));
		double[] p12 = null;
		double k12 = 0.0;
		if (to_center) 
		{
			double[] this10 = this.vertices.__get(v0);
			double[] rhs1 = this.vertices.__get(v1);
			double[] this11 = new double[3];
			double[] this12 = ((double[]) (this11) );
			((double[]) (this12) )[0] = ( ((double[]) (this10) )[0] + ((double[]) (rhs1) )[0] );
			((double[]) (this12) )[1] = ( ((double[]) (this10) )[1] + ((double[]) (rhs1) )[1] );
			((double[]) (this12) )[2] = ( ((double[]) (this10) )[2] + ((double[]) (rhs1) )[2] );
			double[] this13 = ((double[]) (this12) );
			double[] rhs2 = this.vertices.__get(v2);
			double[] this14 = new double[3];
			double[] this15 = ((double[]) (this14) );
			((double[]) (this15) )[0] = ( ((double[]) (this13) )[0] + ((double[]) (rhs2) )[0] );
			((double[]) (this15) )[1] = ( ((double[]) (this13) )[1] + ((double[]) (rhs2) )[1] );
			((double[]) (this15) )[2] = ( ((double[]) (this13) )[2] + ((double[]) (rhs2) )[2] );
			double[] this16 = ((double[]) (this15) );
			double[] this17 = new double[3];
			double[] this18 = ((double[]) (this17) );
			((double[]) (this18) )[0] = ( ((double[]) (this16) )[0] * 0.333333333333333315 );
			((double[]) (this18) )[1] = ( ((double[]) (this16) )[1] * 0.333333333333333315 );
			((double[]) (this18) )[2] = ( ((double[]) (this16) )[2] * 0.333333333333333315 );
			p12 = ((double[]) (this18) );
			k12 = ( java.lang.Math.abs(( ( kmax0 + kmax1 ) + kmax2 )) / 3.0 );
		}
		else
		{
			double w21 = ( java.lang.Math.abs(emax1) / (( java.lang.Math.abs(emax1) + java.lang.Math.abs(emax2) )) );
			double w12 = ( 1.0 - w21 );
			double[] this19 = this.vertices.__get(v1);
			double[] this20 = new double[3];
			double[] this21 = ((double[]) (this20) );
			((double[]) (this21) )[0] = ( ((double[]) (this19) )[0] * w12 );
			((double[]) (this21) )[1] = ( ((double[]) (this19) )[1] * w12 );
			((double[]) (this21) )[2] = ( ((double[]) (this19) )[2] * w12 );
			double[] this22 = ((double[]) (this21) );
			double[] this23 = this.vertices.__get(v2);
			double[] this24 = new double[3];
			double[] this25 = ((double[]) (this24) );
			((double[]) (this25) )[0] = ( ((double[]) (this23) )[0] * w21 );
			((double[]) (this25) )[1] = ( ((double[]) (this23) )[1] * w21 );
			((double[]) (this25) )[2] = ( ((double[]) (this23) )[2] * w21 );
			double[] rhs3 = ((double[]) (this25) );
			double[] this26 = new double[3];
			double[] this27 = ((double[]) (this26) );
			((double[]) (this27) )[0] = ( ((double[]) (this22) )[0] + ((double[]) (rhs3) )[0] );
			((double[]) (this27) )[1] = ( ((double[]) (this22) )[1] + ((double[]) (rhs3) )[1] );
			((double[]) (this27) )[2] = ( ((double[]) (this22) )[2] + ((double[]) (rhs3) )[2] );
			p12 = ((double[]) (this27) );
			k12 = java.lang.Math.abs(( ( w12 * kmax1 ) + ( w21 * kmax2 ) ));
		}
		
		k01 -= thresh;
		if (( k01 < 0.0 )) 
		{
			k01 = 0.0;
		}
		
		k12 -= thresh;
		if (( k12 < 0.0 )) 
		{
			k12 = 0.0;
		}
		
		if (( ( k01 == 0.0 ) && ( k12 == 0.0 ) )) 
		{
			return null;
		}
		
		if (do_test) 
		{
			double[] v01 = this.vertices.__get(v0);
			double[] v11 = this.vertices.__get(v1);
			double[] v21 = this.vertices.__get(v2);
			double[] this28 = new double[3];
			double[] this29 = ((double[]) (this28) );
			((double[]) (this29) )[0] = ( ((double[]) (v11) )[0] - ((double[]) (v01) )[0] );
			((double[]) (this29) )[1] = ( ((double[]) (v11) )[1] - ((double[]) (v01) )[1] );
			((double[]) (this29) )[2] = ( ((double[]) (v11) )[2] - ((double[]) (v01) )[2] );
			double[] v12 = ((double[]) (this29) );
			double[] this30 = new double[3];
			double[] this31 = ((double[]) (this30) );
			((double[]) (this31) )[0] = ( ((double[]) (v21) )[0] - ((double[]) (v01) )[0] );
			((double[]) (this31) )[1] = ( ((double[]) (v21) )[1] - ((double[]) (v01) )[1] );
			((double[]) (this31) )[2] = ( ((double[]) (v21) )[2] - ((double[]) (v01) )[2] );
			double[] v22 = ((double[]) (this31) );
			double[] this32 = new double[3];
			double[] this33 = ((double[]) (this32) );
			((double[]) (this33) )[0] = ( ( ((double[]) (v12) )[1] * ((double[]) (v22) )[2] ) - ( ((double[]) (v12) )[2] * ((double[]) (v22) )[1] ) );
			((double[]) (this33) )[1] = ( ( ((double[]) (v12) )[2] * ((double[]) (v22) )[0] ) - ( ((double[]) (v12) )[0] * ((double[]) (v22) )[2] ) );
			((double[]) (this33) )[2] = ( ( ((double[]) (v12) )[0] * ((double[]) (v22) )[1] ) - ( ((double[]) (v12) )[1] * ((double[]) (v22) )[0] ) );
			double[] this34 = ((double[]) (this33) );
			double[] this35 = new double[3];
			double[] this36 = ((double[]) (this35) );
			((double[]) (this36) )[0] = ( ((double[]) (this34) )[0] * 0.5 );
			((double[]) (this36) )[1] = ( ((double[]) (this34) )[1] * 0.5 );
			((double[]) (this36) )[2] = ( ((double[]) (this34) )[2] * 0.5 );
			double[] v13 = ((double[]) (this36) );
			double[] this37 = new double[3];
			double[] this38 = ((double[]) (this37) );
			((double[]) (this38) )[0] = ( ((double[]) (p01) )[0] - ((double[]) (p12) )[0] );
			((double[]) (this38) )[1] = ( ((double[]) (p01) )[1] - ((double[]) (p12) )[1] );
			((double[]) (this38) )[2] = ( ((double[]) (p01) )[2] - ((double[]) (p12) )[2] );
			double[] v23 = ((double[]) (this38) );
			double[] this39 = new double[3];
			double[] this40 = ((double[]) (this39) );
			((double[]) (this40) )[0] = ( ( ((double[]) (v13) )[1] * ((double[]) (v23) )[2] ) - ( ((double[]) (v13) )[2] * ((double[]) (v23) )[1] ) );
			((double[]) (this40) )[1] = ( ( ((double[]) (v13) )[2] * ((double[]) (v23) )[0] ) - ( ((double[]) (v13) )[0] * ((double[]) (v23) )[2] ) );
			((double[]) (this40) )[2] = ( ( ((double[]) (v13) )[0] * ((double[]) (v23) )[1] ) - ( ((double[]) (v13) )[1] * ((double[]) (v23) )[0] ) );
			double[] perp = ((double[]) (this40) );
			if (( ( ( ( ( ( ((double[]) (tmax0) )[0] * ((double[]) (perp) )[0] ) + ( ((double[]) (tmax0) )[1] * ((double[]) (perp) )[1] ) ) + ( ((double[]) (tmax0) )[2] * ((double[]) (perp) )[2] ) ) <= 0.0 ) || ( ( ( ( ((double[]) (tmax1) )[0] * ((double[]) (perp) )[0] ) + ( ((double[]) (tmax1) )[1] * ((double[]) (perp) )[1] ) ) + ( ((double[]) (tmax1) )[2] * ((double[]) (perp) )[2] ) ) >= 0.0 ) ) || ( ( ( ( ((double[]) (tmax2) )[0] * ((double[]) (perp) )[0] ) + ( ((double[]) (tmax2) )[1] * ((double[]) (perp) )[1] ) ) + ( ((double[]) (tmax2) )[2] * ((double[]) (perp) )[2] ) ) <= 0.0 ) )) 
			{
				return null;
			}
			
		}
		
		k01 /= ( k01 + thresh );
		k12 /= ( k12 + thresh );
		return new apparentridges.Ridge(p01, k01, p12, k12);
	}
	
	
	public haxe.root.Array<apparentridges.Ridge> facesApparentRidges(haxe.root.Array<java.lang.Object> ndotv, haxe.root.Array<double[]> t1q1, haxe.root.Array<java.lang.Object> Dt1q1, boolean do_bfcull, boolean do_test, double thresh)
	{
		haxe.root.Array<apparentridges.Ridge> ridges = new haxe.root.Array<apparentridges.Ridge>(new apparentridges.Ridge[]{});
		{
			int _g = 0;
			haxe.root.Array<int[]> _g1 = this.faces;
			while (( _g < _g1.length ))
			{
				int[] f = _g1.__get(_g);
				 ++ _g;
				int v0 = ((int[]) (f) )[0];
				int v1 = ((int[]) (f) )[1];
				int v2 = ((int[]) (f) )[2];
				if (( ( ( do_bfcull && ( ((double) (haxe.lang.Runtime.toDouble(ndotv.__get(v0))) ) <= 0 ) ) && ( ((double) (haxe.lang.Runtime.toDouble(ndotv.__get(v1))) ) <= 0 ) ) && ( ((double) (haxe.lang.Runtime.toDouble(ndotv.__get(v2))) ) <= 0 ) )) 
				{
					continue;
				}
				
				double kmax0 = ((double[]) (t1q1.__get(v0)) )[2];
				double kmax1 = ((double[]) (t1q1.__get(v1)) )[2];
				double kmax2 = ((double[]) (t1q1.__get(v2)) )[2];
				if (( ( ( kmax0 <= thresh ) && ( kmax1 <= thresh ) ) && ( kmax2 <= thresh ) )) 
				{
					continue;
				}
				
				double emax0 = ((double) (haxe.lang.Runtime.toDouble(Dt1q1.__get(v0))) );
				double emax1 = ((double) (haxe.lang.Runtime.toDouble(Dt1q1.__get(v1))) );
				double emax2 = ((double) (haxe.lang.Runtime.toDouble(Dt1q1.__get(v2))) );
				double[] this1 = this.pdir1.__get(v0);
				double rhs = ((double[]) (t1q1.__get(v0)) )[0];
				double[] this2 = new double[3];
				double[] this3 = ((double[]) (this2) );
				((double[]) (this3) )[0] = ( ((double[]) (this1) )[0] * rhs );
				((double[]) (this3) )[1] = ( ((double[]) (this1) )[1] * rhs );
				((double[]) (this3) )[2] = ( ((double[]) (this1) )[2] * rhs );
				double[] this4 = ((double[]) (this3) );
				double[] this5 = this.pdir2.__get(v0);
				double rhs1 = ((double[]) (t1q1.__get(v0)) )[1];
				double[] this6 = new double[3];
				double[] this7 = ((double[]) (this6) );
				((double[]) (this7) )[0] = ( ((double[]) (this5) )[0] * rhs1 );
				((double[]) (this7) )[1] = ( ((double[]) (this5) )[1] * rhs1 );
				((double[]) (this7) )[2] = ( ((double[]) (this5) )[2] * rhs1 );
				double[] rhs2 = ((double[]) (this7) );
				double[] this8 = new double[3];
				double[] this9 = ((double[]) (this8) );
				((double[]) (this9) )[0] = ( ((double[]) (this4) )[0] + ((double[]) (rhs2) )[0] );
				((double[]) (this9) )[1] = ( ((double[]) (this4) )[1] + ((double[]) (rhs2) )[1] );
				((double[]) (this9) )[2] = ( ((double[]) (this4) )[2] + ((double[]) (rhs2) )[2] );
				double[] world_t1_0 = ((double[]) (this9) );
				double[] this10 = this.pdir1.__get(v1);
				double rhs3 = ((double[]) (t1q1.__get(v1)) )[0];
				double[] this11 = new double[3];
				double[] this12 = ((double[]) (this11) );
				((double[]) (this12) )[0] = ( ((double[]) (this10) )[0] * rhs3 );
				((double[]) (this12) )[1] = ( ((double[]) (this10) )[1] * rhs3 );
				((double[]) (this12) )[2] = ( ((double[]) (this10) )[2] * rhs3 );
				double[] this13 = ((double[]) (this12) );
				double[] this14 = this.pdir2.__get(v1);
				double rhs4 = ((double[]) (t1q1.__get(v1)) )[1];
				double[] this15 = new double[3];
				double[] this16 = ((double[]) (this15) );
				((double[]) (this16) )[0] = ( ((double[]) (this14) )[0] * rhs4 );
				((double[]) (this16) )[1] = ( ((double[]) (this14) )[1] * rhs4 );
				((double[]) (this16) )[2] = ( ((double[]) (this14) )[2] * rhs4 );
				double[] rhs5 = ((double[]) (this16) );
				double[] this17 = new double[3];
				double[] this18 = ((double[]) (this17) );
				((double[]) (this18) )[0] = ( ((double[]) (this13) )[0] + ((double[]) (rhs5) )[0] );
				((double[]) (this18) )[1] = ( ((double[]) (this13) )[1] + ((double[]) (rhs5) )[1] );
				((double[]) (this18) )[2] = ( ((double[]) (this13) )[2] + ((double[]) (rhs5) )[2] );
				double[] world_t1_1 = ((double[]) (this18) );
				double[] this19 = this.pdir1.__get(v2);
				double rhs6 = ((double[]) (t1q1.__get(v2)) )[0];
				double[] this20 = new double[3];
				double[] this21 = ((double[]) (this20) );
				((double[]) (this21) )[0] = ( ((double[]) (this19) )[0] * rhs6 );
				((double[]) (this21) )[1] = ( ((double[]) (this19) )[1] * rhs6 );
				((double[]) (this21) )[2] = ( ((double[]) (this19) )[2] * rhs6 );
				double[] this22 = ((double[]) (this21) );
				double[] this23 = this.pdir2.__get(v2);
				double rhs7 = ((double[]) (t1q1.__get(v2)) )[1];
				double[] this24 = new double[3];
				double[] this25 = ((double[]) (this24) );
				((double[]) (this25) )[0] = ( ((double[]) (this23) )[0] * rhs7 );
				((double[]) (this25) )[1] = ( ((double[]) (this23) )[1] * rhs7 );
				((double[]) (this25) )[2] = ( ((double[]) (this23) )[2] * rhs7 );
				double[] rhs8 = ((double[]) (this25) );
				double[] this26 = new double[3];
				double[] this27 = ((double[]) (this26) );
				((double[]) (this27) )[0] = ( ((double[]) (this22) )[0] + ((double[]) (rhs8) )[0] );
				((double[]) (this27) )[1] = ( ((double[]) (this22) )[1] + ((double[]) (rhs8) )[1] );
				((double[]) (this27) )[2] = ( ((double[]) (this22) )[2] + ((double[]) (rhs8) )[2] );
				double[] world_t1_2 = ((double[]) (this27) );
				double rhs9 = ((double) (haxe.lang.Runtime.toDouble(Dt1q1.__get(v0))) );
				double[] this28 = new double[3];
				double[] this29 = ((double[]) (this28) );
				((double[]) (this29) )[0] = ( ((double[]) (world_t1_0) )[0] * rhs9 );
				((double[]) (this29) )[1] = ( ((double[]) (world_t1_0) )[1] * rhs9 );
				((double[]) (this29) )[2] = ( ((double[]) (world_t1_0) )[2] * rhs9 );
				double[] tmax0 = ((double[]) (this29) );
				double rhs10 = ((double) (haxe.lang.Runtime.toDouble(Dt1q1.__get(v1))) );
				double[] this30 = new double[3];
				double[] this31 = ((double[]) (this30) );
				((double[]) (this31) )[0] = ( ((double[]) (world_t1_1) )[0] * rhs10 );
				((double[]) (this31) )[1] = ( ((double[]) (world_t1_1) )[1] * rhs10 );
				((double[]) (this31) )[2] = ( ((double[]) (world_t1_1) )[2] * rhs10 );
				double[] tmax1 = ((double[]) (this31) );
				double rhs11 = ((double) (haxe.lang.Runtime.toDouble(Dt1q1.__get(v2))) );
				double[] this32 = new double[3];
				double[] this33 = ((double[]) (this32) );
				((double[]) (this33) )[0] = ( ((double[]) (world_t1_2) )[0] * rhs11 );
				((double[]) (this33) )[1] = ( ((double[]) (world_t1_2) )[1] * rhs11 );
				((double[]) (this33) )[2] = ( ((double[]) (world_t1_2) )[2] * rhs11 );
				double[] tmax2 = ((double[]) (this33) );
				boolean z01 = ( ( ( ( ((double[]) (tmax0) )[0] * ((double[]) (tmax1) )[0] ) + ( ((double[]) (tmax0) )[1] * ((double[]) (tmax1) )[1] ) ) + ( ((double[]) (tmax0) )[2] * ((double[]) (tmax1) )[2] ) ) <= 0.0 );
				boolean z12 = ( ( ( ( ((double[]) (tmax1) )[0] * ((double[]) (tmax2) )[0] ) + ( ((double[]) (tmax1) )[1] * ((double[]) (tmax2) )[1] ) ) + ( ((double[]) (tmax1) )[2] * ((double[]) (tmax2) )[2] ) ) <= 0.0 );
				boolean z20 = ( ( ( ( ((double[]) (tmax2) )[0] * ((double[]) (tmax0) )[0] ) + ( ((double[]) (tmax2) )[1] * ((double[]) (tmax0) )[1] ) ) + ( ((double[]) (tmax2) )[2] * ((double[]) (tmax0) )[2] ) ) <= 0.0 );
				if (( ( ( (( (z01) ? (1) : (0) )) + (( (z12) ? (1) : (0) )) ) + (( (z20) ? (1) : (0) )) ) < 2 )) 
				{
					continue;
				}
				
				if ( ! (z01) ) 
				{
					apparentridges.Ridge r = this.segmentApparentRidge(v1, v2, v0, emax1, emax2, emax0, kmax1, kmax2, kmax0, tmax1, tmax2, tmax0, thresh, false, do_test);
					if (( r != null )) 
					{
						ridges.push(r);
					}
					
				}
				else
				{
					if ( ! (z12) ) 
					{
						apparentridges.Ridge r1 = this.segmentApparentRidge(v2, v0, v1, emax2, emax0, emax1, kmax2, kmax0, kmax1, tmax2, tmax0, tmax1, thresh, false, do_test);
						if (( r1 != null )) 
						{
							ridges.push(r1);
						}
						
					}
					else
					{
						if ( ! (z20) ) 
						{
							apparentridges.Ridge r2 = this.segmentApparentRidge(v0, v1, v2, emax0, emax1, emax2, kmax0, kmax1, kmax2, tmax0, tmax1, tmax2, thresh, false, do_test);
							if (( r2 != null )) 
							{
								ridges.push(r2);
							}
							
						}
						else
						{
							apparentridges.Ridge r0 = this.segmentApparentRidge(v1, v2, v0, emax1, emax2, emax0, kmax1, kmax2, kmax0, tmax1, tmax2, tmax0, thresh, true, do_test);
							apparentridges.Ridge r11 = this.segmentApparentRidge(v2, v0, v1, emax2, emax0, emax1, kmax2, kmax0, kmax1, tmax2, tmax0, tmax1, thresh, true, do_test);
							apparentridges.Ridge r21 = this.segmentApparentRidge(v0, v1, v2, emax0, emax1, emax2, kmax0, kmax1, kmax2, tmax0, tmax1, tmax2, thresh, true, do_test);
							if (( r0 != null )) 
							{
								ridges.push(r0);
							}
							
							if (( r11 != null )) 
							{
								ridges.push(r11);
							}
							
							if (( r21 != null )) 
							{
								ridges.push(r21);
							}
							
						}
						
					}
					
				}
				
			}
			
		}
		
		return ridges;
	}
	
	
	public haxe.root.Array<apparentridges.Ridge> apparentRidges(double[] eye, double thresh)
	{
		int nv = this.vertices.length;
		{
			int _g = 0;
			int _g1 = nv;
			while (( _g < _g1 ))
			{
				int i = _g++;
				double[] rhs = this.vertices.__get(i);
				double[] this1 = new double[3];
				double[] this2 = ((double[]) (this1) );
				((double[]) (this2) )[0] = ( ((double[]) (eye) )[0] - ((double[]) (rhs) )[0] );
				((double[]) (this2) )[1] = ( ((double[]) (eye) )[1] - ((double[]) (rhs) )[1] );
				((double[]) (this2) )[2] = ( ((double[]) (eye) )[2] - ((double[]) (rhs) )[2] );
				double[] viewdir = ((double[]) (this2) );
				double rlv = ( 1.0 / java.lang.Math.sqrt(( ( ( ((double[]) (viewdir) )[0] * ((double[]) (viewdir) )[0] ) + ( ((double[]) (viewdir) )[1] * ((double[]) (viewdir) )[1] ) ) + ( ((double[]) (viewdir) )[2] * ((double[]) (viewdir) )[2] ) )) );
				double[] this3 = new double[3];
				double[] this4 = ((double[]) (this3) );
				((double[]) (this4) )[0] = ( ((double[]) (viewdir) )[0] * rlv );
				((double[]) (this4) )[1] = ( ((double[]) (viewdir) )[1] * rlv );
				((double[]) (this4) )[2] = ( ((double[]) (viewdir) )[2] * rlv );
				viewdir = ((double[]) (this4) );
				double[] v2 = this.normals.__get(i);
				double __temp_expr1 = ((double) (haxe.lang.Runtime.toDouble(this.ndotv.__set(i, ( ( ( ((double[]) (viewdir) )[0] * ((double[]) (v2) )[0] ) + ( ((double[]) (viewdir) )[1] * ((double[]) (v2) )[1] ) ) + ( ((double[]) (viewdir) )[2] * ((double[]) (v2) )[2] ) )))) );
				double[] v21 = this.pdir1.__get(i);
				double u = ( ( ( ((double[]) (viewdir) )[0] * ((double[]) (v21) )[0] ) + ( ((double[]) (viewdir) )[1] * ((double[]) (v21) )[1] ) ) + ( ((double[]) (viewdir) )[2] * ((double[]) (v21) )[2] ) );
				double u2 = ( u * u );
				double[] v22 = this.pdir2.__get(i);
				double v = ( ( ( ((double[]) (viewdir) )[0] * ((double[]) (v22) )[0] ) + ( ((double[]) (viewdir) )[1] * ((double[]) (v22) )[1] ) ) + ( ((double[]) (viewdir) )[2] * ((double[]) (v22) )[2] ) );
				double v23 = ( v * v );
				double csc2theta = ( 1.0 / (( u2 + v23 )) );
				this.t1q1.__set(i, this.computeVertViewDepCurv(i, ((double) (haxe.lang.Runtime.toDouble(this.ndotv.__get(i))) ), ( u2 * csc2theta ), ( ( u * v ) * csc2theta ), ( v23 * csc2theta )));
			}
			
		}
		
		{
			int _g2 = 0;
			int _g3 = nv;
			while (( _g2 < _g3 ))
			{
				int i1 = _g2++;
				double __temp_expr2 = ((double) (haxe.lang.Runtime.toDouble(this.Dt1q1.__set(i1, this.computeVertDt1q1(i1, ((double) (haxe.lang.Runtime.toDouble(this.ndotv.__get(i1))) ), this.t1q1)))) );
			}
			
		}
		
		double x = this.featureSize;
		return this.facesApparentRidges(this.ndotv, this.t1q1, this.Dt1q1, false, true, ( thresh / (( x * x )) ));
	}
	
	
	public void computeBVHTrivial()
	{
		this.bvh = new apparentridges.BVHTree(this, this.faces.length, null);
		this.bvh.build();
	}
	
	
	public void computeBVH()
	{
		this.bvh = new apparentridges.BVHTree(this, null, null);
		this.bvh.build();
	}
	
	
	public boolean visible(double[] eye, double[] p, java.lang.Object tolerance)
	{
		double tolerance1 = ( (haxe.lang.Runtime.eq(tolerance, null)) ? (((double) (2) )) : (((double) (haxe.lang.Runtime.toDouble(tolerance)) )) );
		double epsilon = ( ( this.bsphere.r / java.lang.Math.sqrt(((double) (this.faces.length) )) ) * tolerance1 );
		double r_tmin = 0.0;
		double r_tmax = 0.0;
		double[] r_o = null;
		double[] r_d = null;
		double[] this1 = new double[3];
		double[] this2 = ((double[]) (this1) );
		((double[]) (this2) )[0] = ( ((double[]) (p) )[0] - ((double[]) (eye) )[0] );
		((double[]) (this2) )[1] = ( ((double[]) (p) )[1] - ((double[]) (eye) )[1] );
		((double[]) (this2) )[2] = ( ((double[]) (p) )[2] - ((double[]) (eye) )[2] );
		double[] x = ((double[]) (this2) );
		double[] this3 = new double[3];
		double[] this4 = ((double[]) (this3) );
		((double[]) (this4) )[0] = ((double[]) (x) )[0];
		((double[]) (this4) )[1] = ((double[]) (x) )[1];
		((double[]) (this4) )[2] = ((double[]) (x) )[2];
		r_d = ((double[]) (this4) );
		{
			double[] this5 = r_d;
			double l = java.lang.Math.sqrt(( ( ( ((double[]) (this5) )[0] * ((double[]) (this5) )[0] ) + ( ((double[]) (this5) )[1] * ((double[]) (this5) )[1] ) ) + ( ((double[]) (this5) )[2] * ((double[]) (this5) )[2] ) ));
			if (( l > 0 )) 
			{
				l = ( 1 / l );
				((double[]) (this5) )[0] *= l;
				((double[]) (this5) )[1] *= l;
				((double[]) (this5) )[2] *= l;
			}
			else
			{
				((double[]) (this5) )[0] = ((double) (0) );
				((double[]) (this5) )[1] = ((double) (0) );
				((double[]) (this5) )[2] = ((double) (1) );
			}
			
		}
		
		r_o = eye;
		r_tmin = ((double) (0) );
		r_tmax = ( java.lang.Math.sqrt(( ( ( ((double[]) (x) )[0] * ((double[]) (x) )[0] ) + ( ((double[]) (x) )[1] * ((double[]) (x) )[1] ) ) + ( ((double[]) (x) )[2] * ((double[]) (x) )[2] ) )) - epsilon );
		apparentridges.BVHTree bvh = this.bvh;
		haxe.lang.Function[] hitNode = new haxe.lang.Function[]{null};
		hitNode[0] = new apparentridges.Mesh_visible_986__Fun(r_tmin, r_tmax, r_o, r_d, hitNode, bvh);
		apparentridges.RayHit h = ((apparentridges.RayHit) (hitNode[0].__hx_invoke1_o(0.0, bvh.root)) );
		return ( h == null );
	}
	
	
	@Override public double __hx_setField_f(java.lang.String field, double value, boolean handleProperties)
	{
		{
			boolean __temp_executeDef1 = true;
			if (( field != null )) 
			{
				switch (field.hashCode())
				{
					case -377002985:
					{
						if (field.equals("featureSize")) 
						{
							__temp_executeDef1 = false;
							this.featureSize = ((double) (value) );
							return value;
						}
						
						break;
					}
					
					
				}
				
			}
			
			if (__temp_executeDef1) 
			{
				return super.__hx_setField_f(field, value, handleProperties);
			}
			else
			{
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_setField(java.lang.String field, java.lang.Object value, boolean handleProperties)
	{
		{
			boolean __temp_executeDef1 = true;
			if (( field != null )) 
			{
				switch (field.hashCode())
				{
					case 97940:
					{
						if (field.equals("bvh")) 
						{
							__temp_executeDef1 = false;
							this.bvh = ((apparentridges.BVHTree) (value) );
							return value;
						}
						
						break;
					}
					
					
					case -1984141319:
					{
						if (field.equals("vertices")) 
						{
							__temp_executeDef1 = false;
							this.vertices = ((haxe.root.Array<double[]>) (value) );
							return value;
						}
						
						break;
					}
					
					
					case -377002985:
					{
						if (field.equals("featureSize")) 
						{
							__temp_executeDef1 = false;
							this.featureSize = ((double) (haxe.lang.Runtime.toDouble(value)) );
							return value;
						}
						
						break;
					}
					
					
					case 97187254:
					{
						if (field.equals("faces")) 
						{
							__temp_executeDef1 = false;
							this.faces = ((haxe.root.Array<int[]>) (value) );
							return value;
						}
						
						break;
					}
					
					
					case 180033199:
					{
						if (field.equals("bsphere")) 
						{
							__temp_executeDef1 = false;
							this.bsphere = ((apparentridges.BSphere) (value) );
							return value;
						}
						
						break;
					}
					
					
					case 2127618156:
					{
						if (field.equals("normals")) 
						{
							__temp_executeDef1 = false;
							this.normals = ((haxe.root.Array<double[]>) (value) );
							return value;
						}
						
						break;
					}
					
					
					case 66305825:
					{
						if (field.equals("Dt1q1")) 
						{
							__temp_executeDef1 = false;
							this.Dt1q1 = ((haxe.root.Array<java.lang.Object>) (value) );
							return value;
						}
						
						break;
					}
					
					
					case 95027387:
					{
						if (field.equals("curv1")) 
						{
							__temp_executeDef1 = false;
							this.curv1 = ((haxe.root.Array<java.lang.Object>) (value) );
							return value;
						}
						
						break;
					}
					
					
					case 3506397:
					{
						if (field.equals("t1q1")) 
						{
							__temp_executeDef1 = false;
							this.t1q1 = ((haxe.root.Array<double[]>) (value) );
							return value;
						}
						
						break;
					}
					
					
					case 95027388:
					{
						if (field.equals("curv2")) 
						{
							__temp_executeDef1 = false;
							this.curv2 = ((haxe.root.Array<java.lang.Object>) (value) );
							return value;
						}
						
						break;
					}
					
					
					case 104676795:
					{
						if (field.equals("ndotv")) 
						{
							__temp_executeDef1 = false;
							this.ndotv = ((haxe.root.Array<java.lang.Object>) (value) );
							return value;
						}
						
						break;
					}
					
					
					case 106517940:
					{
						if (field.equals("pdir1")) 
						{
							__temp_executeDef1 = false;
							this.pdir1 = ((haxe.root.Array<double[]>) (value) );
							return value;
						}
						
						break;
					}
					
					
					case 1858418068:
					{
						if (field.equals("adjacentFaces")) 
						{
							__temp_executeDef1 = false;
							this.adjacentFaces = ((haxe.root.Array<haxe.root.Array<java.lang.Object>>) (value) );
							return value;
						}
						
						break;
					}
					
					
					case 106517941:
					{
						if (field.equals("pdir2")) 
						{
							__temp_executeDef1 = false;
							this.pdir2 = ((haxe.root.Array<double[]>) (value) );
							return value;
						}
						
						break;
					}
					
					
					case -827651023:
					{
						if (field.equals("cornerAreas")) 
						{
							__temp_executeDef1 = false;
							this.cornerAreas = ((haxe.root.Array<double[]>) (value) );
							return value;
						}
						
						break;
					}
					
					
					case 1238496726:
					{
						if (field.equals("pointAreas")) 
						{
							__temp_executeDef1 = false;
							this.pointAreas = ((haxe.root.Array<java.lang.Object>) (value) );
							return value;
						}
						
						break;
					}
					
					
				}
				
			}
			
			if (__temp_executeDef1) 
			{
				return super.__hx_setField(field, value, handleProperties);
			}
			else
			{
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		{
			boolean __temp_executeDef1 = true;
			if (( field != null )) 
			{
				switch (field.hashCode())
				{
					case 466743410:
					{
						if (field.equals("visible")) 
						{
							__temp_executeDef1 = false;
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "visible")) );
						}
						
						break;
					}
					
					
					case -1984141319:
					{
						if (field.equals("vertices")) 
						{
							__temp_executeDef1 = false;
							return this.vertices;
						}
						
						break;
					}
					
					
					case -270173475:
					{
						if (field.equals("computeBVH")) 
						{
							__temp_executeDef1 = false;
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "computeBVH")) );
						}
						
						break;
					}
					
					
					case 97187254:
					{
						if (field.equals("faces")) 
						{
							__temp_executeDef1 = false;
							return this.faces;
						}
						
						break;
					}
					
					
					case 1968425132:
					{
						if (field.equals("computeBVHTrivial")) 
						{
							__temp_executeDef1 = false;
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "computeBVHTrivial")) );
						}
						
						break;
					}
					
					
					case 2127618156:
					{
						if (field.equals("normals")) 
						{
							__temp_executeDef1 = false;
							return this.normals;
						}
						
						break;
					}
					
					
					case 728279585:
					{
						if (field.equals("apparentRidges")) 
						{
							__temp_executeDef1 = false;
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "apparentRidges")) );
						}
						
						break;
					}
					
					
					case 95027387:
					{
						if (field.equals("curv1")) 
						{
							__temp_executeDef1 = false;
							return this.curv1;
						}
						
						break;
					}
					
					
					case -358140553:
					{
						if (field.equals("facesApparentRidges")) 
						{
							__temp_executeDef1 = false;
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "facesApparentRidges")) );
						}
						
						break;
					}
					
					
					case 95027388:
					{
						if (field.equals("curv2")) 
						{
							__temp_executeDef1 = false;
							return this.curv2;
						}
						
						break;
					}
					
					
					case -1123515361:
					{
						if (field.equals("segmentApparentRidge")) 
						{
							__temp_executeDef1 = false;
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "segmentApparentRidge")) );
						}
						
						break;
					}
					
					
					case 106517940:
					{
						if (field.equals("pdir1")) 
						{
							__temp_executeDef1 = false;
							return this.pdir1;
						}
						
						break;
					}
					
					
					case 911805977:
					{
						if (field.equals("computeVertDt1q1")) 
						{
							__temp_executeDef1 = false;
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "computeVertDt1q1")) );
						}
						
						break;
					}
					
					
					case 106517941:
					{
						if (field.equals("pdir2")) 
						{
							__temp_executeDef1 = false;
							return this.pdir2;
						}
						
						break;
					}
					
					
					case 925304152:
					{
						if (field.equals("computeVertViewDepCurv")) 
						{
							__temp_executeDef1 = false;
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "computeVertViewDepCurv")) );
						}
						
						break;
					}
					
					
					case 1238496726:
					{
						if (field.equals("pointAreas")) 
						{
							__temp_executeDef1 = false;
							return this.pointAreas;
						}
						
						break;
					}
					
					
					case 1392784395:
					{
						if (field.equals("computeCurvatures")) 
						{
							__temp_executeDef1 = false;
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "computeCurvatures")) );
						}
						
						break;
					}
					
					
					case -827651023:
					{
						if (field.equals("cornerAreas")) 
						{
							__temp_executeDef1 = false;
							return this.cornerAreas;
						}
						
						break;
					}
					
					
					case 279167341:
					{
						if (field.equals("computePointAreas")) 
						{
							__temp_executeDef1 = false;
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "computePointAreas")) );
						}
						
						break;
					}
					
					
					case 1858418068:
					{
						if (field.equals("adjacentFaces")) 
						{
							__temp_executeDef1 = false;
							return this.adjacentFaces;
						}
						
						break;
					}
					
					
					case -1805555901:
					{
						if (field.equals("getFaceEdges")) 
						{
							__temp_executeDef1 = false;
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "getFaceEdges")) );
						}
						
						break;
					}
					
					
					case 104676795:
					{
						if (field.equals("ndotv")) 
						{
							__temp_executeDef1 = false;
							return this.ndotv;
						}
						
						break;
					}
					
					
					case 1189097117:
					{
						if (field.equals("computeAdjacentFaces")) 
						{
							__temp_executeDef1 = false;
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "computeAdjacentFaces")) );
						}
						
						break;
					}
					
					
					case 3506397:
					{
						if (field.equals("t1q1")) 
						{
							__temp_executeDef1 = false;
							return this.t1q1;
						}
						
						break;
					}
					
					
					case -51442848:
					{
						if (field.equals("computeFeatureSize")) 
						{
							__temp_executeDef1 = false;
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "computeFeatureSize")) );
						}
						
						break;
					}
					
					
					case 66305825:
					{
						if (field.equals("Dt1q1")) 
						{
							__temp_executeDef1 = false;
							return this.Dt1q1;
						}
						
						break;
					}
					
					
					case 906540696:
					{
						if (field.equals("computeBSphere")) 
						{
							__temp_executeDef1 = false;
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "computeBSphere")) );
						}
						
						break;
					}
					
					
					case 180033199:
					{
						if (field.equals("bsphere")) 
						{
							__temp_executeDef1 = false;
							return this.bsphere;
						}
						
						break;
					}
					
					
					case -524708811:
					{
						if (field.equals("computeNormals")) 
						{
							__temp_executeDef1 = false;
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "computeNormals")) );
						}
						
						break;
					}
					
					
					case -377002985:
					{
						if (field.equals("featureSize")) 
						{
							__temp_executeDef1 = false;
							return this.featureSize;
						}
						
						break;
					}
					
					
					case 454633524:
					{
						if (field.equals("precompute")) 
						{
							__temp_executeDef1 = false;
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "precompute")) );
						}
						
						break;
					}
					
					
					case 97940:
					{
						if (field.equals("bvh")) 
						{
							__temp_executeDef1 = false;
							return this.bvh;
						}
						
						break;
					}
					
					
				}
				
			}
			
			if (__temp_executeDef1) 
			{
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				throw null;
			}
			
		}
		
	}
	
	
	@Override public double __hx_getField_f(java.lang.String field, boolean throwErrors, boolean handleProperties)
	{
		{
			boolean __temp_executeDef1 = true;
			if (( field != null )) 
			{
				switch (field.hashCode())
				{
					case -377002985:
					{
						if (field.equals("featureSize")) 
						{
							__temp_executeDef1 = false;
							return this.featureSize;
						}
						
						break;
					}
					
					
				}
				
			}
			
			if (__temp_executeDef1) 
			{
				return super.__hx_getField_f(field, throwErrors, handleProperties);
			}
			else
			{
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, java.lang.Object[] dynargs)
	{
		{
			boolean __temp_executeDef1 = true;
			if (( field != null )) 
			{
				switch (field.hashCode())
				{
					case 466743410:
					{
						if (field.equals("visible")) 
						{
							__temp_executeDef1 = false;
							return this.visible(((double[]) (dynargs[0]) ), ((double[]) (dynargs[1]) ), ( (( dynargs.length > 2 )) ? (dynargs[2]) : (null) ));
						}
						
						break;
					}
					
					
					case 454633524:
					{
						if (field.equals("precompute")) 
						{
							__temp_executeDef1 = false;
							this.precompute(( (( dynargs.length > 0 )) ? (dynargs[0]) : (null) ), ( (( dynargs.length > 1 )) ? (dynargs[1]) : (null) ));
						}
						
						break;
					}
					
					
					case -270173475:
					{
						if (field.equals("computeBVH")) 
						{
							__temp_executeDef1 = false;
							this.computeBVH();
						}
						
						break;
					}
					
					
					case -524708811:
					{
						if (field.equals("computeNormals")) 
						{
							__temp_executeDef1 = false;
							this.computeNormals();
						}
						
						break;
					}
					
					
					case 1968425132:
					{
						if (field.equals("computeBVHTrivial")) 
						{
							__temp_executeDef1 = false;
							this.computeBVHTrivial();
						}
						
						break;
					}
					
					
					case 906540696:
					{
						if (field.equals("computeBSphere")) 
						{
							__temp_executeDef1 = false;
							this.computeBSphere();
						}
						
						break;
					}
					
					
					case 728279585:
					{
						if (field.equals("apparentRidges")) 
						{
							__temp_executeDef1 = false;
							return this.apparentRidges(((double[]) (dynargs[0]) ), ((double) (haxe.lang.Runtime.toDouble(dynargs[1])) ));
						}
						
						break;
					}
					
					
					case -51442848:
					{
						if (field.equals("computeFeatureSize")) 
						{
							__temp_executeDef1 = false;
							this.computeFeatureSize();
						}
						
						break;
					}
					
					
					case -358140553:
					{
						if (field.equals("facesApparentRidges")) 
						{
							__temp_executeDef1 = false;
							return this.facesApparentRidges(((haxe.root.Array<java.lang.Object>) (dynargs[0]) ), ((haxe.root.Array<double[]>) (dynargs[1]) ), ((haxe.root.Array<java.lang.Object>) (dynargs[2]) ), haxe.lang.Runtime.toBool(((java.lang.Boolean) (dynargs[3]) )), haxe.lang.Runtime.toBool(((java.lang.Boolean) (dynargs[4]) )), ((double) (haxe.lang.Runtime.toDouble(dynargs[5])) ));
						}
						
						break;
					}
					
					
					case 1189097117:
					{
						if (field.equals("computeAdjacentFaces")) 
						{
							__temp_executeDef1 = false;
							this.computeAdjacentFaces();
						}
						
						break;
					}
					
					
					case -1123515361:
					{
						if (field.equals("segmentApparentRidge")) 
						{
							__temp_executeDef1 = false;
							return this.segmentApparentRidge(((int) (haxe.lang.Runtime.toInt(dynargs[0])) ), ((int) (haxe.lang.Runtime.toInt(dynargs[1])) ), ((int) (haxe.lang.Runtime.toInt(dynargs[2])) ), ((double) (haxe.lang.Runtime.toDouble(dynargs[3])) ), ((double) (haxe.lang.Runtime.toDouble(dynargs[4])) ), ((double) (haxe.lang.Runtime.toDouble(dynargs[5])) ), ((double) (haxe.lang.Runtime.toDouble(dynargs[6])) ), ((double) (haxe.lang.Runtime.toDouble(dynargs[7])) ), ((double) (haxe.lang.Runtime.toDouble(dynargs[8])) ), ((double[]) (dynargs[9]) ), ((double[]) (dynargs[10]) ), ((double[]) (dynargs[11]) ), ((double) (haxe.lang.Runtime.toDouble(dynargs[12])) ), haxe.lang.Runtime.toBool(((java.lang.Boolean) (dynargs[13]) )), haxe.lang.Runtime.toBool(((java.lang.Boolean) (dynargs[14]) )));
						}
						
						break;
					}
					
					
					case -1805555901:
					{
						if (field.equals("getFaceEdges")) 
						{
							__temp_executeDef1 = false;
							return this.getFaceEdges(((int[]) (dynargs[0]) ));
						}
						
						break;
					}
					
					
					case 911805977:
					{
						if (field.equals("computeVertDt1q1")) 
						{
							__temp_executeDef1 = false;
							return this.computeVertDt1q1(((int) (haxe.lang.Runtime.toInt(dynargs[0])) ), ((double) (haxe.lang.Runtime.toDouble(dynargs[1])) ), ((haxe.root.Array<double[]>) (dynargs[2]) ));
						}
						
						break;
					}
					
					
					case 279167341:
					{
						if (field.equals("computePointAreas")) 
						{
							__temp_executeDef1 = false;
							this.computePointAreas();
						}
						
						break;
					}
					
					
					case 925304152:
					{
						if (field.equals("computeVertViewDepCurv")) 
						{
							__temp_executeDef1 = false;
							return this.computeVertViewDepCurv(((int) (haxe.lang.Runtime.toInt(dynargs[0])) ), ((double) (haxe.lang.Runtime.toDouble(dynargs[1])) ), ((double) (haxe.lang.Runtime.toDouble(dynargs[2])) ), ((double) (haxe.lang.Runtime.toDouble(dynargs[3])) ), ((double) (haxe.lang.Runtime.toDouble(dynargs[4])) ));
						}
						
						break;
					}
					
					
					case 1392784395:
					{
						if (field.equals("computeCurvatures")) 
						{
							__temp_executeDef1 = false;
							this.computeCurvatures();
						}
						
						break;
					}
					
					
				}
				
			}
			
			if (__temp_executeDef1) 
			{
				return super.__hx_invokeField(field, dynargs);
			}
			
		}
		
		return null;
	}
	
	
	@Override public void __hx_getFields(haxe.root.Array<java.lang.String> baseArr)
	{
		baseArr.push("bvh");
		baseArr.push("featureSize");
		baseArr.push("bsphere");
		baseArr.push("Dt1q1");
		baseArr.push("t1q1");
		baseArr.push("ndotv");
		baseArr.push("adjacentFaces");
		baseArr.push("cornerAreas");
		baseArr.push("pointAreas");
		baseArr.push("pdir2");
		baseArr.push("pdir1");
		baseArr.push("curv2");
		baseArr.push("curv1");
		baseArr.push("normals");
		baseArr.push("faces");
		baseArr.push("vertices");
		super.__hx_getFields(baseArr);
	}
	
	
}


