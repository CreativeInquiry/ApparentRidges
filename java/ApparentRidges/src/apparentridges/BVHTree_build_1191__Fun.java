// Generated by Haxe 4.1.3
package apparentridges;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class BVHTree_build_1191__Fun extends haxe.lang.Function
{
	public BVHTree_build_1191__Fun(haxe.lang.Function[] buildRange, haxe.lang.Function bboxAddFace, apparentridges.BVHTree _gthis)
	{
		super(2, 0);
		this.buildRange = buildRange;
		this.bboxAddFace = bboxAddFace;
		this._gthis = _gthis;
	}
	
	
	@Override public java.lang.Object __hx_invoke2_o(double __fn_float1, java.lang.Object __fn_dyn1, double __fn_float2, java.lang.Object __fn_dyn2)
	{
		int i1 = ( (( __fn_dyn2 == haxe.lang.Runtime.undefined )) ? (((int) (__fn_float2) )) : (((int) (haxe.lang.Runtime.toInt(__fn_dyn2)) )) );
		int i0 = ( (( __fn_dyn1 == haxe.lang.Runtime.undefined )) ? (((int) (__fn_float1) )) : (((int) (haxe.lang.Runtime.toInt(__fn_dyn1)) )) );
		apparentridges.BBox bbox = new apparentridges.BBox();
		{
			int _g = i0;
			int _g1 = i1;
			while (( _g < _g1 ))
			{
				int i = _g++;
				this.bboxAddFace.__hx_invoke2_o(0.0, bbox, 0.0, this._gthis.faces.__get(i));
			}
			
		}
		
		apparentridges.BVHNode node = new apparentridges.BVHNode(bbox, i0, i1);
		if (( ( i1 - i0 ) <= this._gthis.maxLeafSize )) 
		{
			return node;
		}
		
		haxe.root.Array<apparentridges.BVHPartition> parts = new haxe.root.Array<apparentridges.BVHPartition>(new apparentridges.BVHPartition[]{});
		{
			int _g2 = 0;
			while (( _g2 < 3 ))
			{
				int ax = _g2++;
				haxe.root.Array<apparentridges.BVHBucket> buckets = new haxe.root.Array<apparentridges.BVHBucket>(new apparentridges.BVHBucket[]{});
				double lo = ((double[]) (bbox.min) )[ax];
				double hi = ((double[]) (bbox.max) )[ax];
				{
					int _g3 = 0;
					int _g4 = this._gthis.bucketCount;
					while (( _g3 < _g4 ))
					{
						int i2 = _g3++;
						apparentridges.BVHBucket b = new apparentridges.BVHBucket();
						b.min = ( lo + ( ( ((double) (i2) ) / this._gthis.bucketCount ) * (( hi - lo )) ) );
						b.max = ( b.min + ( (( hi - lo )) / this._gthis.bucketCount ) );
						buckets.push(b);
					}
					
				}
				
				{
					int _g5 = i0;
					int _g6 = i1;
					while (( _g5 < _g6 ))
					{
						int i3 = _g5++;
						apparentridges.BBox bb = new apparentridges.BBox();
						this.bboxAddFace.__hx_invoke2_o(0.0, bb, 0.0, this._gthis.faces.__get(i3));
						double[] this1 = bb.min;
						double[] rhs = bb.max;
						double[] this2 = new double[3];
						double[] this3 = ((double[]) (this2) );
						((double[]) (this3) )[0] = ( ((double[]) (this1) )[0] + ((double[]) (rhs) )[0] );
						((double[]) (this3) )[1] = ( ((double[]) (this1) )[1] + ((double[]) (rhs) )[1] );
						((double[]) (this3) )[2] = ( ((double[]) (this1) )[2] + ((double[]) (rhs) )[2] );
						double[] this4 = ((double[]) (this3) );
						double[] this5 = new double[3];
						double[] this6 = ((double[]) (this5) );
						((double[]) (this6) )[0] = ( ((double[]) (this4) )[0] * 0.5 );
						((double[]) (this6) )[1] = ( ((double[]) (this4) )[1] * 0.5 );
						((double[]) (this6) )[2] = ( ((double[]) (this4) )[2] * 0.5 );
						double[] c = ((double[]) (this6) );
						{
							int _g7 = 0;
							int _g8 = this._gthis.bucketCount;
							while (( _g7 < _g8 ))
							{
								int j = _g7++;
								if (( ( buckets.__get(j).min <= ((double[]) (c) )[ax] ) && ( ((double[]) (c) )[ax] <= buckets.__get(j).max ) )) 
								{
									buckets.__get(j).count++;
									{
										apparentridges.BBox _this = buckets.__get(j).bbox;
										((double[]) (_this.min) )[0] = java.lang.Math.min(((double[]) (_this.min) )[0], ((double[]) (bb.min) )[0]);
										((double[]) (_this.min) )[1] = java.lang.Math.min(((double[]) (_this.min) )[1], ((double[]) (bb.min) )[1]);
										((double[]) (_this.min) )[2] = java.lang.Math.min(((double[]) (_this.min) )[2], ((double[]) (bb.min) )[2]);
										((double[]) (_this.max) )[0] = java.lang.Math.max(((double[]) (_this.max) )[0], ((double[]) (bb.max) )[0]);
										((double[]) (_this.max) )[1] = java.lang.Math.max(((double[]) (_this.max) )[1], ((double[]) (bb.max) )[1]);
										((double[]) (_this.max) )[2] = java.lang.Math.max(((double[]) (_this.max) )[2], ((double[]) (bb.max) )[2]);
									}
									
									double buckets1 = buckets.__get(j).area;
									double[] this7 = bb.max;
									double[] rhs1 = bb.min;
									double[] this8 = new double[3];
									double[] this9 = ((double[]) (this8) );
									((double[]) (this9) )[0] = ( ((double[]) (this7) )[0] - ((double[]) (rhs1) )[0] );
									((double[]) (this9) )[1] = ( ((double[]) (this7) )[1] - ((double[]) (rhs1) )[1] );
									((double[]) (this9) )[2] = ( ((double[]) (this7) )[2] - ((double[]) (rhs1) )[2] );
									double[] extent = ((double[]) (this9) );
									double x = java.lang.Math.max(((double[]) (extent) )[0], ((double) (0) ));
									double y = java.lang.Math.max(((double[]) (extent) )[1], ((double) (0) ));
									double z = java.lang.Math.max(((double[]) (extent) )[2], ((double) (0) ));
									buckets.__get(j).area = ( buckets1 + ( 2 * (( ( ( x * z ) + ( x * y ) ) + ( y * z ) )) ) );
									break;
								}
								
							}
							
						}
						
					}
					
				}
				
				{
					int _g9 = 0;
					int _g10 = this._gthis.bucketCount;
					while (( _g9 < _g10 ))
					{
						int i4 = _g9++;
						apparentridges.BVHPartition part = new apparentridges.BVHPartition();
						part.planeIndex = i4;
						part.axis = ax;
						{
							int _g11 = 0;
							int _g12 = i4;
							while (( _g11 < _g12 ))
							{
								int j1 = _g11++;
								part.leftCount += buckets.__get(j1).count;
								part.leftArea += buckets.__get(j1).area;
								{
									apparentridges.BBox _this1 = part.leftBBox;
									apparentridges.BBox bb1 = buckets.__get(j1).bbox;
									((double[]) (_this1.min) )[0] = java.lang.Math.min(((double[]) (_this1.min) )[0], ((double[]) (bb1.min) )[0]);
									((double[]) (_this1.min) )[1] = java.lang.Math.min(((double[]) (_this1.min) )[1], ((double[]) (bb1.min) )[1]);
									((double[]) (_this1.min) )[2] = java.lang.Math.min(((double[]) (_this1.min) )[2], ((double[]) (bb1.min) )[2]);
									((double[]) (_this1.max) )[0] = java.lang.Math.max(((double[]) (_this1.max) )[0], ((double[]) (bb1.max) )[0]);
									((double[]) (_this1.max) )[1] = java.lang.Math.max(((double[]) (_this1.max) )[1], ((double[]) (bb1.max) )[1]);
									((double[]) (_this1.max) )[2] = java.lang.Math.max(((double[]) (_this1.max) )[2], ((double[]) (bb1.max) )[2]);
								}
								
							}
							
						}
						
						{
							int _g13 = i4;
							int _g14 = this._gthis.bucketCount;
							while (( _g13 < _g14 ))
							{
								int j2 = _g13++;
								part.rightCount += buckets.__get(j2).count;
								part.rightArea += buckets.__get(j2).area;
								{
									apparentridges.BBox _this2 = part.rightBBox;
									apparentridges.BBox bb2 = buckets.__get(j2).bbox;
									((double[]) (_this2.min) )[0] = java.lang.Math.min(((double[]) (_this2.min) )[0], ((double[]) (bb2.min) )[0]);
									((double[]) (_this2.min) )[1] = java.lang.Math.min(((double[]) (_this2.min) )[1], ((double[]) (bb2.min) )[1]);
									((double[]) (_this2.min) )[2] = java.lang.Math.min(((double[]) (_this2.min) )[2], ((double[]) (bb2.min) )[2]);
									((double[]) (_this2.max) )[0] = java.lang.Math.max(((double[]) (_this2.max) )[0], ((double[]) (bb2.max) )[0]);
									((double[]) (_this2.max) )[1] = java.lang.Math.max(((double[]) (_this2.max) )[1], ((double[]) (bb2.max) )[1]);
									((double[]) (_this2.max) )[2] = java.lang.Math.max(((double[]) (_this2.max) )[2], ((double[]) (bb2.max) )[2]);
								}
								
							}
							
						}
						
						if (( ( part.leftCount > 0 ) && ( part.rightCount > 0 ) )) 
						{
							apparentridges.BBox _this3 = part.leftBBox;
							double[] this10 = _this3.max;
							double[] rhs2 = _this3.min;
							double[] this11 = new double[3];
							double[] this12 = ((double[]) (this11) );
							((double[]) (this12) )[0] = ( ((double[]) (this10) )[0] - ((double[]) (rhs2) )[0] );
							((double[]) (this12) )[1] = ( ((double[]) (this10) )[1] - ((double[]) (rhs2) )[1] );
							((double[]) (this12) )[2] = ( ((double[]) (this10) )[2] - ((double[]) (rhs2) )[2] );
							double[] extent1 = ((double[]) (this12) );
							double x1 = java.lang.Math.max(((double[]) (extent1) )[0], ((double) (0) ));
							double y1 = java.lang.Math.max(((double[]) (extent1) )[1], ((double) (0) ));
							double z1 = java.lang.Math.max(((double[]) (extent1) )[2], ((double) (0) ));
							double tmp = ( ( 2 * (( ( ( x1 * z1 ) + ( x1 * y1 ) ) + ( y1 * z1 ) )) ) / part.leftCount );
							apparentridges.BBox _this4 = part.rightBBox;
							double[] this13 = _this4.max;
							double[] rhs3 = _this4.min;
							double[] this14 = new double[3];
							double[] this15 = ((double[]) (this14) );
							((double[]) (this15) )[0] = ( ((double[]) (this13) )[0] - ((double[]) (rhs3) )[0] );
							((double[]) (this15) )[1] = ( ((double[]) (this13) )[1] - ((double[]) (rhs3) )[1] );
							((double[]) (this15) )[2] = ( ((double[]) (this13) )[2] - ((double[]) (rhs3) )[2] );
							double[] extent2 = ((double[]) (this15) );
							double x2 = java.lang.Math.max(((double[]) (extent2) )[0], ((double) (0) ));
							double y2 = java.lang.Math.max(((double[]) (extent2) )[1], ((double) (0) ));
							double z2 = java.lang.Math.max(((double[]) (extent2) )[2], ((double) (0) ));
							part.SAH = ( tmp + ( ( 2 * (( ( ( x2 * z2 ) + ( x2 * y2 ) ) + ( y2 * z2 ) )) ) / part.rightCount ) );
							parts.push(part);
						}
						
					}
					
				}
				
			}
			
		}
		
		if (( parts.length == 0 )) 
		{
			return node;
		}
		
		double minSAH = java.lang.Double.POSITIVE_INFINITY;
		apparentridges.BVHPartition minPart = null;
		{
			int _g15 = 0;
			while (( _g15 < parts.length ))
			{
				apparentridges.BVHPartition p = parts.__get(_g15);
				 ++ _g15;
				if (( p.SAH < minSAH )) 
				{
					minSAH = p.SAH;
					minPart = p;
				}
				
			}
			
		}
		
		haxe.lang.Function comp = new apparentridges.BVHTree_build_1257__Fun(minPart, this.bboxAddFace);
		haxe.root.Array<int[]> sorted = this._gthis.faces.slice(i0, i1);
		sorted.sort(comp);
		{
			int _g16 = i0;
			int _g17 = i1;
			while (( _g16 < _g17 ))
			{
				int i5 = _g16++;
				this._gthis.faces.__set(i5, sorted.__get(( i5 - i0 )));
			}
			
		}
		
		int m = ( i0 + minPart.leftCount );
		node.left = ((apparentridges.BVHNode) (this.buildRange[0].__hx_invoke2_o(((double) (i0) ), haxe.lang.Runtime.undefined, ((double) (m) ), haxe.lang.Runtime.undefined)) );
		node.right = ((apparentridges.BVHNode) (this.buildRange[0].__hx_invoke2_o(((double) (m) ), haxe.lang.Runtime.undefined, ((double) (i1) ), haxe.lang.Runtime.undefined)) );
		return node;
	}
	
	
	public haxe.lang.Function[] buildRange;
	
	public haxe.lang.Function bboxAddFace;
	
	public apparentridges.BVHTree _gthis;
	
}


