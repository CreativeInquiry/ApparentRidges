// Generated by Haxe 4.1.3
package apparentridges;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class Util extends haxe.lang.HxObject
{
	public Util(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public Util()
	{
		apparentridges.Util.__hx_ctor_apparentridges_Util(this);
	}
	
	
	protected static void __hx_ctor_apparentridges_Util(apparentridges.Util __hx_this)
	{
	}
	
	
	public static int rndInt(double x)
	{
		return ((int) (((double) (((int) (java.lang.Math.round(x)) )) )) );
	}
	
	
	public static int min(int a, int b)
	{
		if (( a > b )) 
		{
			return b;
		}
		else
		{
			return a;
		}
		
	}
	
	
	public static double sq(double x)
	{
		return ( x * x );
	}
	
	
	public static int nextMod3(int i)
	{
		if (( i < 2 )) 
		{
			return ( i + 1 );
		}
		else
		{
			return ( i - 2 );
		}
		
	}
	
	
	public static int prevMod3(int i)
	{
		if (( i > 0 )) 
		{
			return ( i - 1 );
		}
		else
		{
			return ( i + 2 );
		}
		
	}
	
	
	public static double[] trinorm(double[] v0, double[] v1, double[] v2)
	{
		double[] this1 = new double[3];
		double[] this2 = ((double[]) (this1) );
		((double[]) (this2) )[0] = ( ((double[]) (v1) )[0] - ((double[]) (v0) )[0] );
		((double[]) (this2) )[1] = ( ((double[]) (v1) )[1] - ((double[]) (v0) )[1] );
		((double[]) (this2) )[2] = ( ((double[]) (v1) )[2] - ((double[]) (v0) )[2] );
		double[] v11 = ((double[]) (this2) );
		double[] this3 = new double[3];
		double[] this4 = ((double[]) (this3) );
		((double[]) (this4) )[0] = ( ((double[]) (v2) )[0] - ((double[]) (v0) )[0] );
		((double[]) (this4) )[1] = ( ((double[]) (v2) )[1] - ((double[]) (v0) )[1] );
		((double[]) (this4) )[2] = ( ((double[]) (v2) )[2] - ((double[]) (v0) )[2] );
		double[] v21 = ((double[]) (this4) );
		double[] this5 = new double[3];
		double[] this6 = ((double[]) (this5) );
		((double[]) (this6) )[0] = ( ( ((double[]) (v11) )[1] * ((double[]) (v21) )[2] ) - ( ((double[]) (v11) )[2] * ((double[]) (v21) )[1] ) );
		((double[]) (this6) )[1] = ( ( ((double[]) (v11) )[2] * ((double[]) (v21) )[0] ) - ( ((double[]) (v11) )[0] * ((double[]) (v21) )[2] ) );
		((double[]) (this6) )[2] = ( ( ((double[]) (v11) )[0] * ((double[]) (v21) )[1] ) - ( ((double[]) (v11) )[1] * ((double[]) (v21) )[0] ) );
		double[] this7 = ((double[]) (this6) );
		double[] this8 = new double[3];
		double[] this9 = ((double[]) (this8) );
		((double[]) (this9) )[0] = ( ((double[]) (this7) )[0] * 0.5 );
		((double[]) (this9) )[1] = ( ((double[]) (this7) )[1] * 0.5 );
		((double[]) (this9) )[2] = ( ((double[]) (this7) )[2] * 0.5 );
		return ((double[]) (this9) );
	}
	
	
	public static boolean ldltdc(haxe.root.Array<haxe.root.Array<java.lang.Object>> A, haxe.root.Array<java.lang.Object> rdiag)
	{
		int N = rdiag.length;
		if (( N < 1 )) 
		{
			return false;
		}
		else
		{
			if (( N <= 3 )) 
			{
				double d0 = ((double) (haxe.lang.Runtime.toDouble(A.__get(0).__get(0))) );
				double __temp_expr1 = ((double) (haxe.lang.Runtime.toDouble(rdiag.__set(0, ( 1 / d0 )))) );
				if (( N == 1 )) 
				{
					return ( d0 != 0 );
				}
				
				double __temp_expr2 = ((double) (haxe.lang.Runtime.toDouble(A.__get(1).__set(0, ((double) (haxe.lang.Runtime.toDouble(A.__get(0).__get(1))) )))) );
				double l10 = ( ((double) (haxe.lang.Runtime.toDouble(rdiag.__get(0))) ) * ((double) (haxe.lang.Runtime.toDouble(A.__get(1).__get(0))) ) );
				double d1 = ( ((double) (haxe.lang.Runtime.toDouble(A.__get(1).__get(1))) ) - ( l10 * ((double) (haxe.lang.Runtime.toDouble(A.__get(1).__get(0))) ) ) );
				double __temp_expr3 = ((double) (haxe.lang.Runtime.toDouble(rdiag.__set(1, ( 1 / d1 )))) );
				if (( N == 2 )) 
				{
					if (( d0 != 0 )) 
					{
						return ( d1 != 0 );
					}
					else
					{
						return false;
					}
					
				}
				
				double x = ((double) (haxe.lang.Runtime.toDouble(A.__get(2).__get(0))) );
				double x1 = ((double) (haxe.lang.Runtime.toDouble(A.__get(2).__get(1))) );
				double d2 = ( ( ((double) (haxe.lang.Runtime.toDouble(A.__get(2).__get(2))) ) - ( ((double) (haxe.lang.Runtime.toDouble(rdiag.__get(0))) ) * (( x * x )) ) ) - ( ((double) (haxe.lang.Runtime.toDouble(rdiag.__get(1))) ) * (( x1 * x1 )) ) );
				double __temp_expr4 = ((double) (haxe.lang.Runtime.toDouble(rdiag.__set(2, ( 1 / d2 )))) );
				double __temp_expr5 = ((double) (haxe.lang.Runtime.toDouble(A.__get(2).__set(0, ((double) (haxe.lang.Runtime.toDouble(A.__get(0).__get(2))) )))) );
				double __temp_expr6 = ((double) (haxe.lang.Runtime.toDouble(A.__get(2).__set(1, ( ((double) (haxe.lang.Runtime.toDouble(A.__get(1).__get(2))) ) - ( l10 * ((double) (haxe.lang.Runtime.toDouble(A.__get(2).__get(0))) ) ) )))) );
				if (( ( d0 != 0 ) && ( d1 != 0 ) )) 
				{
					return ( d2 != 0 );
				}
				else
				{
					return false;
				}
				
			}
			
		}
		
		haxe.root.Array<java.lang.Object> v = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
		{
			int _g = 0;
			int _g1 = N;
			while (( _g < _g1 ))
			{
				int i = _g++;
				{
					int _g2 = 0;
					int _g3 = i;
					while (( _g2 < _g3 ))
					{
						int k = _g2++;
						double __temp_expr7 = ((double) (haxe.lang.Runtime.toDouble(v.__set(k, ( ((double) (haxe.lang.Runtime.toDouble(A.__get(i).__get(k))) ) * ((double) (haxe.lang.Runtime.toDouble(rdiag.__get(k))) ) )))) );
					}
					
				}
				
				{
					int _g4 = i;
					int _g5 = N;
					while (( _g4 < _g5 ))
					{
						int j = _g4++;
						double sum = ((double) (haxe.lang.Runtime.toDouble(A.__get(i).__get(j))) );
						{
							int _g6 = 0;
							int _g7 = i;
							while (( _g6 < _g7 ))
							{
								int k1 = _g6++;
								sum -= ( ((double) (haxe.lang.Runtime.toDouble(v.__get(k1))) ) * ((double) (haxe.lang.Runtime.toDouble(A.__get(j).__get(k1))) ) );
							}
							
						}
						
						if (( i == j )) 
						{
							if (( sum == 0 )) 
							{
								return false;
							}
							
							double __temp_expr9 = ((double) (haxe.lang.Runtime.toDouble(rdiag.__set(i, ( 1 / sum )))) );
						}
						else
						{
							double __temp_expr8 = ((double) (haxe.lang.Runtime.toDouble(A.__get(j).__set(i, sum))) );
						}
						
					}
					
				}
				
			}
			
		}
		
		return true;
	}
	
	
	public static void ldltsl(haxe.root.Array<haxe.root.Array<java.lang.Object>> A, haxe.root.Array<java.lang.Object> rdiag, haxe.root.Array<java.lang.Object> b, haxe.root.Array<java.lang.Object> x)
	{
		int N = rdiag.length;
		{
			int _g = 0;
			int _g1 = N;
			while (( _g < _g1 ))
			{
				int i = _g++;
				double sum = ((double) (haxe.lang.Runtime.toDouble(b.__get(i))) );
				{
					int _g2 = 0;
					int _g3 = i;
					while (( _g2 < _g3 ))
					{
						int k = _g2++;
						sum -= ( ((double) (haxe.lang.Runtime.toDouble(A.__get(i).__get(k))) ) * ((double) (haxe.lang.Runtime.toDouble(x.__get(k))) ) );
					}
					
				}
				
				double __temp_expr1 = ((double) (haxe.lang.Runtime.toDouble(x.__set(i, ( sum * ((double) (haxe.lang.Runtime.toDouble(rdiag.__get(i))) ) )))) );
			}
			
		}
		
		{
			int _g4 = 0;
			int _g5 = N;
			while (( _g4 < _g5 ))
			{
				int _i = _g4++;
				int i1 = ( ( N - _i ) - 1 );
				double sum1 = ((double) (0) );
				{
					int _g6 = ( i1 + 1 );
					int _g7 = N;
					while (( _g6 < _g7 ))
					{
						int k1 = _g6++;
						sum1 += ( ((double) (haxe.lang.Runtime.toDouble(A.__get(k1).__get(i1))) ) * ((double) (haxe.lang.Runtime.toDouble(x.__get(k1))) ) );
					}
					
				}
				
				double __temp_expr2 = ((double) (haxe.lang.Runtime.toDouble(x.__set(i1, ( ((double) (haxe.lang.Runtime.toDouble(x.__get(i1))) ) - ( sum1 * ((double) (haxe.lang.Runtime.toDouble(rdiag.__get(i1))) ) ) )))) );
			}
			
		}
		
	}
	
	
	public static double[] largestEig2x2(double m1, double m12, double m2)
	{
		double l1 = ( 0.5 * (( m1 + m2 )) );
		if (( l1 > 0.0 )) 
		{
			double x = ( m2 - m1 );
			l1 += java.lang.Math.sqrt(( ( m12 * m12 ) + ( 0.25 * (( x * x )) ) ));
		}
		else
		{
			double x1 = ( m2 - m1 );
			l1 -= java.lang.Math.sqrt(( ( m12 * m12 ) + ( 0.25 * (( x1 * x1 )) ) ));
		}
		
		double[] this1 = new double[3];
		double[] this2 = ((double[]) (this1) );
		((double[]) (this2) )[0] = ( m2 - l1 );
		((double[]) (this2) )[1] =  - (m12) ;
		((double[]) (this2) )[2] = ((double) (0) );
		double[] e1 = ((double[]) (this2) );
		{
			double l = java.lang.Math.sqrt(( ( ( ((double[]) (e1) )[0] * ((double[]) (e1) )[0] ) + ( ((double[]) (e1) )[1] * ((double[]) (e1) )[1] ) ) + ( ((double[]) (e1) )[2] * ((double[]) (e1) )[2] ) ));
			if (( l > 0 )) 
			{
				l = ( 1 / l );
				((double[]) (e1) )[0] *= l;
				((double[]) (e1) )[1] *= l;
				((double[]) (e1) )[2] *= l;
			}
			else
			{
				((double[]) (e1) )[0] = ((double) (0) );
				((double[]) (e1) )[1] = ((double) (0) );
				((double[]) (e1) )[2] = ((double) (1) );
			}
			
		}
		
		((double[]) (e1) )[2] = l1;
		return e1;
	}
	
	
	public static haxe.root.Array<java.lang.Object> matIden()
	{
		return new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (1) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (1) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (1) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (1) )});
	}
	
	
	public static haxe.root.Array<java.lang.Object> matRotx(double a)
	{
		return new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (1) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (java.lang.Math.cos(a)) ), ((java.lang.Object) ( - (java.lang.Math.sin(a)) ) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (java.lang.Math.sin(a)) ), ((java.lang.Object) (java.lang.Math.cos(a)) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (1) )});
	}
	
	
	public static haxe.root.Array<java.lang.Object> matRoty(double a)
	{
		return new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (java.lang.Math.cos(a)) ), ((java.lang.Object) (0) ), ((java.lang.Object) (java.lang.Math.sin(a)) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (1) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) ( - (java.lang.Math.sin(a)) ) ), ((java.lang.Object) (0) ), ((java.lang.Object) (java.lang.Math.cos(a)) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (1) )});
	}
	
	
	public static haxe.root.Array<java.lang.Object> matRotz(double a)
	{
		return new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (java.lang.Math.cos(a)) ), ((java.lang.Object) ( - (java.lang.Math.sin(a)) ) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (java.lang.Math.sin(a)) ), ((java.lang.Object) (java.lang.Math.cos(a)) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (1) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (1) )});
	}
	
	
	public static haxe.root.Array<java.lang.Object> matTrsl(double x, double y, double z)
	{
		return new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (1) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (x) ), ((java.lang.Object) (0) ), ((java.lang.Object) (1) ), ((java.lang.Object) (0) ), ((java.lang.Object) (y) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (1) ), ((java.lang.Object) (z) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (1) )});
	}
	
	
	public static haxe.root.Array<java.lang.Object> matScal(double x, double y, double z)
	{
		return new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (x) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (y) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (z) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (1) )});
	}
	
	
	public static haxe.root.Array<java.lang.Object> matMult(haxe.root.Array<java.lang.Object> A, haxe.root.Array<java.lang.Object> B)
	{
		return new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (( ( ( ( ((double) (haxe.lang.Runtime.toDouble(A.__get(0))) ) * ((double) (haxe.lang.Runtime.toDouble(B.__get(0))) ) ) + ( ((double) (haxe.lang.Runtime.toDouble(A.__get(1))) ) * ((double) (haxe.lang.Runtime.toDouble(B.__get(4))) ) ) ) + ( ((double) (haxe.lang.Runtime.toDouble(A.__get(2))) ) * ((double) (haxe.lang.Runtime.toDouble(B.__get(8))) ) ) ) + ( ((double) (haxe.lang.Runtime.toDouble(A.__get(3))) ) * ((double) (haxe.lang.Runtime.toDouble(B.__get(12))) ) ) )) ), ((java.lang.Object) (( ( ( ( ((double) (haxe.lang.Runtime.toDouble(A.__get(0))) ) * ((double) (haxe.lang.Runtime.toDouble(B.__get(1))) ) ) + ( ((double) (haxe.lang.Runtime.toDouble(A.__get(1))) ) * ((double) (haxe.lang.Runtime.toDouble(B.__get(5))) ) ) ) + ( ((double) (haxe.lang.Runtime.toDouble(A.__get(2))) ) * ((double) (haxe.lang.Runtime.toDouble(B.__get(9))) ) ) ) + ( ((double) (haxe.lang.Runtime.toDouble(A.__get(3))) ) * ((double) (haxe.lang.Runtime.toDouble(B.__get(13))) ) ) )) ), ((java.lang.Object) (( ( ( ( ((double) (haxe.lang.Runtime.toDouble(A.__get(0))) ) * ((double) (haxe.lang.Runtime.toDouble(B.__get(2))) ) ) + ( ((double) (haxe.lang.Runtime.toDouble(A.__get(1))) ) * ((double) (haxe.lang.Runtime.toDouble(B.__get(6))) ) ) ) + ( ((double) (haxe.lang.Runtime.toDouble(A.__get(2))) ) * ((double) (haxe.lang.Runtime.toDouble(B.__get(10))) ) ) ) + ( ((double) (haxe.lang.Runtime.toDouble(A.__get(3))) ) * ((double) (haxe.lang.Runtime.toDouble(B.__get(14))) ) ) )) ), ((java.lang.Object) (( ( ( ( ((double) (haxe.lang.Runtime.toDouble(A.__get(0))) ) * ((double) (haxe.lang.Runtime.toDouble(B.__get(3))) ) ) + ( ((double) (haxe.lang.Runtime.toDouble(A.__get(1))) ) * ((double) (haxe.lang.Runtime.toDouble(B.__get(7))) ) ) ) + ( ((double) (haxe.lang.Runtime.toDouble(A.__get(2))) ) * ((double) (haxe.lang.Runtime.toDouble(B.__get(11))) ) ) ) + ( ((double) (haxe.lang.Runtime.toDouble(A.__get(3))) ) * ((double) (haxe.lang.Runtime.toDouble(B.__get(15))) ) ) )) ), ((java.lang.Object) (( ( ( ( ((double) (haxe.lang.Runtime.toDouble(A.__get(4))) ) * ((double) (haxe.lang.Runtime.toDouble(B.__get(0))) ) ) + ( ((double) (haxe.lang.Runtime.toDouble(A.__get(5))) ) * ((double) (haxe.lang.Runtime.toDouble(B.__get(4))) ) ) ) + ( ((double) (haxe.lang.Runtime.toDouble(A.__get(6))) ) * ((double) (haxe.lang.Runtime.toDouble(B.__get(8))) ) ) ) + ( ((double) (haxe.lang.Runtime.toDouble(A.__get(7))) ) * ((double) (haxe.lang.Runtime.toDouble(B.__get(12))) ) ) )) ), ((java.lang.Object) (( ( ( ( ((double) (haxe.lang.Runtime.toDouble(A.__get(4))) ) * ((double) (haxe.lang.Runtime.toDouble(B.__get(1))) ) ) + ( ((double) (haxe.lang.Runtime.toDouble(A.__get(5))) ) * ((double) (haxe.lang.Runtime.toDouble(B.__get(5))) ) ) ) + ( ((double) (haxe.lang.Runtime.toDouble(A.__get(6))) ) * ((double) (haxe.lang.Runtime.toDouble(B.__get(9))) ) ) ) + ( ((double) (haxe.lang.Runtime.toDouble(A.__get(7))) ) * ((double) (haxe.lang.Runtime.toDouble(B.__get(13))) ) ) )) ), ((java.lang.Object) (( ( ( ( ((double) (haxe.lang.Runtime.toDouble(A.__get(4))) ) * ((double) (haxe.lang.Runtime.toDouble(B.__get(2))) ) ) + ( ((double) (haxe.lang.Runtime.toDouble(A.__get(5))) ) * ((double) (haxe.lang.Runtime.toDouble(B.__get(6))) ) ) ) + ( ((double) (haxe.lang.Runtime.toDouble(A.__get(6))) ) * ((double) (haxe.lang.Runtime.toDouble(B.__get(10))) ) ) ) + ( ((double) (haxe.lang.Runtime.toDouble(A.__get(7))) ) * ((double) (haxe.lang.Runtime.toDouble(B.__get(14))) ) ) )) ), ((java.lang.Object) (( ( ( ( ((double) (haxe.lang.Runtime.toDouble(A.__get(4))) ) * ((double) (haxe.lang.Runtime.toDouble(B.__get(3))) ) ) + ( ((double) (haxe.lang.Runtime.toDouble(A.__get(5))) ) * ((double) (haxe.lang.Runtime.toDouble(B.__get(7))) ) ) ) + ( ((double) (haxe.lang.Runtime.toDouble(A.__get(6))) ) * ((double) (haxe.lang.Runtime.toDouble(B.__get(11))) ) ) ) + ( ((double) (haxe.lang.Runtime.toDouble(A.__get(7))) ) * ((double) (haxe.lang.Runtime.toDouble(B.__get(15))) ) ) )) ), ((java.lang.Object) (( ( ( ( ((double) (haxe.lang.Runtime.toDouble(A.__get(8))) ) * ((double) (haxe.lang.Runtime.toDouble(B.__get(0))) ) ) + ( ((double) (haxe.lang.Runtime.toDouble(A.__get(9))) ) * ((double) (haxe.lang.Runtime.toDouble(B.__get(4))) ) ) ) + ( ((double) (haxe.lang.Runtime.toDouble(A.__get(10))) ) * ((double) (haxe.lang.Runtime.toDouble(B.__get(8))) ) ) ) + ( ((double) (haxe.lang.Runtime.toDouble(A.__get(11))) ) * ((double) (haxe.lang.Runtime.toDouble(B.__get(12))) ) ) )) ), ((java.lang.Object) (( ( ( ( ((double) (haxe.lang.Runtime.toDouble(A.__get(8))) ) * ((double) (haxe.lang.Runtime.toDouble(B.__get(1))) ) ) + ( ((double) (haxe.lang.Runtime.toDouble(A.__get(9))) ) * ((double) (haxe.lang.Runtime.toDouble(B.__get(5))) ) ) ) + ( ((double) (haxe.lang.Runtime.toDouble(A.__get(10))) ) * ((double) (haxe.lang.Runtime.toDouble(B.__get(9))) ) ) ) + ( ((double) (haxe.lang.Runtime.toDouble(A.__get(11))) ) * ((double) (haxe.lang.Runtime.toDouble(B.__get(13))) ) ) )) ), ((java.lang.Object) (( ( ( ( ((double) (haxe.lang.Runtime.toDouble(A.__get(8))) ) * ((double) (haxe.lang.Runtime.toDouble(B.__get(2))) ) ) + ( ((double) (haxe.lang.Runtime.toDouble(A.__get(9))) ) * ((double) (haxe.lang.Runtime.toDouble(B.__get(6))) ) ) ) + ( ((double) (haxe.lang.Runtime.toDouble(A.__get(10))) ) * ((double) (haxe.lang.Runtime.toDouble(B.__get(10))) ) ) ) + ( ((double) (haxe.lang.Runtime.toDouble(A.__get(11))) ) * ((double) (haxe.lang.Runtime.toDouble(B.__get(14))) ) ) )) ), ((java.lang.Object) (( ( ( ( ((double) (haxe.lang.Runtime.toDouble(A.__get(8))) ) * ((double) (haxe.lang.Runtime.toDouble(B.__get(3))) ) ) + ( ((double) (haxe.lang.Runtime.toDouble(A.__get(9))) ) * ((double) (haxe.lang.Runtime.toDouble(B.__get(7))) ) ) ) + ( ((double) (haxe.lang.Runtime.toDouble(A.__get(10))) ) * ((double) (haxe.lang.Runtime.toDouble(B.__get(11))) ) ) ) + ( ((double) (haxe.lang.Runtime.toDouble(A.__get(11))) ) * ((double) (haxe.lang.Runtime.toDouble(B.__get(15))) ) ) )) ), ((java.lang.Object) (( ( ( ( ((double) (haxe.lang.Runtime.toDouble(A.__get(12))) ) * ((double) (haxe.lang.Runtime.toDouble(B.__get(0))) ) ) + ( ((double) (haxe.lang.Runtime.toDouble(A.__get(13))) ) * ((double) (haxe.lang.Runtime.toDouble(B.__get(4))) ) ) ) + ( ((double) (haxe.lang.Runtime.toDouble(A.__get(14))) ) * ((double) (haxe.lang.Runtime.toDouble(B.__get(8))) ) ) ) + ( ((double) (haxe.lang.Runtime.toDouble(A.__get(15))) ) * ((double) (haxe.lang.Runtime.toDouble(B.__get(12))) ) ) )) ), ((java.lang.Object) (( ( ( ( ((double) (haxe.lang.Runtime.toDouble(A.__get(12))) ) * ((double) (haxe.lang.Runtime.toDouble(B.__get(1))) ) ) + ( ((double) (haxe.lang.Runtime.toDouble(A.__get(13))) ) * ((double) (haxe.lang.Runtime.toDouble(B.__get(5))) ) ) ) + ( ((double) (haxe.lang.Runtime.toDouble(A.__get(14))) ) * ((double) (haxe.lang.Runtime.toDouble(B.__get(9))) ) ) ) + ( ((double) (haxe.lang.Runtime.toDouble(A.__get(15))) ) * ((double) (haxe.lang.Runtime.toDouble(B.__get(13))) ) ) )) ), ((java.lang.Object) (( ( ( ( ((double) (haxe.lang.Runtime.toDouble(A.__get(12))) ) * ((double) (haxe.lang.Runtime.toDouble(B.__get(2))) ) ) + ( ((double) (haxe.lang.Runtime.toDouble(A.__get(13))) ) * ((double) (haxe.lang.Runtime.toDouble(B.__get(6))) ) ) ) + ( ((double) (haxe.lang.Runtime.toDouble(A.__get(14))) ) * ((double) (haxe.lang.Runtime.toDouble(B.__get(10))) ) ) ) + ( ((double) (haxe.lang.Runtime.toDouble(A.__get(15))) ) * ((double) (haxe.lang.Runtime.toDouble(B.__get(14))) ) ) )) ), ((java.lang.Object) (( ( ( ( ((double) (haxe.lang.Runtime.toDouble(A.__get(12))) ) * ((double) (haxe.lang.Runtime.toDouble(B.__get(3))) ) ) + ( ((double) (haxe.lang.Runtime.toDouble(A.__get(13))) ) * ((double) (haxe.lang.Runtime.toDouble(B.__get(7))) ) ) ) + ( ((double) (haxe.lang.Runtime.toDouble(A.__get(14))) ) * ((double) (haxe.lang.Runtime.toDouble(B.__get(11))) ) ) ) + ( ((double) (haxe.lang.Runtime.toDouble(A.__get(15))) ) * ((double) (haxe.lang.Runtime.toDouble(B.__get(15))) ) ) )) )});
	}
	
	
	public static double[] matTrfm(haxe.root.Array<java.lang.Object> A, double[] v)
	{
		double[] this1 = new double[3];
		double[] this2 = ((double[]) (this1) );
		((double[]) (this2) )[0] = ( (( ( ( ( ((double) (haxe.lang.Runtime.toDouble(A.__get(0))) ) * ((double[]) (v) )[0] ) + ( ((double) (haxe.lang.Runtime.toDouble(A.__get(1))) ) * ((double[]) (v) )[1] ) ) + ( ((double) (haxe.lang.Runtime.toDouble(A.__get(2))) ) * ((double[]) (v) )[2] ) ) + ((double) (haxe.lang.Runtime.toDouble(A.__get(3))) ) )) / (( ( ( ( ((double) (haxe.lang.Runtime.toDouble(A.__get(12))) ) * ((double[]) (v) )[0] ) + ( ((double) (haxe.lang.Runtime.toDouble(A.__get(13))) ) * ((double[]) (v) )[1] ) ) + ( ((double) (haxe.lang.Runtime.toDouble(A.__get(14))) ) * ((double[]) (v) )[2] ) ) + ((double) (haxe.lang.Runtime.toDouble(A.__get(15))) ) )) );
		((double[]) (this2) )[1] = ( (( ( ( ( ((double) (haxe.lang.Runtime.toDouble(A.__get(4))) ) * ((double[]) (v) )[0] ) + ( ((double) (haxe.lang.Runtime.toDouble(A.__get(5))) ) * ((double[]) (v) )[1] ) ) + ( ((double) (haxe.lang.Runtime.toDouble(A.__get(6))) ) * ((double[]) (v) )[2] ) ) + ((double) (haxe.lang.Runtime.toDouble(A.__get(7))) ) )) / (( ( ( ( ((double) (haxe.lang.Runtime.toDouble(A.__get(12))) ) * ((double[]) (v) )[0] ) + ( ((double) (haxe.lang.Runtime.toDouble(A.__get(13))) ) * ((double[]) (v) )[1] ) ) + ( ((double) (haxe.lang.Runtime.toDouble(A.__get(14))) ) * ((double[]) (v) )[2] ) ) + ((double) (haxe.lang.Runtime.toDouble(A.__get(15))) ) )) );
		((double[]) (this2) )[2] = ( (( ( ( ( ((double) (haxe.lang.Runtime.toDouble(A.__get(8))) ) * ((double[]) (v) )[0] ) + ( ((double) (haxe.lang.Runtime.toDouble(A.__get(9))) ) * ((double[]) (v) )[1] ) ) + ( ((double) (haxe.lang.Runtime.toDouble(A.__get(10))) ) * ((double[]) (v) )[2] ) ) + ((double) (haxe.lang.Runtime.toDouble(A.__get(11))) ) )) / (( ( ( ( ((double) (haxe.lang.Runtime.toDouble(A.__get(12))) ) * ((double[]) (v) )[0] ) + ( ((double) (haxe.lang.Runtime.toDouble(A.__get(13))) ) * ((double[]) (v) )[1] ) ) + ( ((double) (haxe.lang.Runtime.toDouble(A.__get(14))) ) * ((double[]) (v) )[2] ) ) + ((double) (haxe.lang.Runtime.toDouble(A.__get(15))) ) )) );
		return ((double[]) (this2) );
	}
	
	
	public static double[] matProj(double f, double[] v)
	{
		double[] this1 = new double[3];
		double[] this2 = ((double[]) (this1) );
		((double[]) (this2) )[0] = ( ( f * ((double[]) (v) )[0] ) / ((double[]) (v) )[2] );
		((double[]) (this2) )[1] = ( ( f * ((double[]) (v) )[1] ) / ((double[]) (v) )[2] );
		((double[]) (this2) )[2] = ((double) (0) );
		return ((double[]) (this2) );
	}
	
	
	public static double[] uniformHemisphereSampler()
	{
		double Xi1 = java.lang.Math.random();
		double Xi2 = java.lang.Math.random();
		double theta = java.lang.Math.acos(Xi1);
		double phi = ( ( 2 * java.lang.Math.PI ) * Xi2 );
		double xs = ( java.lang.Math.sin(theta) * java.lang.Math.cos(phi) );
		double ys = ( java.lang.Math.sin(theta) * java.lang.Math.sin(phi) );
		double zs = java.lang.Math.cos(theta);
		double[] this1 = new double[3];
		double[] this2 = ((double[]) (this1) );
		((double[]) (this2) )[0] = xs;
		((double[]) (this2) )[1] = ys;
		((double[]) (this2) )[2] = zs;
		double[] v = ((double[]) (this2) );
		return v;
	}
	
	
	public static void writeFile(java.lang.String filename, java.lang.String content)
	{
		sys.io.File.saveContent(filename, content);
	}
	
	
}


