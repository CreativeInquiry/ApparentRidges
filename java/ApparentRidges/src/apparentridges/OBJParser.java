// Generated by Haxe 4.1.3
package apparentridges;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class OBJParser extends haxe.lang.HxObject
{
	public OBJParser(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public OBJParser()
	{
		apparentridges.OBJParser.__hx_ctor_apparentridges_OBJParser(this);
	}
	
	
	protected static void __hx_ctor_apparentridges_OBJParser(apparentridges.OBJParser __hx_this)
	{
	}
	
	
	public static apparentridges.Mesh fromFile(java.lang.String path)
	{
		return apparentridges.OBJParser.fromString(sys.io.File.getContent(path));
	}
	
	
	public static apparentridges.Mesh fromString(java.lang.String str)
	{
		apparentridges.Mesh mesh = new apparentridges.Mesh();
		mesh.vertices = new haxe.root.Array<double[]>(new double[][]{});
		mesh.faces = new haxe.root.Array<int[]>(new int[][]{});
		haxe.root.Array<java.lang.String> lines = haxe.lang.StringExt.split(str, "\n");
		{
			int _g = 0;
			int _g1 = lines.length;
			while (( _g < _g1 ))
			{
				int i = _g++;
				lines.__set(i, ((java.lang.String) (((java.lang.Object) (lines.__get(i)) )) ).trim());
				if (haxe.lang.Runtime.valEq(haxe.lang.StringExt.charAt(lines.__get(i), 0), "#")) 
				{
					continue;
				}
				
				if (( lines.__get(i).length() <= 2 )) 
				{
					continue;
				}
				
				haxe.root.Array<java.lang.String> tok = haxe.lang.StringExt.split(lines.__get(i), " ");
				java.lang.String cmd = tok.__get(0);
				if (haxe.lang.Runtime.valEq(cmd, "v")) 
				{
					double _x = haxe.root.Std.parseFloat(tok.__get(1));
					double _y = haxe.root.Std.parseFloat(tok.__get(2));
					double _z = haxe.root.Std.parseFloat(tok.__get(3));
					double[] this1 = new double[3];
					double[] this2 = ((double[]) (this1) );
					((double[]) (this2) )[0] = _x;
					((double[]) (this2) )[1] = _y;
					((double[]) (this2) )[2] = _z;
					double[] v = ((double[]) (this2) );
					mesh.vertices.push(v);
				}
				else
				{
					if (haxe.lang.Runtime.valEq(cmd, "f")) 
					{
						int a = ((int) (haxe.lang.Runtime.toInt(haxe.root.Std.parseInt(haxe.lang.StringExt.split(tok.__get(1), "/").__get(0)))) );
						int b = ((int) (haxe.lang.Runtime.toInt(haxe.root.Std.parseInt(haxe.lang.StringExt.split(tok.__get(2), "/").__get(0)))) );
						int c = ((int) (haxe.lang.Runtime.toInt(haxe.root.Std.parseInt(haxe.lang.StringExt.split(tok.__get(3), "/").__get(0)))) );
						int nv = mesh.vertices.length;
						haxe.root.Array<int[]> mesh1 = mesh.faces;
						int[] this3 = new int[3];
						int[] this4 = ((int[]) (this3) );
						((int[]) (this4) )[0] = ( (( a < 0 )) ? (( nv + a )) : (( a - 1 )) );
						((int[]) (this4) )[1] = ( (( b < 0 )) ? (( nv + b )) : (( b - 1 )) );
						((int[]) (this4) )[2] = ( (( c < 0 )) ? (( nv + c )) : (( c - 1 )) );
						mesh1.push(((int[]) (this4) ));
					}
					
				}
				
			}
			
		}
		
		return mesh;
	}
	
	
}


