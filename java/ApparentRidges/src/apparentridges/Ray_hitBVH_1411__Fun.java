// Generated by Haxe 4.1.3
package apparentridges;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class Ray_hitBVH_1411__Fun extends haxe.lang.Function
{
	public Ray_hitBVH_1411__Fun(haxe.lang.Function[] hitNode, apparentridges.BVHTree bvh, apparentridges.Ray _gthis)
	{
		super(1, 0);
		this.hitNode = hitNode;
		this.bvh = bvh;
		this._gthis = _gthis;
	}
	
	
	@Override public java.lang.Object __hx_invoke1_o(double __fn_float1, java.lang.Object __fn_dyn1)
	{
		apparentridges.BVHNode node = ( (( __fn_dyn1 == haxe.lang.Runtime.undefined )) ? (((apparentridges.BVHNode) (((java.lang.Object) (__fn_float1) )) )) : (((apparentridges.BVHNode) (__fn_dyn1) )) );
		if (( ( node.left == null ) && ( node.right == null ) )) 
		{
			double tmin = java.lang.Double.POSITIVE_INFINITY;
			apparentridges.RayHit closest = null;
			{
				int _g = node.begin;
				int _g1 = node.end;
				while (( _g < _g1 ))
				{
					int i = _g++;
					double[] p0 = this.bvh.mesh.vertices.__get(((int[]) (this.bvh.faces.__get(i)) )[0]);
					double[] p1 = this.bvh.mesh.vertices.__get(((int[]) (this.bvh.faces.__get(i)) )[1]);
					double[] p2 = this.bvh.mesh.vertices.__get(((int[]) (this.bvh.faces.__get(i)) )[2]);
					double[] this1 = new double[3];
					double[] this2 = ((double[]) (this1) );
					((double[]) (this2) )[0] = ( ((double[]) (p1) )[0] - ((double[]) (p0) )[0] );
					((double[]) (this2) )[1] = ( ((double[]) (p1) )[1] - ((double[]) (p0) )[1] );
					((double[]) (this2) )[2] = ( ((double[]) (p1) )[2] - ((double[]) (p0) )[2] );
					double[] e1 = ((double[]) (this2) );
					double[] this3 = new double[3];
					double[] this4 = ((double[]) (this3) );
					((double[]) (this4) )[0] = ( ((double[]) (p2) )[0] - ((double[]) (p0) )[0] );
					((double[]) (this4) )[1] = ( ((double[]) (p2) )[1] - ((double[]) (p0) )[1] );
					((double[]) (this4) )[2] = ( ((double[]) (p2) )[2] - ((double[]) (p0) )[2] );
					double[] e2 = ((double[]) (this4) );
					double[] this5 = this._gthis.o;
					double[] this6 = new double[3];
					double[] this7 = ((double[]) (this6) );
					((double[]) (this7) )[0] = ( ((double[]) (this5) )[0] - ((double[]) (p0) )[0] );
					((double[]) (this7) )[1] = ( ((double[]) (this5) )[1] - ((double[]) (p0) )[1] );
					((double[]) (this7) )[2] = ( ((double[]) (this5) )[2] - ((double[]) (p0) )[2] );
					double[] s = ((double[]) (this7) );
					double[] this8 = this._gthis.d;
					double[] this9 = new double[3];
					double[] this10 = ((double[]) (this9) );
					((double[]) (this10) )[0] = ( ((double[]) (this8) )[0] * -1.0 );
					((double[]) (this10) )[1] = ( ((double[]) (this8) )[1] * -1.0 );
					((double[]) (this10) )[2] = ( ((double[]) (this8) )[2] * -1.0 );
					double[] _d = ((double[]) (this10) );
					double[] this11 = new double[3];
					double[] this12 = ((double[]) (this11) );
					((double[]) (this12) )[0] = ( ( ((double[]) (e1) )[1] * ((double[]) (e2) )[2] ) - ( ((double[]) (e1) )[2] * ((double[]) (e2) )[1] ) );
					((double[]) (this12) )[1] = ( ( ((double[]) (e1) )[2] * ((double[]) (e2) )[0] ) - ( ((double[]) (e1) )[0] * ((double[]) (e2) )[2] ) );
					((double[]) (this12) )[2] = ( ( ((double[]) (e1) )[0] * ((double[]) (e2) )[1] ) - ( ((double[]) (e1) )[1] * ((double[]) (e2) )[0] ) );
					double[] v1 = ((double[]) (this12) );
					double denom = ( ( ( ((double[]) (v1) )[0] * ((double[]) (_d) )[0] ) + ( ((double[]) (v1) )[1] * ((double[]) (_d) )[1] ) ) + ( ((double[]) (v1) )[2] * ((double[]) (_d) )[2] ) );
					apparentridges.RayHit h = null;
					if (( denom == 0 )) 
					{
						h = null;
					}
					else
					{
						double[] this13 = new double[3];
						double[] this14 = ((double[]) (this13) );
						((double[]) (this14) )[0] = ( ( ((double[]) (s) )[1] * ((double[]) (e2) )[2] ) - ( ((double[]) (s) )[2] * ((double[]) (e2) )[1] ) );
						((double[]) (this14) )[1] = ( ( ((double[]) (s) )[2] * ((double[]) (e2) )[0] ) - ( ((double[]) (s) )[0] * ((double[]) (e2) )[2] ) );
						((double[]) (this14) )[2] = ( ( ((double[]) (s) )[0] * ((double[]) (e2) )[1] ) - ( ((double[]) (s) )[1] * ((double[]) (e2) )[0] ) );
						double[] v11 = ((double[]) (this14) );
						double _x = ( ( ( ((double[]) (v11) )[0] * ((double[]) (_d) )[0] ) + ( ((double[]) (v11) )[1] * ((double[]) (_d) )[1] ) ) + ( ((double[]) (v11) )[2] * ((double[]) (_d) )[2] ) );
						double[] this15 = new double[3];
						double[] this16 = ((double[]) (this15) );
						((double[]) (this16) )[0] = ( ( ((double[]) (e1) )[1] * ((double[]) (s) )[2] ) - ( ((double[]) (e1) )[2] * ((double[]) (s) )[1] ) );
						((double[]) (this16) )[1] = ( ( ((double[]) (e1) )[2] * ((double[]) (s) )[0] ) - ( ((double[]) (e1) )[0] * ((double[]) (s) )[2] ) );
						((double[]) (this16) )[2] = ( ( ((double[]) (e1) )[0] * ((double[]) (s) )[1] ) - ( ((double[]) (e1) )[1] * ((double[]) (s) )[0] ) );
						double[] v12 = ((double[]) (this16) );
						double _y = ( ( ( ((double[]) (v12) )[0] * ((double[]) (_d) )[0] ) + ( ((double[]) (v12) )[1] * ((double[]) (_d) )[1] ) ) + ( ((double[]) (v12) )[2] * ((double[]) (_d) )[2] ) );
						double[] this17 = new double[3];
						double[] this18 = ((double[]) (this17) );
						((double[]) (this18) )[0] = ( ( ((double[]) (e1) )[1] * ((double[]) (e2) )[2] ) - ( ((double[]) (e1) )[2] * ((double[]) (e2) )[1] ) );
						((double[]) (this18) )[1] = ( ( ((double[]) (e1) )[2] * ((double[]) (e2) )[0] ) - ( ((double[]) (e1) )[0] * ((double[]) (e2) )[2] ) );
						((double[]) (this18) )[2] = ( ( ((double[]) (e1) )[0] * ((double[]) (e2) )[1] ) - ( ((double[]) (e1) )[1] * ((double[]) (e2) )[0] ) );
						double[] v13 = ((double[]) (this18) );
						double _z = ( ( ( ((double[]) (v13) )[0] * ((double[]) (s) )[0] ) + ( ((double[]) (v13) )[1] * ((double[]) (s) )[1] ) ) + ( ((double[]) (v13) )[2] * ((double[]) (s) )[2] ) );
						double[] this19 = new double[3];
						double[] this20 = ((double[]) (this19) );
						((double[]) (this20) )[0] = _x;
						((double[]) (this20) )[1] = _y;
						((double[]) (this20) )[2] = _z;
						double[] this21 = ((double[]) (this20) );
						double rhs = ( 1 / denom );
						double[] this22 = new double[3];
						double[] this23 = ((double[]) (this22) );
						((double[]) (this23) )[0] = ( ((double[]) (this21) )[0] * rhs );
						((double[]) (this23) )[1] = ( ((double[]) (this21) )[1] * rhs );
						((double[]) (this23) )[2] = ( ((double[]) (this21) )[2] * rhs );
						double[] uvt = ((double[]) (this23) );
						double u = ((double[]) (uvt) )[0];
						double v = ((double[]) (uvt) )[1];
						double t = ((double[]) (uvt) )[2];
						if (( ( ( ( ( u < 0 ) || ( v < 0 ) ) || ( ( ( 1 - u ) - v ) < 0 ) ) || ( t < this._gthis.tmin ) ) || ( t > this._gthis.tmax ) )) 
						{
							h = null;
						}
						else
						{
							apparentridges.RayHit h1 = new apparentridges.RayHit(((double) (t) ));
							h1.u = u;
							h1.v = v;
							h = h1;
						}
						
					}
					
					if (( h != null )) 
					{
						h.face = this.bvh.faces.__get(i);
						if (( tmin > h.t )) 
						{
							tmin = h.t;
							closest = h;
						}
						
					}
					
				}
				
			}
			
			return closest;
		}
		
		apparentridges.BBox bb = node.left.bbox;
		double tx1 = ( (( ((double[]) (bb.min) )[0] - ((double[]) (this._gthis.o) )[0] )) / ((double[]) (this._gthis.d) )[0] );
		double tx2 = ( (( ((double[]) (bb.max) )[0] - ((double[]) (this._gthis.o) )[0] )) / ((double[]) (this._gthis.d) )[0] );
		double ty1 = ( (( ((double[]) (bb.min) )[1] - ((double[]) (this._gthis.o) )[1] )) / ((double[]) (this._gthis.d) )[1] );
		double ty2 = ( (( ((double[]) (bb.max) )[1] - ((double[]) (this._gthis.o) )[1] )) / ((double[]) (this._gthis.d) )[1] );
		double tz1 = ( (( ((double[]) (bb.min) )[2] - ((double[]) (this._gthis.o) )[2] )) / ((double[]) (this._gthis.d) )[2] );
		double tz2 = ( (( ((double[]) (bb.max) )[2] - ((double[]) (this._gthis.o) )[2] )) / ((double[]) (this._gthis.d) )[2] );
		double t1 = java.lang.Math.max(java.lang.Math.max(java.lang.Math.min(tx1, tx2), java.lang.Math.min(ty1, ty2)), java.lang.Math.min(tz1, tz2));
		double t2 = java.lang.Math.min(java.lang.Math.min(java.lang.Math.max(tx1, tx2), java.lang.Math.max(ty1, ty2)), java.lang.Math.max(tz1, tz2));
		apparentridges.RayHit hitL = null;
		if (( ( t2 - t1 ) < 0 )) 
		{
			hitL = null;
		}
		else
		{
			if (( ( t1 > this._gthis.tmax ) || ( t2 < this._gthis.tmin ) )) 
			{
				hitL = null;
			}
			else
			{
				apparentridges.RayHit h2 = new apparentridges.RayHit(((double) (t1) ));
				h2.t2 = t2;
				hitL = h2;
			}
			
		}
		
		apparentridges.BBox bb1 = node.right.bbox;
		double tx11 = ( (( ((double[]) (bb1.min) )[0] - ((double[]) (this._gthis.o) )[0] )) / ((double[]) (this._gthis.d) )[0] );
		double tx21 = ( (( ((double[]) (bb1.max) )[0] - ((double[]) (this._gthis.o) )[0] )) / ((double[]) (this._gthis.d) )[0] );
		double ty11 = ( (( ((double[]) (bb1.min) )[1] - ((double[]) (this._gthis.o) )[1] )) / ((double[]) (this._gthis.d) )[1] );
		double ty21 = ( (( ((double[]) (bb1.max) )[1] - ((double[]) (this._gthis.o) )[1] )) / ((double[]) (this._gthis.d) )[1] );
		double tz11 = ( (( ((double[]) (bb1.min) )[2] - ((double[]) (this._gthis.o) )[2] )) / ((double[]) (this._gthis.d) )[2] );
		double tz21 = ( (( ((double[]) (bb1.max) )[2] - ((double[]) (this._gthis.o) )[2] )) / ((double[]) (this._gthis.d) )[2] );
		double t11 = java.lang.Math.max(java.lang.Math.max(java.lang.Math.min(tx11, tx21), java.lang.Math.min(ty11, ty21)), java.lang.Math.min(tz11, tz21));
		double t21 = java.lang.Math.min(java.lang.Math.min(java.lang.Math.max(tx11, tx21), java.lang.Math.max(ty11, ty21)), java.lang.Math.max(tz11, tz21));
		apparentridges.RayHit hitR = null;
		if (( ( t21 - t11 ) < 0 )) 
		{
			hitR = null;
		}
		else
		{
			if (( ( t11 > this._gthis.tmax ) || ( t21 < this._gthis.tmin ) )) 
			{
				hitR = null;
			}
			else
			{
				apparentridges.RayHit h3 = new apparentridges.RayHit(((double) (t11) ));
				h3.t2 = t21;
				hitR = h3;
			}
			
		}
		
		if (( ( hitL != null ) && ( hitR == null ) )) 
		{
			return ((apparentridges.RayHit) (this.hitNode[0].__hx_invoke1_o(0.0, node.left)) );
		}
		else
		{
			if (( ( hitL == null ) && ( hitR != null ) )) 
			{
				return ((apparentridges.RayHit) (this.hitNode[0].__hx_invoke1_o(0.0, node.right)) );
			}
			else
			{
				if (( ( hitL == null ) && ( hitR == null ) )) 
				{
					return null;
				}
				
			}
			
		}
		
		apparentridges.BVHNode first = null;
		apparentridges.BVHNode second = null;
		if (( hitL.t < hitR.t )) 
		{
			first = node.left;
			second = node.right;
		}
		else
		{
			first = node.right;
			second = node.left;
		}
		
		apparentridges.RayHit h4 = ((apparentridges.RayHit) (this.hitNode[0].__hx_invoke1_o(0.0, first)) );
		if (( ( h4 == null ) || ( h4.t >= java.lang.Math.max(hitL.t, hitR.t) ) )) 
		{
			apparentridges.RayHit h21 = ((apparentridges.RayHit) (this.hitNode[0].__hx_invoke1_o(0.0, second)) );
			if (( h21 != null )) 
			{
				if (( ( h4 == null ) || ( h21.t < h4.t ) )) 
				{
					return h21;
				}
				
			}
			
		}
		
		return h4;
	}
	
	
	public haxe.lang.Function[] hitNode;
	
	public apparentridges.BVHTree bvh;
	
	public apparentridges.Ray _gthis;
	
}


