// Generated by Haxe 4.1.3
package apparentridges;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class Render extends haxe.lang.HxObject
{
	public Render(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public Render(apparentridges.Mesh _mesh, int w, int h)
	{
		apparentridges.Render.__hx_ctor_apparentridges_Render(this, _mesh, w, h);
	}
	
	
	protected static void __hx_ctor_apparentridges_Render(apparentridges.Render __hx_this, apparentridges.Mesh _mesh, int w, int h)
	{
		__hx_this.didPrecompute = false;
		__hx_this.verbose = true;
		__hx_this.focal = 1000.0;
		{
			__hx_this.mesh = _mesh;
			__hx_this.lines = new haxe.root.Array<apparentridges.Line>(new apparentridges.Line[]{});
			__hx_this.width = w;
			__hx_this.height = h;
		}
		
	}
	
	
	public apparentridges.Mesh mesh;
	
	public haxe.root.Array<apparentridges.Line> lines;
	
	public haxe.root.Array<haxe.root.Array<double[]>> polylines;
	
	public double focal;
	
	public int width;
	
	public int height;
	
	public boolean verbose;
	
	public boolean didPrecompute;
	
	public void clear()
	{
		if (( this.lines != null )) 
		{
			this.lines.spliceVoid(0, this.lines.length);
		}
		
		if (( this.polylines != null )) 
		{
			this.polylines.spliceVoid(0, this.polylines.length);
		}
		
	}
	
	
	public void setFocal(double f)
	{
		this.focal = f;
	}
	
	
	public void setVerbose(int v)
	{
		this.verbose = ( v > 0 );
	}
	
	
	public void transform(haxe.root.Array<java.lang.Object> mat4x4)
	{
		int _g = 0;
		int _g1 = this.mesh.vertices.length;
		while (( _g < _g1 ))
		{
			int i = _g++;
			haxe.root.Array<double[]> tmp = this.mesh.vertices;
			double[] v = this.mesh.vertices.__get(i);
			double[] this1 = new double[3];
			double[] this2 = ((double[]) (this1) );
			((double[]) (this2) )[0] = ( (( ( ( ( ((double) (haxe.lang.Runtime.toDouble(mat4x4.__get(0))) ) * ((double[]) (v) )[0] ) + ( ((double) (haxe.lang.Runtime.toDouble(mat4x4.__get(1))) ) * ((double[]) (v) )[1] ) ) + ( ((double) (haxe.lang.Runtime.toDouble(mat4x4.__get(2))) ) * ((double[]) (v) )[2] ) ) + ((double) (haxe.lang.Runtime.toDouble(mat4x4.__get(3))) ) )) / (( ( ( ( ((double) (haxe.lang.Runtime.toDouble(mat4x4.__get(12))) ) * ((double[]) (v) )[0] ) + ( ((double) (haxe.lang.Runtime.toDouble(mat4x4.__get(13))) ) * ((double[]) (v) )[1] ) ) + ( ((double) (haxe.lang.Runtime.toDouble(mat4x4.__get(14))) ) * ((double[]) (v) )[2] ) ) + ((double) (haxe.lang.Runtime.toDouble(mat4x4.__get(15))) ) )) );
			((double[]) (this2) )[1] = ( (( ( ( ( ((double) (haxe.lang.Runtime.toDouble(mat4x4.__get(4))) ) * ((double[]) (v) )[0] ) + ( ((double) (haxe.lang.Runtime.toDouble(mat4x4.__get(5))) ) * ((double[]) (v) )[1] ) ) + ( ((double) (haxe.lang.Runtime.toDouble(mat4x4.__get(6))) ) * ((double[]) (v) )[2] ) ) + ((double) (haxe.lang.Runtime.toDouble(mat4x4.__get(7))) ) )) / (( ( ( ( ((double) (haxe.lang.Runtime.toDouble(mat4x4.__get(12))) ) * ((double[]) (v) )[0] ) + ( ((double) (haxe.lang.Runtime.toDouble(mat4x4.__get(13))) ) * ((double[]) (v) )[1] ) ) + ( ((double) (haxe.lang.Runtime.toDouble(mat4x4.__get(14))) ) * ((double[]) (v) )[2] ) ) + ((double) (haxe.lang.Runtime.toDouble(mat4x4.__get(15))) ) )) );
			((double[]) (this2) )[2] = ( (( ( ( ( ((double) (haxe.lang.Runtime.toDouble(mat4x4.__get(8))) ) * ((double[]) (v) )[0] ) + ( ((double) (haxe.lang.Runtime.toDouble(mat4x4.__get(9))) ) * ((double[]) (v) )[1] ) ) + ( ((double) (haxe.lang.Runtime.toDouble(mat4x4.__get(10))) ) * ((double[]) (v) )[2] ) ) + ((double) (haxe.lang.Runtime.toDouble(mat4x4.__get(11))) ) )) / (( ( ( ( ((double) (haxe.lang.Runtime.toDouble(mat4x4.__get(12))) ) * ((double[]) (v) )[0] ) + ( ((double) (haxe.lang.Runtime.toDouble(mat4x4.__get(13))) ) * ((double[]) (v) )[1] ) ) + ( ((double) (haxe.lang.Runtime.toDouble(mat4x4.__get(14))) ) * ((double[]) (v) )[2] ) ) + ((double) (haxe.lang.Runtime.toDouble(mat4x4.__get(15))) ) )) );
			tmp.__set(i, ((double[]) (this2) ));
		}
		
	}
	
	
	public void scaleRotateTranslate(double sx, double sy, double sz, double rx, double ry, double rz, double dx, double dy, double dz)
	{
		haxe.root.Array<java.lang.Object> scl = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (sx) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (sy) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (sz) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (1) )});
		double rotx_0 = ((double) (1) );
		double rotx_1 = ((double) (0) );
		double rotx_2 = ((double) (0) );
		double rotx_3 = ((double) (0) );
		double rotx_4 = ((double) (0) );
		double rotx_5 = java.lang.Math.cos(rx);
		double rotx_6 =  - (java.lang.Math.sin(rx)) ;
		double rotx_7 = ((double) (0) );
		double rotx_8 = ((double) (0) );
		double rotx_9 = java.lang.Math.sin(rx);
		double rotx_10 = java.lang.Math.cos(rx);
		double rotx_11 = ((double) (0) );
		double rotx_12 = ((double) (0) );
		double rotx_13 = ((double) (0) );
		double rotx_14 = ((double) (0) );
		double rotx_15 = ((double) (1) );
		double roty_0 = java.lang.Math.cos(ry);
		double roty_1 = ((double) (0) );
		double roty_2 = java.lang.Math.sin(ry);
		double roty_3 = ((double) (0) );
		double roty_4 = ((double) (0) );
		double roty_5 = ((double) (1) );
		double roty_6 = ((double) (0) );
		double roty_7 = ((double) (0) );
		double roty_8 =  - (java.lang.Math.sin(ry)) ;
		double roty_9 = ((double) (0) );
		double roty_10 = java.lang.Math.cos(ry);
		double roty_11 = ((double) (0) );
		double roty_12 = ((double) (0) );
		double roty_13 = ((double) (0) );
		double roty_14 = ((double) (0) );
		double roty_15 = ((double) (1) );
		double rotz_0 = java.lang.Math.cos(rz);
		double rotz_1 =  - (java.lang.Math.sin(rz)) ;
		double rotz_2 = ((double) (0) );
		double rotz_3 = ((double) (0) );
		double rotz_4 = java.lang.Math.sin(rz);
		double rotz_5 = java.lang.Math.cos(rz);
		double rotz_6 = ((double) (0) );
		double rotz_7 = ((double) (0) );
		double rotz_8 = ((double) (0) );
		double rotz_9 = ((double) (0) );
		double rotz_10 = ((double) (1) );
		double rotz_11 = ((double) (0) );
		double rotz_12 = ((double) (0) );
		double rotz_13 = ((double) (0) );
		double rotz_14 = ((double) (0) );
		double rotz_15 = ((double) (1) );
		double trsl_0 = ((double) (1) );
		double trsl_1 = ((double) (0) );
		double trsl_2 = ((double) (0) );
		double trsl_3 = dx;
		double trsl_4 = ((double) (0) );
		double trsl_5 = ((double) (1) );
		double trsl_6 = ((double) (0) );
		double trsl_7 = dy;
		double trsl_8 = ((double) (0) );
		double trsl_9 = ((double) (0) );
		double trsl_10 = ((double) (1) );
		double trsl_11 = dz;
		double trsl_12 = ((double) (0) );
		double trsl_13 = ((double) (0) );
		double trsl_14 = ((double) (0) );
		double trsl_15 = ((double) (1) );
		this.transform(scl);
		double B_0 = ( ( ( ( roty_0 * rotx_0 ) + ( roty_1 * rotx_4 ) ) + ( roty_2 * rotx_8 ) ) + ( roty_3 * rotx_12 ) );
		double B_1 = ( ( ( ( roty_0 * rotx_1 ) + ( roty_1 * rotx_5 ) ) + ( roty_2 * rotx_9 ) ) + ( roty_3 * rotx_13 ) );
		double B_2 = ( ( ( ( roty_0 * rotx_2 ) + ( roty_1 * rotx_6 ) ) + ( roty_2 * rotx_10 ) ) + ( roty_3 * rotx_14 ) );
		double B_3 = ( ( ( ( roty_0 * rotx_3 ) + ( roty_1 * rotx_7 ) ) + ( roty_2 * rotx_11 ) ) + ( roty_3 * rotx_15 ) );
		double B_4 = ( ( ( ( roty_4 * rotx_0 ) + ( roty_5 * rotx_4 ) ) + ( roty_6 * rotx_8 ) ) + ( roty_7 * rotx_12 ) );
		double B_5 = ( ( ( ( roty_4 * rotx_1 ) + ( roty_5 * rotx_5 ) ) + ( roty_6 * rotx_9 ) ) + ( roty_7 * rotx_13 ) );
		double B_6 = ( ( ( ( roty_4 * rotx_2 ) + ( roty_5 * rotx_6 ) ) + ( roty_6 * rotx_10 ) ) + ( roty_7 * rotx_14 ) );
		double B_7 = ( ( ( ( roty_4 * rotx_3 ) + ( roty_5 * rotx_7 ) ) + ( roty_6 * rotx_11 ) ) + ( roty_7 * rotx_15 ) );
		double B_8 = ( ( ( ( roty_8 * rotx_0 ) + ( roty_9 * rotx_4 ) ) + ( roty_10 * rotx_8 ) ) + ( roty_11 * rotx_12 ) );
		double B_9 = ( ( ( ( roty_8 * rotx_1 ) + ( roty_9 * rotx_5 ) ) + ( roty_10 * rotx_9 ) ) + ( roty_11 * rotx_13 ) );
		double B_10 = ( ( ( ( roty_8 * rotx_2 ) + ( roty_9 * rotx_6 ) ) + ( roty_10 * rotx_10 ) ) + ( roty_11 * rotx_14 ) );
		double B_11 = ( ( ( ( roty_8 * rotx_3 ) + ( roty_9 * rotx_7 ) ) + ( roty_10 * rotx_11 ) ) + ( roty_11 * rotx_15 ) );
		double B_12 = ( ( ( ( roty_12 * rotx_0 ) + ( roty_13 * rotx_4 ) ) + ( roty_14 * rotx_8 ) ) + ( roty_15 * rotx_12 ) );
		double B_13 = ( ( ( ( roty_12 * rotx_1 ) + ( roty_13 * rotx_5 ) ) + ( roty_14 * rotx_9 ) ) + ( roty_15 * rotx_13 ) );
		double B_14 = ( ( ( ( roty_12 * rotx_2 ) + ( roty_13 * rotx_6 ) ) + ( roty_14 * rotx_10 ) ) + ( roty_15 * rotx_14 ) );
		double B_15 = ( ( ( ( roty_12 * rotx_3 ) + ( roty_13 * rotx_7 ) ) + ( roty_14 * rotx_11 ) ) + ( roty_15 * rotx_15 ) );
		double B_01 = ( ( ( ( rotz_0 * B_0 ) + ( rotz_1 * B_4 ) ) + ( rotz_2 * B_8 ) ) + ( rotz_3 * B_12 ) );
		double B_16 = ( ( ( ( rotz_0 * B_1 ) + ( rotz_1 * B_5 ) ) + ( rotz_2 * B_9 ) ) + ( rotz_3 * B_13 ) );
		double B_21 = ( ( ( ( rotz_0 * B_2 ) + ( rotz_1 * B_6 ) ) + ( rotz_2 * B_10 ) ) + ( rotz_3 * B_14 ) );
		double B_31 = ( ( ( ( rotz_0 * B_3 ) + ( rotz_1 * B_7 ) ) + ( rotz_2 * B_11 ) ) + ( rotz_3 * B_15 ) );
		double B_41 = ( ( ( ( rotz_4 * B_0 ) + ( rotz_5 * B_4 ) ) + ( rotz_6 * B_8 ) ) + ( rotz_7 * B_12 ) );
		double B_51 = ( ( ( ( rotz_4 * B_1 ) + ( rotz_5 * B_5 ) ) + ( rotz_6 * B_9 ) ) + ( rotz_7 * B_13 ) );
		double B_61 = ( ( ( ( rotz_4 * B_2 ) + ( rotz_5 * B_6 ) ) + ( rotz_6 * B_10 ) ) + ( rotz_7 * B_14 ) );
		double B_71 = ( ( ( ( rotz_4 * B_3 ) + ( rotz_5 * B_7 ) ) + ( rotz_6 * B_11 ) ) + ( rotz_7 * B_15 ) );
		double B_81 = ( ( ( ( rotz_8 * B_0 ) + ( rotz_9 * B_4 ) ) + ( rotz_10 * B_8 ) ) + ( rotz_11 * B_12 ) );
		double B_91 = ( ( ( ( rotz_8 * B_1 ) + ( rotz_9 * B_5 ) ) + ( rotz_10 * B_9 ) ) + ( rotz_11 * B_13 ) );
		double B_101 = ( ( ( ( rotz_8 * B_2 ) + ( rotz_9 * B_6 ) ) + ( rotz_10 * B_10 ) ) + ( rotz_11 * B_14 ) );
		double B_111 = ( ( ( ( rotz_8 * B_3 ) + ( rotz_9 * B_7 ) ) + ( rotz_10 * B_11 ) ) + ( rotz_11 * B_15 ) );
		double B_121 = ( ( ( ( rotz_12 * B_0 ) + ( rotz_13 * B_4 ) ) + ( rotz_14 * B_8 ) ) + ( rotz_15 * B_12 ) );
		double B_131 = ( ( ( ( rotz_12 * B_1 ) + ( rotz_13 * B_5 ) ) + ( rotz_14 * B_9 ) ) + ( rotz_15 * B_13 ) );
		double B_141 = ( ( ( ( rotz_12 * B_2 ) + ( rotz_13 * B_6 ) ) + ( rotz_14 * B_10 ) ) + ( rotz_15 * B_14 ) );
		double B_151 = ( ( ( ( rotz_12 * B_3 ) + ( rotz_13 * B_7 ) ) + ( rotz_14 * B_11 ) ) + ( rotz_15 * B_15 ) );
		this.transform(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (( ( ( ( trsl_0 * B_01 ) + ( trsl_1 * B_41 ) ) + ( trsl_2 * B_81 ) ) + ( trsl_3 * B_121 ) )) ), ((java.lang.Object) (( ( ( ( trsl_0 * B_16 ) + ( trsl_1 * B_51 ) ) + ( trsl_2 * B_91 ) ) + ( trsl_3 * B_131 ) )) ), ((java.lang.Object) (( ( ( ( trsl_0 * B_21 ) + ( trsl_1 * B_61 ) ) + ( trsl_2 * B_101 ) ) + ( trsl_3 * B_141 ) )) ), ((java.lang.Object) (( ( ( ( trsl_0 * B_31 ) + ( trsl_1 * B_71 ) ) + ( trsl_2 * B_111 ) ) + ( trsl_3 * B_151 ) )) ), ((java.lang.Object) (( ( ( ( trsl_4 * B_01 ) + ( trsl_5 * B_41 ) ) + ( trsl_6 * B_81 ) ) + ( trsl_7 * B_121 ) )) ), ((java.lang.Object) (( ( ( ( trsl_4 * B_16 ) + ( trsl_5 * B_51 ) ) + ( trsl_6 * B_91 ) ) + ( trsl_7 * B_131 ) )) ), ((java.lang.Object) (( ( ( ( trsl_4 * B_21 ) + ( trsl_5 * B_61 ) ) + ( trsl_6 * B_101 ) ) + ( trsl_7 * B_141 ) )) ), ((java.lang.Object) (( ( ( ( trsl_4 * B_31 ) + ( trsl_5 * B_71 ) ) + ( trsl_6 * B_111 ) ) + ( trsl_7 * B_151 ) )) ), ((java.lang.Object) (( ( ( ( trsl_8 * B_01 ) + ( trsl_9 * B_41 ) ) + ( trsl_10 * B_81 ) ) + ( trsl_11 * B_121 ) )) ), ((java.lang.Object) (( ( ( ( trsl_8 * B_16 ) + ( trsl_9 * B_51 ) ) + ( trsl_10 * B_91 ) ) + ( trsl_11 * B_131 ) )) ), ((java.lang.Object) (( ( ( ( trsl_8 * B_21 ) + ( trsl_9 * B_61 ) ) + ( trsl_10 * B_101 ) ) + ( trsl_11 * B_141 ) )) ), ((java.lang.Object) (( ( ( ( trsl_8 * B_31 ) + ( trsl_9 * B_71 ) ) + ( trsl_10 * B_111 ) ) + ( trsl_11 * B_151 ) )) ), ((java.lang.Object) (( ( ( ( trsl_12 * B_01 ) + ( trsl_13 * B_41 ) ) + ( trsl_14 * B_81 ) ) + ( trsl_15 * B_121 ) )) ), ((java.lang.Object) (( ( ( ( trsl_12 * B_16 ) + ( trsl_13 * B_51 ) ) + ( trsl_14 * B_91 ) ) + ( trsl_15 * B_131 ) )) ), ((java.lang.Object) (( ( ( ( trsl_12 * B_21 ) + ( trsl_13 * B_61 ) ) + ( trsl_14 * B_101 ) ) + ( trsl_15 * B_141 ) )) ), ((java.lang.Object) (( ( ( ( trsl_12 * B_31 ) + ( trsl_13 * B_71 ) ) + ( trsl_14 * B_111 ) ) + ( trsl_15 * B_151 ) )) )}));
	}
	
	
	public void autoPlace(java.lang.Object zFactor, java.lang.Object fFactor)
	{
		double fFactor1 = ( (haxe.lang.Runtime.eq(fFactor, null)) ? (1.25) : (((double) (haxe.lang.Runtime.toDouble(fFactor)) )) );
		double zFactor1 = ( (haxe.lang.Runtime.eq(zFactor, null)) ? (1.5) : (((double) (haxe.lang.Runtime.toDouble(zFactor)) )) );
		this.mesh.computeBSphere();
		this.transform(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (1) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) ( - (((double[]) (this.mesh.bsphere.o) )[0]) ) ), ((java.lang.Object) (0) ), ((java.lang.Object) (1) ), ((java.lang.Object) (0) ), ((java.lang.Object) ( - (((double[]) (this.mesh.bsphere.o) )[1]) ) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (1) ), ((java.lang.Object) ( - (((double[]) (this.mesh.bsphere.o) )[2]) ) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (1) )}));
		int a = this.width;
		int b = this.height;
		double r = ( ((double) ((( (( a > b )) ? (b) : (a) ))) ) / 2 );
		this.transform(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (( r / this.mesh.bsphere.r )) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (( r / this.mesh.bsphere.r )) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (( r / this.mesh.bsphere.r )) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (1) )}));
		this.transform(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (1) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (1) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (1) ), ((java.lang.Object) (( r * zFactor1 )) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (1) )}));
		this.setFocal(( r * fFactor1 ));
	}
	
	
	public void vertices()
	{
		double _x = ( ((double) (this.width) ) / 2 );
		double _y = ( ((double) (this.height) ) / 2 );
		double[] this1 = new double[3];
		double[] this2 = ((double[]) (this1) );
		((double[]) (this2) )[0] = _x;
		((double[]) (this2) )[1] = _y;
		((double[]) (this2) )[2] = ((double) (0) );
		double[] offs = ((double[]) (this2) );
		double[] this3 = new double[3];
		double[] this4 = ((double[]) (this3) );
		((double[]) (this4) )[0] = ((double) (-1) );
		((double[]) (this4) )[1] = ((double) (-1) );
		((double[]) (this4) )[2] = ((double) (1) );
		double[] yflip = ((double[]) (this4) );
		{
			int _g = 0;
			int _g1 = this.mesh.vertices.length;
			while (( _g < _g1 ))
			{
				int i = _g++;
				double[] v = this.mesh.vertices.__get(i);
				double f = this.focal;
				double[] this5 = new double[3];
				double[] this6 = ((double[]) (this5) );
				((double[]) (this6) )[0] = ( ( f * ((double[]) (v) )[0] ) / ((double[]) (v) )[2] );
				((double[]) (this6) )[1] = ( ( f * ((double[]) (v) )[1] ) / ((double[]) (v) )[2] );
				((double[]) (this6) )[2] = ((double) (0) );
				double[] this7 = ((double[]) (this6) );
				double[] this8 = new double[3];
				double[] this9 = ((double[]) (this8) );
				((double[]) (this9) )[0] = ( ((double[]) (this7) )[0] * ((double[]) (yflip) )[0] );
				((double[]) (this9) )[1] = ( ((double[]) (this7) )[1] * ((double[]) (yflip) )[1] );
				((double[]) (this9) )[2] = ( ((double[]) (this7) )[2] * ((double[]) (yflip) )[2] );
				double[] this10 = ((double[]) (this9) );
				double[] this11 = new double[3];
				double[] this12 = ((double[]) (this11) );
				((double[]) (this12) )[0] = ( ((double[]) (this10) )[0] + ((double[]) (offs) )[0] );
				((double[]) (this12) )[1] = ( ((double[]) (this10) )[1] + ((double[]) (offs) )[1] );
				((double[]) (this12) )[2] = ( ((double[]) (this10) )[2] + ((double[]) (offs) )[2] );
				double[] p = ((double[]) (this12) );
				this.lines.push(new apparentridges.Line(( ((double[]) (p) )[0] - 1 ), ( ((double[]) (p) )[1] - 1 ), ( ((double[]) (p) )[0] + 1 ), ( ((double[]) (p) )[1] + 1 )));
				this.lines.push(new apparentridges.Line(( ((double[]) (p) )[0] + 1 ), ( ((double[]) (p) )[1] - 1 ), ( ((double[]) (p) )[0] - 1 ), ( ((double[]) (p) )[1] + 1 )));
			}
			
		}
		
	}
	
	
	public void edges()
	{
		double _x = ( ((double) (this.width) ) / 2 );
		double _y = ( ((double) (this.height) ) / 2 );
		double[] this1 = new double[3];
		double[] this2 = ((double[]) (this1) );
		((double[]) (this2) )[0] = _x;
		((double[]) (this2) )[1] = _y;
		((double[]) (this2) )[2] = ((double) (0) );
		double[] offs = ((double[]) (this2) );
		double[] this3 = new double[3];
		double[] this4 = ((double[]) (this3) );
		((double[]) (this4) )[0] = ((double) (-1) );
		((double[]) (this4) )[1] = ((double) (-1) );
		((double[]) (this4) )[2] = ((double) (1) );
		double[] yflip = ((double[]) (this4) );
		{
			int _g = 0;
			int _g1 = this.mesh.faces.length;
			while (( _g < _g1 ))
			{
				int i = _g++;
				int[] f = this.mesh.faces.__get(i);
				double f1 = this.focal;
				double[] v = this.mesh.vertices.__get(((int[]) (f) )[0]);
				double[] this5 = new double[3];
				double[] this6 = ((double[]) (this5) );
				((double[]) (this6) )[0] = ( ( f1 * ((double[]) (v) )[0] ) / ((double[]) (v) )[2] );
				((double[]) (this6) )[1] = ( ( f1 * ((double[]) (v) )[1] ) / ((double[]) (v) )[2] );
				((double[]) (this6) )[2] = ((double) (0) );
				double[] this7 = ((double[]) (this6) );
				double[] this8 = new double[3];
				double[] this9 = ((double[]) (this8) );
				((double[]) (this9) )[0] = ( ((double[]) (this7) )[0] * ((double[]) (yflip) )[0] );
				((double[]) (this9) )[1] = ( ((double[]) (this7) )[1] * ((double[]) (yflip) )[1] );
				((double[]) (this9) )[2] = ( ((double[]) (this7) )[2] * ((double[]) (yflip) )[2] );
				double[] this10 = ((double[]) (this9) );
				double[] this11 = new double[3];
				double[] this12 = ((double[]) (this11) );
				((double[]) (this12) )[0] = ( ((double[]) (this10) )[0] + ((double[]) (offs) )[0] );
				((double[]) (this12) )[1] = ( ((double[]) (this10) )[1] + ((double[]) (offs) )[1] );
				((double[]) (this12) )[2] = ( ((double[]) (this10) )[2] + ((double[]) (offs) )[2] );
				double[] p0 = ((double[]) (this12) );
				double f2 = this.focal;
				double[] v1 = this.mesh.vertices.__get(((int[]) (f) )[1]);
				double[] this13 = new double[3];
				double[] this14 = ((double[]) (this13) );
				((double[]) (this14) )[0] = ( ( f2 * ((double[]) (v1) )[0] ) / ((double[]) (v1) )[2] );
				((double[]) (this14) )[1] = ( ( f2 * ((double[]) (v1) )[1] ) / ((double[]) (v1) )[2] );
				((double[]) (this14) )[2] = ((double) (0) );
				double[] this15 = ((double[]) (this14) );
				double[] this16 = new double[3];
				double[] this17 = ((double[]) (this16) );
				((double[]) (this17) )[0] = ( ((double[]) (this15) )[0] * ((double[]) (yflip) )[0] );
				((double[]) (this17) )[1] = ( ((double[]) (this15) )[1] * ((double[]) (yflip) )[1] );
				((double[]) (this17) )[2] = ( ((double[]) (this15) )[2] * ((double[]) (yflip) )[2] );
				double[] this18 = ((double[]) (this17) );
				double[] this19 = new double[3];
				double[] this20 = ((double[]) (this19) );
				((double[]) (this20) )[0] = ( ((double[]) (this18) )[0] + ((double[]) (offs) )[0] );
				((double[]) (this20) )[1] = ( ((double[]) (this18) )[1] + ((double[]) (offs) )[1] );
				((double[]) (this20) )[2] = ( ((double[]) (this18) )[2] + ((double[]) (offs) )[2] );
				double[] p1 = ((double[]) (this20) );
				double f3 = this.focal;
				double[] v2 = this.mesh.vertices.__get(((int[]) (f) )[2]);
				double[] this21 = new double[3];
				double[] this22 = ((double[]) (this21) );
				((double[]) (this22) )[0] = ( ( f3 * ((double[]) (v2) )[0] ) / ((double[]) (v2) )[2] );
				((double[]) (this22) )[1] = ( ( f3 * ((double[]) (v2) )[1] ) / ((double[]) (v2) )[2] );
				((double[]) (this22) )[2] = ((double) (0) );
				double[] this23 = ((double[]) (this22) );
				double[] this24 = new double[3];
				double[] this25 = ((double[]) (this24) );
				((double[]) (this25) )[0] = ( ((double[]) (this23) )[0] * ((double[]) (yflip) )[0] );
				((double[]) (this25) )[1] = ( ((double[]) (this23) )[1] * ((double[]) (yflip) )[1] );
				((double[]) (this25) )[2] = ( ((double[]) (this23) )[2] * ((double[]) (yflip) )[2] );
				double[] this26 = ((double[]) (this25) );
				double[] this27 = new double[3];
				double[] this28 = ((double[]) (this27) );
				((double[]) (this28) )[0] = ( ((double[]) (this26) )[0] + ((double[]) (offs) )[0] );
				((double[]) (this28) )[1] = ( ((double[]) (this26) )[1] + ((double[]) (offs) )[1] );
				((double[]) (this28) )[2] = ( ((double[]) (this26) )[2] + ((double[]) (offs) )[2] );
				double[] p2 = ((double[]) (this28) );
				this.lines.push(new apparentridges.Line(((double[]) (p0) )[0], ((double[]) (p0) )[1], ((double[]) (p1) )[0], ((double[]) (p1) )[1]));
				this.lines.push(new apparentridges.Line(((double[]) (p1) )[0], ((double[]) (p1) )[1], ((double[]) (p2) )[0], ((double[]) (p2) )[1]));
				this.lines.push(new apparentridges.Line(((double[]) (p2) )[0], ((double[]) (p2) )[1], ((double[]) (p0) )[0], ((double[]) (p0) )[1]));
			}
			
		}
		
	}
	
	
	public void apparentRidges(double thresh, java.lang.Object cull)
	{
		double cull1 = ( (haxe.lang.Runtime.eq(cull, null)) ? (((double) (2) )) : (((double) (haxe.lang.Runtime.toDouble(cull)) )) );
		if ( ! (this.didPrecompute) ) 
		{
			if (this.verbose) 
			{
				haxe.Log.trace.__hx_invoke2_o(0.0, "precomputing mesh properties...", 0.0, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"apparentridges.Render", "apparentridges/ApparentRidges.hx", "apparentRidges"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (1545) )) )}));
			}
			
			this.mesh.precompute(( cull1 >= 0 ), this.verbose);
			this.didPrecompute = true;
		}
		
		double _x = ( ((double) (this.width) ) / 2 );
		double _y = ( ((double) (this.height) ) / 2 );
		double[] this1 = new double[3];
		double[] this2 = ((double[]) (this1) );
		((double[]) (this2) )[0] = _x;
		((double[]) (this2) )[1] = _y;
		((double[]) (this2) )[2] = ((double) (0) );
		double[] offs = ((double[]) (this2) );
		double[] this3 = new double[3];
		double[] this4 = ((double[]) (this3) );
		((double[]) (this4) )[0] = ((double) (-1) );
		((double[]) (this4) )[1] = ((double) (-1) );
		((double[]) (this4) )[2] = ((double) (1) );
		double[] yflip = ((double[]) (this4) );
		double[] this5 = new double[3];
		double[] this6 = ((double[]) (this5) );
		((double[]) (this6) )[0] = ((double) (0) );
		((double[]) (this6) )[1] = ((double) (0) );
		((double[]) (this6) )[2] = ((double) (0) );
		double[] eye = ((double[]) (this6) );
		if (this.verbose) 
		{
			haxe.Log.trace.__hx_invoke2_o(0.0, "generating apparent ridges...", 0.0, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"apparentridges.Render", "apparentridges/ApparentRidges.hx", "apparentRidges"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (1553) )) )}));
		}
		
		haxe.root.Array<apparentridges.Ridge> ridges = this.mesh.apparentRidges(eye, thresh);
		if (this.verbose) 
		{
			haxe.Log.trace.__hx_invoke2_o(0.0, "projecting apparent ridges onto 2D plane...", 0.0, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"apparentridges.Render", "apparentridges/ApparentRidges.hx", "apparentRidges"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (1555) )) )}));
		}
		
		{
			int _g = 0;
			int _g1 = ridges.length;
			while (( _g < _g1 ))
			{
				int i = _g++;
				if (( cull1 >= 0 )) 
				{
					if ((  ! (this.mesh.visible(eye, ridges.__get(i).A, cull1))  &&  ! (this.mesh.visible(eye, ridges.__get(i).B, cull1))  )) 
					{
						continue;
					}
					
				}
				
				double f = this.focal;
				double[] v = ridges.__get(i).A;
				double[] this7 = new double[3];
				double[] this8 = ((double[]) (this7) );
				((double[]) (this8) )[0] = ( ( f * ((double[]) (v) )[0] ) / ((double[]) (v) )[2] );
				((double[]) (this8) )[1] = ( ( f * ((double[]) (v) )[1] ) / ((double[]) (v) )[2] );
				((double[]) (this8) )[2] = ((double) (0) );
				double[] this9 = ((double[]) (this8) );
				double[] this10 = new double[3];
				double[] this11 = ((double[]) (this10) );
				((double[]) (this11) )[0] = ( ((double[]) (this9) )[0] * ((double[]) (yflip) )[0] );
				((double[]) (this11) )[1] = ( ((double[]) (this9) )[1] * ((double[]) (yflip) )[1] );
				((double[]) (this11) )[2] = ( ((double[]) (this9) )[2] * ((double[]) (yflip) )[2] );
				double[] this12 = ((double[]) (this11) );
				double[] this13 = new double[3];
				double[] this14 = ((double[]) (this13) );
				((double[]) (this14) )[0] = ( ((double[]) (this12) )[0] + ((double[]) (offs) )[0] );
				((double[]) (this14) )[1] = ( ((double[]) (this12) )[1] + ((double[]) (offs) )[1] );
				((double[]) (this14) )[2] = ( ((double[]) (this12) )[2] + ((double[]) (offs) )[2] );
				double[] p0 = ((double[]) (this14) );
				double f1 = this.focal;
				double[] v1 = ridges.__get(i).B;
				double[] this15 = new double[3];
				double[] this16 = ((double[]) (this15) );
				((double[]) (this16) )[0] = ( ( f1 * ((double[]) (v1) )[0] ) / ((double[]) (v1) )[2] );
				((double[]) (this16) )[1] = ( ( f1 * ((double[]) (v1) )[1] ) / ((double[]) (v1) )[2] );
				((double[]) (this16) )[2] = ((double) (0) );
				double[] this17 = ((double[]) (this16) );
				double[] this18 = new double[3];
				double[] this19 = ((double[]) (this18) );
				((double[]) (this19) )[0] = ( ((double[]) (this17) )[0] * ((double[]) (yflip) )[0] );
				((double[]) (this19) )[1] = ( ((double[]) (this17) )[1] * ((double[]) (yflip) )[1] );
				((double[]) (this19) )[2] = ( ((double[]) (this17) )[2] * ((double[]) (yflip) )[2] );
				double[] this20 = ((double[]) (this19) );
				double[] this21 = new double[3];
				double[] this22 = ((double[]) (this21) );
				((double[]) (this22) )[0] = ( ((double[]) (this20) )[0] + ((double[]) (offs) )[0] );
				((double[]) (this22) )[1] = ( ((double[]) (this20) )[1] + ((double[]) (offs) )[1] );
				((double[]) (this22) )[2] = ( ((double[]) (this20) )[2] + ((double[]) (offs) )[2] );
				double[] p1 = ((double[]) (this22) );
				apparentridges.Line l = new apparentridges.Line(((double[]) (p0) )[0], ((double[]) (p0) )[1], ((double[]) (p1) )[0], ((double[]) (p1) )[1]);
				l.opacity1 = ridges.__get(i).strengthA;
				l.opacity2 = ridges.__get(i).strengthB;
				this.lines.push(l);
			}
			
		}
		
		if (this.verbose) 
		{
			haxe.Log.trace.__hx_invoke2_o(0.0, "apparent ridges computation finished.", 0.0, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"apparentridges.Render", "apparentridges/ApparentRidges.hx", "apparentRidges"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (1569) )) )}));
		}
		
	}
	
	
	public void buildPolylines(java.lang.Object epsilon)
	{
		double epsilon1 = ( (haxe.lang.Runtime.eq(epsilon, null)) ? (((double) (1) )) : (((double) (haxe.lang.Runtime.toDouble(epsilon)) )) );
		if (this.verbose) 
		{
			haxe.Log.trace.__hx_invoke2_o(0.0, "building polylines from ridge segments...", 0.0, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"apparentridges.Render", "apparentridges/ApparentRidges.hx", "buildPolylines"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (1573) )) )}));
		}
		
		this.polylines = new haxe.root.Array<haxe.root.Array<double[]>>(new haxe.root.Array[]{});
		apparentridges.Render _gthis = this;
		haxe.root.Array<apparentridges.Line> _this = this.lines;
		haxe.root.Array<apparentridges.Line> ret = new haxe.root.Array<apparentridges.Line>(new apparentridges.Line[]{});
		{
			int _g = 0;
			int _g1 = _this.length;
			while (( _g < _g1 ))
			{
				int i = _g++;
				apparentridges.Line elt = _this.__get(i);
				if ( ! ((( ( ( ( elt.y1 < 0 ) || ( elt.y1 > ( _gthis.height - 1 ) ) ) || ( elt.y2 < 0 ) ) || ( elt.y2 > ( _gthis.height - 1 ) ) ))) ) 
				{
					ret.push(elt);
				}
				
			}
			
		}
		
		this.lines = ret;
		{
			int _g2 = 0;
			int _g3 = this.lines.length;
			while (( _g2 < _g3 ))
			{
				int i1 = _g2++;
				double y1 = this.lines.__get(i1).y1;
				double y2 = this.lines.__get(i1).y2;
				if (( y1 > y2 )) 
				{
					this.lines.__get(i1).flip();
				}
				else
				{
					if (( y1 == y2 )) 
					{
						if (( this.lines.__get(i1).x1 > this.lines.__get(i1).x2 )) 
						{
							this.lines.__get(i1).flip();
						}
						
					}
					
				}
				
			}
			
		}
		
		haxe.root.Array<haxe.root.Array<haxe.root.Array<double[]>>> _g4 = new haxe.root.Array<haxe.root.Array<haxe.root.Array<double[]>>>(new haxe.root.Array[]{});
		{
			int _g5 = 0;
			int _g6 = this.height;
			while (( _g5 < _g6 ))
			{
				int i2 = _g5++;
				_g4.push(new haxe.root.Array<haxe.root.Array<double[]>>(new haxe.root.Array[]{}));
			}
			
		}
		
		haxe.root.Array<haxe.root.Array<haxe.root.Array<double[]>>> rows = _g4;
		haxe.root.Array<haxe.root.Array<haxe.root.Array<double[]>>> _g7 = new haxe.root.Array<haxe.root.Array<haxe.root.Array<double[]>>>(new haxe.root.Array[]{});
		{
			int _g8 = 0;
			int _g9 = this.height;
			while (( _g8 < _g9 ))
			{
				int i3 = _g8++;
				_g7.push(new haxe.root.Array<haxe.root.Array<double[]>>(new haxe.root.Array[]{}));
			}
			
		}
		
		haxe.root.Array<haxe.root.Array<haxe.root.Array<double[]>>> ends = _g7;
		haxe.lang.Function singleton = ( (( apparentridges.Render_buildPolylines_1596__Fun.__hx_current != null )) ? (apparentridges.Render_buildPolylines_1596__Fun.__hx_current) : (apparentridges.Render_buildPolylines_1596__Fun.__hx_current = ((apparentridges.Render_buildPolylines_1596__Fun) (new apparentridges.Render_buildPolylines_1596__Fun()) )) );
		{
			int _g10 = 0;
			int _g11 = this.lines.length;
			while (( _g10 < _g11 ))
			{
				int i4 = _g10++;
				haxe.root.Array<double[]> p = ((haxe.root.Array<double[]>) (singleton.__hx_invoke1_o(0.0, this.lines.__get(i4))) );
				rows.__get(((int) (((double) (((int) (java.lang.Math.round(this.lines.__get(i4).y1)) )) )) )).push(p);
				ends.__get(((int) (((double) (((int) (java.lang.Math.round(this.lines.__get(i4).y2)) )) )) )).push(p);
			}
			
		}
		
		{
			int _g12 = 0;
			int _g13 = rows.length;
			while (( _g12 < _g13 ))
			{
				int i5 = _g12++;
				int nj = rows.__get(i5).length;
				{
					int _g14 = 0;
					int _g15 = nj;
					while (( _g14 < _g15 ))
					{
						int _j = _g14++;
						int j = ( ( nj - _j ) - 1 );
						if (( rows.__get(i5).__get(j) == null )) 
						{
							continue;
						}
						
						int nk = ends.__get(i5).length;
						{
							int _g16 = 0;
							int _g17 = nk;
							while (( _g16 < _g17 ))
							{
								int _k = _g16++;
								int k = ( ( nk - _k ) - 1 );
								if (( ends.__get(i5).__get(k) == null )) 
								{
									continue;
								}
								
								if (( rows.__get(i5).__get(j) == ends.__get(i5).__get(k) )) 
								{
									continue;
								}
								
								haxe.root.Array<double[]> this1 = rows.__get(i5).__get(j);
								int r = ((int) (((double) (((int) (java.lang.Math.round(((double[]) (this1.__get(( this1.length - 1 ))) )[1])) )) )) );
								haxe.root.Array<double[]> this2 = ends.__get(i5).__get(k);
								double d = java.lang.Math.abs(( ((double[]) (((haxe.root.Array<double[]>) (rows.__get(i5).__get(j)) ).__get(0)) )[0] - ((double[]) (this2.__get(( this2.length - 1 ))) )[0] ));
								if (( d <= epsilon1 )) 
								{
									if (( d < 1 )) 
									{
										((double[]) (((haxe.root.Array<double[]>) (ends.__get(i5).__get(k)) ).__get(( ((haxe.root.Array<double[]>) (ends.__get(i5).__get(k)) ).length - 1 ))) )[2] = ( (( ((double[]) (((haxe.root.Array<double[]>) (ends.__get(i5).__get(k)) ).__get(( ((haxe.root.Array<double[]>) (ends.__get(i5).__get(k)) ).length - 1 ))) )[2] + ((double[]) (((haxe.root.Array<double[]>) (rows.__get(i5).__get(j)) ).__get(0)) )[2] )) / 2 );
									}
									
									{
										int _g18 = ( (( d < 1 )) ? (1) : (0) );
										int _g19 = ((haxe.root.Array<double[]>) (rows.__get(i5).__get(j)) ).length;
										while (( _g18 < _g19 ))
										{
											int t = _g18++;
											{
												haxe.root.Array<double[]> this3 = ends.__get(i5).__get(k);
												this3.push(((haxe.root.Array<double[]>) (rows.__get(i5).__get(j)) ).__get(t));
											}
											
										}
										
									}
									
									ends.__get(r).remove(rows.__get(i5).__get(j));
									ends.__get(r).push(ends.__get(i5).__get(k));
									ends.__get(i5).__set(k, null);
									break;
								}
								
							}
							
						}
						
					}
					
				}
				
			}
			
		}
		
		{
			int _g20 = 0;
			int _g21 = ends.length;
			while (( _g20 < _g21 ))
			{
				int i6 = _g20++;
				{
					int _g22 = 0;
					int _g23 = ends.__get(i6).length;
					while (( _g22 < _g23 ))
					{
						int j1 = _g22++;
						if (( ends.__get(i6).__get(j1) != null )) 
						{
							this.polylines.push(ends.__get(i6).__get(j1));
						}
						
					}
					
				}
				
			}
			
		}
		
		haxe.root.Array<haxe.root.Array<double[]>> _this1 = this.polylines;
		haxe.root.Array<haxe.root.Array<double[]>> ret1 = new haxe.root.Array<haxe.root.Array<double[]>>(new haxe.root.Array[]{});
		{
			int _g24 = 0;
			int _g25 = _this1.length;
			while (( _g24 < _g25 ))
			{
				int i7 = _g24++;
				haxe.root.Array<double[]> elt1 = _this1.__get(i7);
				boolean tmp = false;
				if (( ((haxe.root.Array<double[]>) (elt1) ).length > 2 )) 
				{
					tmp = true;
				}
				else
				{
					if (( ((haxe.root.Array<double[]>) (elt1) ).length < 2 )) 
					{
						tmp = false;
					}
					else
					{
						double[] v1 = ((haxe.root.Array<double[]>) (elt1) ).__get(0);
						double[] v2 = ((haxe.root.Array<double[]>) (elt1) ).__get(1);
						double x = ( ((double[]) (v1) )[0] - ((double[]) (v2) )[0] );
						double x1 = ( ((double[]) (v1) )[1] - ((double[]) (v2) )[1] );
						double x2 = ( ((double[]) (v1) )[2] - ((double[]) (v2) )[2] );
						tmp = ( (( java.lang.Math.sqrt(( ( ( x * x ) + ( x1 * x1 ) ) + ( x2 * x2 ) )) < epsilon1 )) ? (false) : (true) );
					}
					
				}
				
				if (tmp) 
				{
					ret1.push(elt1);
				}
				
			}
			
		}
		
		this.polylines = ret1;
		if (this.verbose) 
		{
			haxe.Log.trace.__hx_invoke2_o(0.0, "polylines built.", 0.0, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"apparentridges.Render", "apparentridges/ApparentRidges.hx", "buildPolylines"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (1664) )) )}));
		}
		
	}
	
	
	@Override public double __hx_setField_f(java.lang.String field, double value, boolean handleProperties)
	{
		{
			boolean __temp_executeDef1 = true;
			if (( field != null )) 
			{
				switch (field.hashCode())
				{
					case -1221029593:
					{
						if (field.equals("height")) 
						{
							__temp_executeDef1 = false;
							this.height = ((int) (value) );
							return value;
						}
						
						break;
					}
					
					
					case 97604197:
					{
						if (field.equals("focal")) 
						{
							__temp_executeDef1 = false;
							this.focal = ((double) (value) );
							return value;
						}
						
						break;
					}
					
					
					case 113126854:
					{
						if (field.equals("width")) 
						{
							__temp_executeDef1 = false;
							this.width = ((int) (value) );
							return value;
						}
						
						break;
					}
					
					
				}
				
			}
			
			if (__temp_executeDef1) 
			{
				return super.__hx_setField_f(field, value, handleProperties);
			}
			else
			{
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_setField(java.lang.String field, java.lang.Object value, boolean handleProperties)
	{
		{
			boolean __temp_executeDef1 = true;
			if (( field != null )) 
			{
				switch (field.hashCode())
				{
					case 239875603:
					{
						if (field.equals("didPrecompute")) 
						{
							__temp_executeDef1 = false;
							this.didPrecompute = haxe.lang.Runtime.toBool(((java.lang.Boolean) (value) ));
							return value;
						}
						
						break;
					}
					
					
					case 3347949:
					{
						if (field.equals("mesh")) 
						{
							__temp_executeDef1 = false;
							this.mesh = ((apparentridges.Mesh) (value) );
							return value;
						}
						
						break;
					}
					
					
					case 351107458:
					{
						if (field.equals("verbose")) 
						{
							__temp_executeDef1 = false;
							this.verbose = haxe.lang.Runtime.toBool(((java.lang.Boolean) (value) ));
							return value;
						}
						
						break;
					}
					
					
					case 102977279:
					{
						if (field.equals("lines")) 
						{
							__temp_executeDef1 = false;
							this.lines = ((haxe.root.Array<apparentridges.Line>) (value) );
							return value;
						}
						
						break;
					}
					
					
					case -1221029593:
					{
						if (field.equals("height")) 
						{
							__temp_executeDef1 = false;
							this.height = ((int) (haxe.lang.Runtime.toInt(value)) );
							return value;
						}
						
						break;
					}
					
					
					case 240236211:
					{
						if (field.equals("polylines")) 
						{
							__temp_executeDef1 = false;
							this.polylines = ((haxe.root.Array<haxe.root.Array<double[]>>) (value) );
							return value;
						}
						
						break;
					}
					
					
					case 113126854:
					{
						if (field.equals("width")) 
						{
							__temp_executeDef1 = false;
							this.width = ((int) (haxe.lang.Runtime.toInt(value)) );
							return value;
						}
						
						break;
					}
					
					
					case 97604197:
					{
						if (field.equals("focal")) 
						{
							__temp_executeDef1 = false;
							this.focal = ((double) (haxe.lang.Runtime.toDouble(value)) );
							return value;
						}
						
						break;
					}
					
					
				}
				
			}
			
			if (__temp_executeDef1) 
			{
				return super.__hx_setField(field, value, handleProperties);
			}
			else
			{
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		{
			boolean __temp_executeDef1 = true;
			if (( field != null )) 
			{
				switch (field.hashCode())
				{
					case 1670736869:
					{
						if (field.equals("buildPolylines")) 
						{
							__temp_executeDef1 = false;
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "buildPolylines")) );
						}
						
						break;
					}
					
					
					case 3347949:
					{
						if (field.equals("mesh")) 
						{
							__temp_executeDef1 = false;
							return this.mesh;
						}
						
						break;
					}
					
					
					case 728279585:
					{
						if (field.equals("apparentRidges")) 
						{
							__temp_executeDef1 = false;
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "apparentRidges")) );
						}
						
						break;
					}
					
					
					case 102977279:
					{
						if (field.equals("lines")) 
						{
							__temp_executeDef1 = false;
							return this.lines;
						}
						
						break;
					}
					
					
					case 96356950:
					{
						if (field.equals("edges")) 
						{
							__temp_executeDef1 = false;
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "edges")) );
						}
						
						break;
					}
					
					
					case 240236211:
					{
						if (field.equals("polylines")) 
						{
							__temp_executeDef1 = false;
							return this.polylines;
						}
						
						break;
					}
					
					
					case -1984141319:
					{
						if (field.equals("vertices")) 
						{
							__temp_executeDef1 = false;
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "vertices")) );
						}
						
						break;
					}
					
					
					case 97604197:
					{
						if (field.equals("focal")) 
						{
							__temp_executeDef1 = false;
							return this.focal;
						}
						
						break;
					}
					
					
					case 1647198360:
					{
						if (field.equals("autoPlace")) 
						{
							__temp_executeDef1 = false;
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "autoPlace")) );
						}
						
						break;
					}
					
					
					case 113126854:
					{
						if (field.equals("width")) 
						{
							__temp_executeDef1 = false;
							return this.width;
						}
						
						break;
					}
					
					
					case 1543682953:
					{
						if (field.equals("scaleRotateTranslate")) 
						{
							__temp_executeDef1 = false;
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "scaleRotateTranslate")) );
						}
						
						break;
					}
					
					
					case -1221029593:
					{
						if (field.equals("height")) 
						{
							__temp_executeDef1 = false;
							return this.height;
						}
						
						break;
					}
					
					
					case 1052666732:
					{
						if (field.equals("transform")) 
						{
							__temp_executeDef1 = false;
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "transform")) );
						}
						
						break;
					}
					
					
					case 351107458:
					{
						if (field.equals("verbose")) 
						{
							__temp_executeDef1 = false;
							return this.verbose;
						}
						
						break;
					}
					
					
					case -970194240:
					{
						if (field.equals("setVerbose")) 
						{
							__temp_executeDef1 = false;
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "setVerbose")) );
						}
						
						break;
					}
					
					
					case 239875603:
					{
						if (field.equals("didPrecompute")) 
						{
							__temp_executeDef1 = false;
							return this.didPrecompute;
						}
						
						break;
					}
					
					
					case 1392317219:
					{
						if (field.equals("setFocal")) 
						{
							__temp_executeDef1 = false;
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "setFocal")) );
						}
						
						break;
					}
					
					
					case 94746189:
					{
						if (field.equals("clear")) 
						{
							__temp_executeDef1 = false;
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "clear")) );
						}
						
						break;
					}
					
					
				}
				
			}
			
			if (__temp_executeDef1) 
			{
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				throw null;
			}
			
		}
		
	}
	
	
	@Override public double __hx_getField_f(java.lang.String field, boolean throwErrors, boolean handleProperties)
	{
		{
			boolean __temp_executeDef1 = true;
			if (( field != null )) 
			{
				switch (field.hashCode())
				{
					case -1221029593:
					{
						if (field.equals("height")) 
						{
							__temp_executeDef1 = false;
							return ((double) (this.height) );
						}
						
						break;
					}
					
					
					case 97604197:
					{
						if (field.equals("focal")) 
						{
							__temp_executeDef1 = false;
							return this.focal;
						}
						
						break;
					}
					
					
					case 113126854:
					{
						if (field.equals("width")) 
						{
							__temp_executeDef1 = false;
							return ((double) (this.width) );
						}
						
						break;
					}
					
					
				}
				
			}
			
			if (__temp_executeDef1) 
			{
				return super.__hx_getField_f(field, throwErrors, handleProperties);
			}
			else
			{
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, java.lang.Object[] dynargs)
	{
		{
			boolean __temp_executeDef1 = true;
			if (( field != null )) 
			{
				switch (field.hashCode())
				{
					case 1670736869:
					{
						if (field.equals("buildPolylines")) 
						{
							__temp_executeDef1 = false;
							this.buildPolylines(( (( dynargs.length > 0 )) ? (dynargs[0]) : (null) ));
						}
						
						break;
					}
					
					
					case 94746189:
					{
						if (field.equals("clear")) 
						{
							__temp_executeDef1 = false;
							this.clear();
						}
						
						break;
					}
					
					
					case 728279585:
					{
						if (field.equals("apparentRidges")) 
						{
							__temp_executeDef1 = false;
							this.apparentRidges(((double) (haxe.lang.Runtime.toDouble(dynargs[0])) ), ( (( dynargs.length > 1 )) ? (dynargs[1]) : (null) ));
						}
						
						break;
					}
					
					
					case 1392317219:
					{
						if (field.equals("setFocal")) 
						{
							__temp_executeDef1 = false;
							this.setFocal(((double) (haxe.lang.Runtime.toDouble(dynargs[0])) ));
						}
						
						break;
					}
					
					
					case 96356950:
					{
						if (field.equals("edges")) 
						{
							__temp_executeDef1 = false;
							this.edges();
						}
						
						break;
					}
					
					
					case -970194240:
					{
						if (field.equals("setVerbose")) 
						{
							__temp_executeDef1 = false;
							this.setVerbose(((int) (haxe.lang.Runtime.toInt(dynargs[0])) ));
						}
						
						break;
					}
					
					
					case -1984141319:
					{
						if (field.equals("vertices")) 
						{
							__temp_executeDef1 = false;
							this.vertices();
						}
						
						break;
					}
					
					
					case 1052666732:
					{
						if (field.equals("transform")) 
						{
							__temp_executeDef1 = false;
							this.transform(((haxe.root.Array<java.lang.Object>) (dynargs[0]) ));
						}
						
						break;
					}
					
					
					case 1647198360:
					{
						if (field.equals("autoPlace")) 
						{
							__temp_executeDef1 = false;
							this.autoPlace(( (( dynargs.length > 0 )) ? (dynargs[0]) : (null) ), ( (( dynargs.length > 1 )) ? (dynargs[1]) : (null) ));
						}
						
						break;
					}
					
					
					case 1543682953:
					{
						if (field.equals("scaleRotateTranslate")) 
						{
							__temp_executeDef1 = false;
							this.scaleRotateTranslate(((double) (haxe.lang.Runtime.toDouble(dynargs[0])) ), ((double) (haxe.lang.Runtime.toDouble(dynargs[1])) ), ((double) (haxe.lang.Runtime.toDouble(dynargs[2])) ), ((double) (haxe.lang.Runtime.toDouble(dynargs[3])) ), ((double) (haxe.lang.Runtime.toDouble(dynargs[4])) ), ((double) (haxe.lang.Runtime.toDouble(dynargs[5])) ), ((double) (haxe.lang.Runtime.toDouble(dynargs[6])) ), ((double) (haxe.lang.Runtime.toDouble(dynargs[7])) ), ((double) (haxe.lang.Runtime.toDouble(dynargs[8])) ));
						}
						
						break;
					}
					
					
				}
				
			}
			
			if (__temp_executeDef1) 
			{
				return super.__hx_invokeField(field, dynargs);
			}
			
		}
		
		return null;
	}
	
	
	@Override public void __hx_getFields(haxe.root.Array<java.lang.String> baseArr)
	{
		baseArr.push("didPrecompute");
		baseArr.push("verbose");
		baseArr.push("height");
		baseArr.push("width");
		baseArr.push("focal");
		baseArr.push("polylines");
		baseArr.push("lines");
		baseArr.push("mesh");
		super.__hx_getFields(baseArr);
	}
	
	
}


