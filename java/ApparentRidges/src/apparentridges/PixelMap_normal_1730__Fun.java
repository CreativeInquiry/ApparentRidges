// Generated by Haxe 4.1.3
package apparentridges;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class PixelMap_normal_1730__Fun extends haxe.lang.Function
{
	public PixelMap_normal_1730__Fun(apparentridges.Render render, double[] data)
	{
		super(3, 0);
		this.render = render;
		this.data = data;
	}
	
	
	@Override public java.lang.Object __hx_invoke3_o(double __fn_float1, java.lang.Object __fn_dyn1, double __fn_float2, java.lang.Object __fn_dyn2, double __fn_float3, java.lang.Object __fn_dyn3)
	{
		int y = ( (( __fn_dyn3 == haxe.lang.Runtime.undefined )) ? (((int) (__fn_float3) )) : (((int) (haxe.lang.Runtime.toInt(__fn_dyn3)) )) );
		int x = ( (( __fn_dyn2 == haxe.lang.Runtime.undefined )) ? (((int) (__fn_float2) )) : (((int) (haxe.lang.Runtime.toInt(__fn_dyn2)) )) );
		apparentridges.RayHit h = ( (( __fn_dyn1 == haxe.lang.Runtime.undefined )) ? (((apparentridges.RayHit) (((java.lang.Object) (__fn_float1) )) )) : (((apparentridges.RayHit) (__fn_dyn1) )) );
		int idx = ( (( ( y * this.render.width ) + x )) * 3 );
		if (( h == null )) 
		{
			((double[]) (this.data) )[idx] = ((double) (0) );
			((double[]) (this.data) )[( idx + 1 )] = ((double) (0) );
			((double[]) (this.data) )[( idx + 2 )] = ((double) (0) );
		}
		else
		{
			int[] f = h.face;
			double[] n0 = this.render.mesh.normals.__get(((int[]) (f) )[0]);
			double[] n1 = this.render.mesh.normals.__get(((int[]) (f) )[1]);
			double[] n2 = this.render.mesh.normals.__get(((int[]) (f) )[2]);
			double rhs = ( ( 1 - h.u ) - h.v );
			double[] this1 = new double[3];
			double[] this2 = ((double[]) (this1) );
			((double[]) (this2) )[0] = ( ((double[]) (n0) )[0] * rhs );
			((double[]) (this2) )[1] = ( ((double[]) (n0) )[1] * rhs );
			((double[]) (this2) )[2] = ( ((double[]) (n0) )[2] * rhs );
			double[] this3 = ((double[]) (this2) );
			double rhs1 = h.u;
			double[] this4 = new double[3];
			double[] this5 = ((double[]) (this4) );
			((double[]) (this5) )[0] = ( ((double[]) (n1) )[0] * rhs1 );
			((double[]) (this5) )[1] = ( ((double[]) (n1) )[1] * rhs1 );
			((double[]) (this5) )[2] = ( ((double[]) (n1) )[2] * rhs1 );
			double[] rhs2 = ((double[]) (this5) );
			double[] this6 = new double[3];
			double[] this7 = ((double[]) (this6) );
			((double[]) (this7) )[0] = ( ((double[]) (this3) )[0] + ((double[]) (rhs2) )[0] );
			((double[]) (this7) )[1] = ( ((double[]) (this3) )[1] + ((double[]) (rhs2) )[1] );
			((double[]) (this7) )[2] = ( ((double[]) (this3) )[2] + ((double[]) (rhs2) )[2] );
			double[] this8 = ((double[]) (this7) );
			double rhs3 = h.v;
			double[] this9 = new double[3];
			double[] this10 = ((double[]) (this9) );
			((double[]) (this10) )[0] = ( ((double[]) (n2) )[0] * rhs3 );
			((double[]) (this10) )[1] = ( ((double[]) (n2) )[1] * rhs3 );
			((double[]) (this10) )[2] = ( ((double[]) (n2) )[2] * rhs3 );
			double[] rhs4 = ((double[]) (this10) );
			double[] this11 = new double[3];
			double[] this12 = ((double[]) (this11) );
			((double[]) (this12) )[0] = ( ((double[]) (this8) )[0] + ((double[]) (rhs4) )[0] );
			((double[]) (this12) )[1] = ( ((double[]) (this8) )[1] + ((double[]) (rhs4) )[1] );
			((double[]) (this12) )[2] = ( ((double[]) (this8) )[2] + ((double[]) (rhs4) )[2] );
			double[] n = ((double[]) (this12) );
			((double[]) (this.data) )[idx] = ((double[]) (n) )[0];
			((double[]) (this.data) )[( idx + 1 )] = ((double[]) (n) )[1];
			((double[]) (this.data) )[( idx + 2 )] = ((double[]) (n) )[2];
		}
		
		return null;
	}
	
	
	public apparentridges.Render render;
	
	public double[] data;
	
}


