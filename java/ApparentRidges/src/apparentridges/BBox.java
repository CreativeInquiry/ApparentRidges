// Generated by Haxe 4.1.3
package apparentridges;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class BBox extends haxe.lang.HxObject
{
	public BBox(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public BBox()
	{
		apparentridges.BBox.__hx_ctor_apparentridges_BBox(this);
	}
	
	
	protected static void __hx_ctor_apparentridges_BBox(apparentridges.BBox __hx_this)
	{
		double _x = java.lang.Double.POSITIVE_INFINITY;
		double _y = java.lang.Double.POSITIVE_INFINITY;
		double _z = java.lang.Double.POSITIVE_INFINITY;
		double[] this1 = new double[3];
		double[] this2 = ((double[]) (this1) );
		((double[]) (this2) )[0] = _x;
		((double[]) (this2) )[1] = _y;
		((double[]) (this2) )[2] = _z;
		__hx_this.min = ((double[]) (this2) );
		double _x1 = java.lang.Double.NEGATIVE_INFINITY;
		double _y1 = java.lang.Double.NEGATIVE_INFINITY;
		double _z1 = java.lang.Double.NEGATIVE_INFINITY;
		double[] this3 = new double[3];
		double[] this4 = ((double[]) (this3) );
		((double[]) (this4) )[0] = _x1;
		((double[]) (this4) )[1] = _y1;
		((double[]) (this4) )[2] = _z1;
		__hx_this.max = ((double[]) (this4) );
	}
	
	
	public double[] min;
	
	public double[] max;
	
	public final double[] centroid()
	{
		double[] this1 = this.min;
		double[] rhs = this.max;
		double[] this2 = new double[3];
		double[] this3 = ((double[]) (this2) );
		((double[]) (this3) )[0] = ( ((double[]) (this1) )[0] + ((double[]) (rhs) )[0] );
		((double[]) (this3) )[1] = ( ((double[]) (this1) )[1] + ((double[]) (rhs) )[1] );
		((double[]) (this3) )[2] = ( ((double[]) (this1) )[2] + ((double[]) (rhs) )[2] );
		double[] this4 = ((double[]) (this3) );
		double[] this5 = new double[3];
		double[] this6 = ((double[]) (this5) );
		((double[]) (this6) )[0] = ( ((double[]) (this4) )[0] * 0.5 );
		((double[]) (this6) )[1] = ( ((double[]) (this4) )[1] * 0.5 );
		((double[]) (this6) )[2] = ( ((double[]) (this4) )[2] * 0.5 );
		return ((double[]) (this6) );
	}
	
	
	public final void add(double[] p)
	{
		((double[]) (this.min) )[0] = java.lang.Math.min(((double[]) (this.min) )[0], ((double[]) (p) )[0]);
		((double[]) (this.min) )[1] = java.lang.Math.min(((double[]) (this.min) )[1], ((double[]) (p) )[1]);
		((double[]) (this.min) )[2] = java.lang.Math.min(((double[]) (this.min) )[2], ((double[]) (p) )[2]);
		((double[]) (this.max) )[0] = java.lang.Math.max(((double[]) (this.max) )[0], ((double[]) (p) )[0]);
		((double[]) (this.max) )[1] = java.lang.Math.max(((double[]) (this.max) )[1], ((double[]) (p) )[1]);
		((double[]) (this.max) )[2] = java.lang.Math.max(((double[]) (this.max) )[2], ((double[]) (p) )[2]);
	}
	
	
	public final void merge(apparentridges.BBox bb)
	{
		((double[]) (this.min) )[0] = java.lang.Math.min(((double[]) (this.min) )[0], ((double[]) (bb.min) )[0]);
		((double[]) (this.min) )[1] = java.lang.Math.min(((double[]) (this.min) )[1], ((double[]) (bb.min) )[1]);
		((double[]) (this.min) )[2] = java.lang.Math.min(((double[]) (this.min) )[2], ((double[]) (bb.min) )[2]);
		((double[]) (this.max) )[0] = java.lang.Math.max(((double[]) (this.max) )[0], ((double[]) (bb.max) )[0]);
		((double[]) (this.max) )[1] = java.lang.Math.max(((double[]) (this.max) )[1], ((double[]) (bb.max) )[1]);
		((double[]) (this.max) )[2] = java.lang.Math.max(((double[]) (this.max) )[2], ((double[]) (bb.max) )[2]);
	}
	
	
	public final double surfaceArea()
	{
		double[] this1 = this.max;
		double[] rhs = this.min;
		double[] this2 = new double[3];
		double[] this3 = ((double[]) (this2) );
		((double[]) (this3) )[0] = ( ((double[]) (this1) )[0] - ((double[]) (rhs) )[0] );
		((double[]) (this3) )[1] = ( ((double[]) (this1) )[1] - ((double[]) (rhs) )[1] );
		((double[]) (this3) )[2] = ( ((double[]) (this1) )[2] - ((double[]) (rhs) )[2] );
		double[] extent = ((double[]) (this3) );
		double x = java.lang.Math.max(((double[]) (extent) )[0], ((double) (0) ));
		double y = java.lang.Math.max(((double[]) (extent) )[1], ((double) (0) ));
		double z = java.lang.Math.max(((double[]) (extent) )[2], ((double) (0) ));
		return ( 2 * (( ( ( x * z ) + ( x * y ) ) + ( y * z ) )) );
	}
	
	
	@Override public java.lang.Object __hx_setField(java.lang.String field, java.lang.Object value, boolean handleProperties)
	{
		{
			boolean __temp_executeDef1 = true;
			if (( field != null )) 
			{
				switch (field.hashCode())
				{
					case 107876:
					{
						if (field.equals("max")) 
						{
							__temp_executeDef1 = false;
							this.max = ((double[]) (value) );
							return value;
						}
						
						break;
					}
					
					
					case 108114:
					{
						if (field.equals("min")) 
						{
							__temp_executeDef1 = false;
							this.min = ((double[]) (value) );
							return value;
						}
						
						break;
					}
					
					
				}
				
			}
			
			if (__temp_executeDef1) 
			{
				return super.__hx_setField(field, value, handleProperties);
			}
			else
			{
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		{
			boolean __temp_executeDef1 = true;
			if (( field != null )) 
			{
				switch (field.hashCode())
				{
					case -1403448614:
					{
						if (field.equals("surfaceArea")) 
						{
							__temp_executeDef1 = false;
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "surfaceArea")) );
						}
						
						break;
					}
					
					
					case 108114:
					{
						if (field.equals("min")) 
						{
							__temp_executeDef1 = false;
							return this.min;
						}
						
						break;
					}
					
					
					case 103785528:
					{
						if (field.equals("merge")) 
						{
							__temp_executeDef1 = false;
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "merge")) );
						}
						
						break;
					}
					
					
					case 107876:
					{
						if (field.equals("max")) 
						{
							__temp_executeDef1 = false;
							return this.max;
						}
						
						break;
					}
					
					
					case 96417:
					{
						if (field.equals("add")) 
						{
							__temp_executeDef1 = false;
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "add")) );
						}
						
						break;
					}
					
					
					case -852036160:
					{
						if (field.equals("centroid")) 
						{
							__temp_executeDef1 = false;
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "centroid")) );
						}
						
						break;
					}
					
					
				}
				
			}
			
			if (__temp_executeDef1) 
			{
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, java.lang.Object[] dynargs)
	{
		{
			boolean __temp_executeDef1 = true;
			if (( field != null )) 
			{
				switch (field.hashCode())
				{
					case -1403448614:
					{
						if (field.equals("surfaceArea")) 
						{
							__temp_executeDef1 = false;
							return this.surfaceArea();
						}
						
						break;
					}
					
					
					case -852036160:
					{
						if (field.equals("centroid")) 
						{
							__temp_executeDef1 = false;
							return this.centroid();
						}
						
						break;
					}
					
					
					case 103785528:
					{
						if (field.equals("merge")) 
						{
							__temp_executeDef1 = false;
							this.merge(((apparentridges.BBox) (dynargs[0]) ));
						}
						
						break;
					}
					
					
					case 96417:
					{
						if (field.equals("add")) 
						{
							__temp_executeDef1 = false;
							this.add(((double[]) (dynargs[0]) ));
						}
						
						break;
					}
					
					
				}
				
			}
			
			if (__temp_executeDef1) 
			{
				return super.__hx_invokeField(field, dynargs);
			}
			
		}
		
		return null;
	}
	
	
	@Override public void __hx_getFields(haxe.root.Array<java.lang.String> baseArr)
	{
		baseArr.push("max");
		baseArr.push("min");
		super.__hx_getFields(baseArr);
	}
	
	
}


