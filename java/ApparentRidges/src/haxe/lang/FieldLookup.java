// Generated by Haxe 4.1.3
package haxe.lang;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class FieldLookup extends haxe.lang.HxObject
{
	public FieldLookup(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public FieldLookup()
	{
		haxe.lang.FieldLookup.__hx_ctor_haxe_lang_FieldLookup(this);
	}
	
	
	protected static void __hx_ctor_haxe_lang_FieldLookup(haxe.lang.FieldLookup __hx_this)
	{
	}
	
	
	public static int hash(java.lang.String s)
	{
		
		return s.hashCode();
	
	}
	
	
	public static int findHash(java.lang.String hash, java.lang.String[] hashs, int length)
	{
		int min = 0;
		int max = length;
		while (( min < max ))
		{
			int mid = ((int) (( ((double) ((( max + min ))) ) / 2 )) );
			int classify = hash.compareTo(hashs[mid]);
			if (( classify < 0 )) 
			{
				max = mid;
			}
			else
			{
				if (( classify > 0 )) 
				{
					min = ( mid + 1 );
				}
				else
				{
					return mid;
				}
				
			}
			
		}
		
		return  ~ (min) ;
	}
	
	
	public static void removeString(java.lang.String[] a, int length, int pos)
	{
		java.lang.System.arraycopy(((java.lang.Object) (a) ), ((int) (( pos + 1 )) ), ((java.lang.Object) (a) ), ((int) (pos) ), ((int) (( ( length - pos ) - 1 )) ));
		a[( length - 1 )] = null;
	}
	
	
	public static void removeFloat(double[] a, int length, int pos)
	{
		java.lang.System.arraycopy(((java.lang.Object) (a) ), ((int) (( pos + 1 )) ), ((java.lang.Object) (a) ), ((int) (pos) ), ((int) (( ( length - pos ) - 1 )) ));
		a[( length - 1 )] = ((double) (0) );
	}
	
	
	public static void removeDynamic(java.lang.Object[] a, int length, int pos)
	{
		java.lang.System.arraycopy(((java.lang.Object) (a) ), ((int) (( pos + 1 )) ), ((java.lang.Object) (a) ), ((int) (pos) ), ((int) (( ( length - pos ) - 1 )) ));
		a[( length - 1 )] = null;
	}
	
	
	public static java.lang.String[] insertString(java.lang.String[] a, int length, int pos, java.lang.String x)
	{
		java.lang.String[] a1 = a;
		int capacity = a1.length;
		if (( pos == length )) 
		{
			if (( capacity == length )) 
			{
				java.lang.String[] newarr = new java.lang.String[( (( length << 1 )) + 1 )];
				java.lang.System.arraycopy(((java.lang.Object) (a1) ), ((int) (0) ), ((java.lang.Object) (newarr) ), ((int) (0) ), ((int) (a1.length) ));
				a1 = newarr;
			}
			
		}
		else
		{
			if (( pos == 0 )) 
			{
				if (( capacity == length )) 
				{
					java.lang.String[] newarr1 = new java.lang.String[( (( length << 1 )) + 1 )];
					java.lang.System.arraycopy(((java.lang.Object) (a1) ), ((int) (0) ), ((java.lang.Object) (newarr1) ), ((int) (1) ), ((int) (length) ));
					a1 = newarr1;
				}
				else
				{
					java.lang.System.arraycopy(((java.lang.Object) (a1) ), ((int) (0) ), ((java.lang.Object) (a1) ), ((int) (1) ), ((int) (length) ));
				}
				
			}
			else
			{
				if (( capacity == length )) 
				{
					java.lang.String[] newarr2 = new java.lang.String[( (( length << 1 )) + 1 )];
					java.lang.System.arraycopy(((java.lang.Object) (a1) ), ((int) (0) ), ((java.lang.Object) (newarr2) ), ((int) (0) ), ((int) (pos) ));
					java.lang.System.arraycopy(((java.lang.Object) (a1) ), ((int) (pos) ), ((java.lang.Object) (newarr2) ), ((int) (( pos + 1 )) ), ((int) (( length - pos )) ));
					a1 = newarr2;
				}
				else
				{
					java.lang.System.arraycopy(((java.lang.Object) (a1) ), ((int) (pos) ), ((java.lang.Object) (a1) ), ((int) (( pos + 1 )) ), ((int) (( length - pos )) ));
					java.lang.System.arraycopy(((java.lang.Object) (a1) ), ((int) (0) ), ((java.lang.Object) (a1) ), ((int) (0) ), ((int) (pos) ));
				}
				
			}
			
		}
		
		a1[pos] = x;
		return a1;
	}
	
	
	public static double[] insertFloat(double[] a, int length, int pos, double x)
	{
		double[] a1 = a;
		int capacity = a1.length;
		if (( pos == length )) 
		{
			if (( capacity == length )) 
			{
				double[] newarr = new double[( (( length << 1 )) + 1 )];
				java.lang.System.arraycopy(((java.lang.Object) (a1) ), ((int) (0) ), ((java.lang.Object) (newarr) ), ((int) (0) ), ((int) (a1.length) ));
				a1 = newarr;
			}
			
		}
		else
		{
			if (( pos == 0 )) 
			{
				if (( capacity == length )) 
				{
					double[] newarr1 = new double[( (( length << 1 )) + 1 )];
					java.lang.System.arraycopy(((java.lang.Object) (a1) ), ((int) (0) ), ((java.lang.Object) (newarr1) ), ((int) (1) ), ((int) (length) ));
					a1 = newarr1;
				}
				else
				{
					java.lang.System.arraycopy(((java.lang.Object) (a1) ), ((int) (0) ), ((java.lang.Object) (a1) ), ((int) (1) ), ((int) (length) ));
				}
				
			}
			else
			{
				if (( capacity == length )) 
				{
					double[] newarr2 = new double[( (( length << 1 )) + 1 )];
					java.lang.System.arraycopy(((java.lang.Object) (a1) ), ((int) (0) ), ((java.lang.Object) (newarr2) ), ((int) (0) ), ((int) (pos) ));
					java.lang.System.arraycopy(((java.lang.Object) (a1) ), ((int) (pos) ), ((java.lang.Object) (newarr2) ), ((int) (( pos + 1 )) ), ((int) (( length - pos )) ));
					a1 = newarr2;
				}
				else
				{
					java.lang.System.arraycopy(((java.lang.Object) (a1) ), ((int) (pos) ), ((java.lang.Object) (a1) ), ((int) (( pos + 1 )) ), ((int) (( length - pos )) ));
					java.lang.System.arraycopy(((java.lang.Object) (a1) ), ((int) (0) ), ((java.lang.Object) (a1) ), ((int) (0) ), ((int) (pos) ));
				}
				
			}
			
		}
		
		a1[pos] = x;
		return a1;
	}
	
	
	public static java.lang.Object[] insertDynamic(java.lang.Object[] a, int length, int pos, java.lang.Object x)
	{
		java.lang.Object[] a1 = a;
		int capacity = a1.length;
		if (( pos == length )) 
		{
			if (( capacity == length )) 
			{
				java.lang.Object[] newarr = new java.lang.Object[( (( length << 1 )) + 1 )];
				java.lang.System.arraycopy(((java.lang.Object) (a1) ), ((int) (0) ), ((java.lang.Object) (newarr) ), ((int) (0) ), ((int) (a1.length) ));
				a1 = newarr;
			}
			
		}
		else
		{
			if (( pos == 0 )) 
			{
				if (( capacity == length )) 
				{
					java.lang.Object[] newarr1 = new java.lang.Object[( (( length << 1 )) + 1 )];
					java.lang.System.arraycopy(((java.lang.Object) (a1) ), ((int) (0) ), ((java.lang.Object) (newarr1) ), ((int) (1) ), ((int) (length) ));
					a1 = newarr1;
				}
				else
				{
					java.lang.System.arraycopy(((java.lang.Object) (a1) ), ((int) (0) ), ((java.lang.Object) (a1) ), ((int) (1) ), ((int) (length) ));
				}
				
			}
			else
			{
				if (( capacity == length )) 
				{
					java.lang.Object[] newarr2 = new java.lang.Object[( (( length << 1 )) + 1 )];
					java.lang.System.arraycopy(((java.lang.Object) (a1) ), ((int) (0) ), ((java.lang.Object) (newarr2) ), ((int) (0) ), ((int) (pos) ));
					java.lang.System.arraycopy(((java.lang.Object) (a1) ), ((int) (pos) ), ((java.lang.Object) (newarr2) ), ((int) (( pos + 1 )) ), ((int) (( length - pos )) ));
					a1 = newarr2;
				}
				else
				{
					java.lang.System.arraycopy(((java.lang.Object) (a1) ), ((int) (pos) ), ((java.lang.Object) (a1) ), ((int) (( pos + 1 )) ), ((int) (( length - pos )) ));
					java.lang.System.arraycopy(((java.lang.Object) (a1) ), ((int) (0) ), ((java.lang.Object) (a1) ), ((int) (0) ), ((int) (pos) ));
				}
				
			}
			
		}
		
		a1[pos] = ((java.lang.Object) (x) );
		return a1;
	}
	
	
}


